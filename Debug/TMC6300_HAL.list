
TMC6300_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  08008be0  08008be0  00018be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009088  08009088  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08009088  08009088  00019088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009090  08009090  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009090  08009090  00019090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009094  08009094  00019094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08009098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  2000008c  08009124  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08009124  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001650a  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028ef  00000000  00000000  000365c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001308  00000000  00000000  00038eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001210  00000000  00000000  0003a1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023947  00000000  00000000  0003b3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015016  00000000  00000000  0005ed17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dfe4d  00000000  00000000  00073d2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00153b7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005714  00000000  00000000  00153bcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008bc8 	.word	0x08008bc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	08008bc8 	.word	0x08008bc8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <setSequence>:
int32_t target_position = 0;
int32_t target_velocity = 12 * 100;
int32_t target_current = 0;

void setSequence()
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
	static uint8_t prev_seq_index = 0;
	uint8_t state_a = HAL_GPIO_ReadPin(HAL_A_GPIO_Port, HAL_A_Pin);
 800058a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800058e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000592:	f003 f8c7 	bl	8003724 <HAL_GPIO_ReadPin>
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
	uint8_t state_b = HAL_GPIO_ReadPin(HAL_B_GPIO_Port, HAL_B_Pin);
 800059a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800059e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a2:	f003 f8bf 	bl	8003724 <HAL_GPIO_ReadPin>
 80005a6:	4603      	mov	r3, r0
 80005a8:	71bb      	strb	r3, [r7, #6]
	uint8_t state_c = HAL_GPIO_ReadPin(HAL_C_GPIO_Port, HAL_C_Pin);
 80005aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b2:	f003 f8b7 	bl	8003724 <HAL_GPIO_ReadPin>
 80005b6:	4603      	mov	r3, r0
 80005b8:	717b      	strb	r3, [r7, #5]
	uint8_t index = (state_c << 2) | (state_b << 1) | (state_a << 0);
 80005ba:	797b      	ldrb	r3, [r7, #5]
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	b25a      	sxtb	r2, r3
 80005c0:	79bb      	ldrb	r3, [r7, #6]
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	b25b      	sxtb	r3, r3
 80005c6:	4313      	orrs	r3, r2
 80005c8:	b25a      	sxtb	r2, r3
 80005ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ce:	4313      	orrs	r3, r2
 80005d0:	b25b      	sxtb	r3, r3
 80005d2:	713b      	strb	r3, [r7, #4]
	uint8_t seq_index = (switch_sequence[index] + 4 + direction * 2) % 6;
 80005d4:	793b      	ldrb	r3, [r7, #4]
 80005d6:	4a3e      	ldr	r2, [pc, #248]	; (80006d0 <setSequence+0x14c>)
 80005d8:	5cd3      	ldrb	r3, [r2, r3]
 80005da:	1d1a      	adds	r2, r3, #4
 80005dc:	4b3d      	ldr	r3, [pc, #244]	; (80006d4 <setSequence+0x150>)
 80005de:	f993 3000 	ldrsb.w	r3, [r3]
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	441a      	add	r2, r3
 80005e6:	4b3c      	ldr	r3, [pc, #240]	; (80006d8 <setSequence+0x154>)
 80005e8:	fb83 3102 	smull	r3, r1, r3, r2
 80005ec:	17d3      	asrs	r3, r2, #31
 80005ee:	1ac9      	subs	r1, r1, r3
 80005f0:	460b      	mov	r3, r1
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	440b      	add	r3, r1
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	1ad1      	subs	r1, r2, r3
 80005fa:	460b      	mov	r3, r1
 80005fc:	70fb      	strb	r3, [r7, #3]

	if(switch_sequence[index] == (prev_seq_index + 1) % 6)
 80005fe:	793b      	ldrb	r3, [r7, #4]
 8000600:	4a33      	ldr	r2, [pc, #204]	; (80006d0 <setSequence+0x14c>)
 8000602:	5cd3      	ldrb	r3, [r2, r3]
 8000604:	4618      	mov	r0, r3
 8000606:	4b35      	ldr	r3, [pc, #212]	; (80006dc <setSequence+0x158>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	1c59      	adds	r1, r3, #1
 800060c:	4b32      	ldr	r3, [pc, #200]	; (80006d8 <setSequence+0x154>)
 800060e:	fb83 3201 	smull	r3, r2, r3, r1
 8000612:	17cb      	asrs	r3, r1, #31
 8000614:	1ad2      	subs	r2, r2, r3
 8000616:	4613      	mov	r3, r2
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	4413      	add	r3, r2
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	1aca      	subs	r2, r1, r3
 8000620:	4290      	cmp	r0, r2
 8000622:	d104      	bne.n	800062e <setSequence+0xaa>
		position += 1;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <setSequence+0x15c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	3301      	adds	r3, #1
 800062a:	4a2d      	ldr	r2, [pc, #180]	; (80006e0 <setSequence+0x15c>)
 800062c:	6013      	str	r3, [r2, #0]
	if(prev_seq_index == (switch_sequence[index] + 1) % 6)
 800062e:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <setSequence+0x158>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	4618      	mov	r0, r3
 8000634:	793b      	ldrb	r3, [r7, #4]
 8000636:	4a26      	ldr	r2, [pc, #152]	; (80006d0 <setSequence+0x14c>)
 8000638:	5cd3      	ldrb	r3, [r2, r3]
 800063a:	1c59      	adds	r1, r3, #1
 800063c:	4b26      	ldr	r3, [pc, #152]	; (80006d8 <setSequence+0x154>)
 800063e:	fb83 3201 	smull	r3, r2, r3, r1
 8000642:	17cb      	asrs	r3, r1, #31
 8000644:	1ad2      	subs	r2, r2, r3
 8000646:	4613      	mov	r3, r2
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	4413      	add	r3, r2
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	1aca      	subs	r2, r1, r3
 8000650:	4290      	cmp	r0, r2
 8000652:	d104      	bne.n	800065e <setSequence+0xda>
		position -= 1;
 8000654:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <setSequence+0x15c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	3b01      	subs	r3, #1
 800065a:	4a21      	ldr	r2, [pc, #132]	; (80006e0 <setSequence+0x15c>)
 800065c:	6013      	str	r3, [r2, #0]
	prev_seq_index = switch_sequence[index];
 800065e:	793b      	ldrb	r3, [r7, #4]
 8000660:	4a1b      	ldr	r2, [pc, #108]	; (80006d0 <setSequence+0x14c>)
 8000662:	5cd2      	ldrb	r2, [r2, r3]
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <setSequence+0x158>)
 8000666:	701a      	strb	r2, [r3, #0]

	htim1.Instance->CCR1 = pulse_sequence[seq_index][0] * power;
 8000668:	78fa      	ldrb	r2, [r7, #3]
 800066a:	491e      	ldr	r1, [pc, #120]	; (80006e4 <setSequence+0x160>)
 800066c:	4613      	mov	r3, r2
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	4413      	add	r3, r2
 8000672:	440b      	add	r3, r1
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	461a      	mov	r2, r3
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <setSequence+0x164>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	fb03 f202 	mul.w	r2, r3, r2
 8000680:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <setSequence+0x168>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	635a      	str	r2, [r3, #52]	; 0x34
	htim1.Instance->CCR2 = pulse_sequence[seq_index][1] * power;
 8000686:	78fa      	ldrb	r2, [r7, #3]
 8000688:	4916      	ldr	r1, [pc, #88]	; (80006e4 <setSequence+0x160>)
 800068a:	4613      	mov	r3, r2
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	4413      	add	r3, r2
 8000690:	440b      	add	r3, r1
 8000692:	3301      	adds	r3, #1
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	461a      	mov	r2, r3
 8000698:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <setSequence+0x164>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	fb03 f202 	mul.w	r2, r3, r2
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <setSequence+0x168>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	639a      	str	r2, [r3, #56]	; 0x38
	htim1.Instance->CCR3 = pulse_sequence[seq_index][2] * power;
 80006a6:	78fa      	ldrb	r2, [r7, #3]
 80006a8:	490e      	ldr	r1, [pc, #56]	; (80006e4 <setSequence+0x160>)
 80006aa:	4613      	mov	r3, r2
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	4413      	add	r3, r2
 80006b0:	440b      	add	r3, r1
 80006b2:	3302      	adds	r3, #2
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	461a      	mov	r2, r3
 80006b8:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <setSequence+0x164>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	fb03 f202 	mul.w	r2, r3, r2
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <setSequence+0x168>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	08008c1c 	.word	0x08008c1c
 80006d4:	20000270 	.word	0x20000270
 80006d8:	2aaaaaab 	.word	0x2aaaaaab
 80006dc:	200002a8 	.word	0x200002a8
 80006e0:	20000274 	.word	0x20000274
 80006e4:	08008c24 	.word	0x08008c24
 80006e8:	20000000 	.word	0x20000000
 80006ec:	20000154 	.word	0x20000154

080006f0 <HAL_GPIO_EXTI_Callback>:


int32_t velocity_interval = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == HAL_A_Pin || GPIO_Pin == HAL_B_Pin || GPIO_Pin == HAL_C_Pin)
 80006fa:	88fb      	ldrh	r3, [r7, #6]
 80006fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000700:	d007      	beq.n	8000712 <HAL_GPIO_EXTI_Callback+0x22>
 8000702:	88fb      	ldrh	r3, [r7, #6]
 8000704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000708:	d003      	beq.n	8000712 <HAL_GPIO_EXTI_Callback+0x22>
 800070a:	88fb      	ldrh	r3, [r7, #6]
 800070c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000710:	d10b      	bne.n	800072a <HAL_GPIO_EXTI_Callback+0x3a>
	{
		setSequence();
 8000712:	f7ff ff37 	bl	8000584 <setSequence>
		velocity_interval = htim2.Instance->CNT;
 8000716:	4b07      	ldr	r3, [pc, #28]	; (8000734 <HAL_GPIO_EXTI_Callback+0x44>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800071c:	461a      	mov	r2, r3
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <HAL_GPIO_EXTI_Callback+0x48>)
 8000720:	601a      	str	r2, [r3, #0]
		htim2.Instance->CNT = 0;
 8000722:	4b04      	ldr	r3, [pc, #16]	; (8000734 <HAL_GPIO_EXTI_Callback+0x44>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2200      	movs	r2, #0
 8000728:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200001a0 	.word	0x200001a0
 8000738:	20000288 	.word	0x20000288

0800073c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	velocity_interval = -1;
 8000744:	4b04      	ldr	r3, [pc, #16]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000746:	f04f 32ff 	mov.w	r2, #4294967295
 800074a:	601a      	str	r2, [r3, #0]
}
 800074c:	bf00      	nop
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	20000288 	.word	0x20000288

0800075c <HAL_UART_RxCpltCallback>:

uint8_t uart_receive_buffer[UART_PACKAGE_SIZE];
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	// send response
	UartResponsePackage_t package;
	package.response = UART_ACK;
 8000764:	23f0      	movs	r3, #240	; 0xf0
 8000766:	733b      	strb	r3, [r7, #12]
	package.none0 = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	737b      	strb	r3, [r7, #13]
	package.none1 = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	73bb      	strb	r3, [r7, #14]
	package.none2 = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	73fb      	strb	r3, [r7, #15]
	package.none3 = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	743b      	strb	r3, [r7, #16]
	package.none4 = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	747b      	strb	r3, [r7, #17]
	package.none5 = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	74bb      	strb	r3, [r7, #18]
	package.none6 = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	74fb      	strb	r3, [r7, #19]
	package.none7 = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	753b      	strb	r3, [r7, #20]
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)&package, UART_PACKAGE_SIZE);
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	2209      	movs	r2, #9
 800078e:	4619      	mov	r1, r3
 8000790:	4805      	ldr	r0, [pc, #20]	; (80007a8 <HAL_UART_RxCpltCallback+0x4c>)
 8000792:	f005 fcb9 	bl	8006108 <HAL_UART_Transmit_IT>

	// restart interrupt
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&uart_receive_buffer, UART_PACKAGE_SIZE);
 8000796:	2209      	movs	r2, #9
 8000798:	4904      	ldr	r1, [pc, #16]	; (80007ac <HAL_UART_RxCpltCallback+0x50>)
 800079a:	4803      	ldr	r0, [pc, #12]	; (80007a8 <HAL_UART_RxCpltCallback+0x4c>)
 800079c:	f005 fd22 	bl	80061e4 <HAL_UART_Receive_IT>
}
 80007a0:	bf00      	nop
 80007a2:	3718      	adds	r7, #24
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200001ec 	.word	0x200001ec
 80007ac:	2000028c 	.word	0x2000028c

080007b0 <HAL_ADC_ConvCpltCallback>:


uint32_t adc_buffer[2];
uint32_t adc_dma_buffer[2];
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	// filter and insert data
	adc_buffer[0] = (adc_buffer[0] * 253 + adc_dma_buffer[0] * 3) >> 8;
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <HAL_ADC_ConvCpltCallback+0x5c>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	4613      	mov	r3, r2
 80007be:	019b      	lsls	r3, r3, #6
 80007c0:	1a9b      	subs	r3, r3, r2
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	1899      	adds	r1, r3, r2
 80007c6:	4b12      	ldr	r3, [pc, #72]	; (8000810 <HAL_ADC_ConvCpltCallback+0x60>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	4613      	mov	r3, r2
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	4413      	add	r3, r2
 80007d0:	440b      	add	r3, r1
 80007d2:	0a1b      	lsrs	r3, r3, #8
 80007d4:	4a0d      	ldr	r2, [pc, #52]	; (800080c <HAL_ADC_ConvCpltCallback+0x5c>)
 80007d6:	6013      	str	r3, [r2, #0]
	adc_buffer[1] = (adc_buffer[1] * 253 + adc_dma_buffer[1] * 3) >> 8;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <HAL_ADC_ConvCpltCallback+0x5c>)
 80007da:	685a      	ldr	r2, [r3, #4]
 80007dc:	4613      	mov	r3, r2
 80007de:	019b      	lsls	r3, r3, #6
 80007e0:	1a9b      	subs	r3, r3, r2
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	1899      	adds	r1, r3, r2
 80007e6:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <HAL_ADC_ConvCpltCallback+0x60>)
 80007e8:	685a      	ldr	r2, [r3, #4]
 80007ea:	4613      	mov	r3, r2
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	4413      	add	r3, r2
 80007f0:	440b      	add	r3, r1
 80007f2:	0a1b      	lsrs	r3, r3, #8
 80007f4:	4a05      	ldr	r2, [pc, #20]	; (800080c <HAL_ADC_ConvCpltCallback+0x5c>)
 80007f6:	6053      	str	r3, [r2, #4]

	// current regulation loop
	HAL_ADC_Start_DMA(&hadc1, adc_dma_buffer, 2);
 80007f8:	2202      	movs	r2, #2
 80007fa:	4905      	ldr	r1, [pc, #20]	; (8000810 <HAL_ADC_ConvCpltCallback+0x60>)
 80007fc:	4805      	ldr	r0, [pc, #20]	; (8000814 <HAL_ADC_ConvCpltCallback+0x64>)
 80007fe:	f001 fb0d 	bl	8001e1c <HAL_ADC_Start_DMA>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000298 	.word	0x20000298
 8000810:	200002a0 	.word	0x200002a0
 8000814:	200000a8 	.word	0x200000a8

08000818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b09e      	sub	sp, #120	; 0x78
 800081c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081e:	f000 ff66 	bl	80016ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000822:	f000 fa4f 	bl	8000cc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000826:	f000 fc57 	bl	80010d8 <MX_GPIO_Init>
  MX_DMA_Init();
 800082a:	f000 fc37 	bl	800109c <MX_DMA_Init>
  MX_ADC1_Init();
 800082e:	f000 fa9b 	bl	8000d68 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000832:	f000 fb0d 	bl	8000e50 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000836:	f000 fc01 	bl	800103c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800083a:	f000 fbb1 	bl	8000fa0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	htim1.Instance->CCR1 = 500;
 800083e:	4b5f      	ldr	r3, [pc, #380]	; (80009bc <main+0x1a4>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000846:	635a      	str	r2, [r3, #52]	; 0x34
	htim1.Instance->CCR2 = 500;
 8000848:	4b5c      	ldr	r3, [pc, #368]	; (80009bc <main+0x1a4>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000850:	639a      	str	r2, [r3, #56]	; 0x38
	htim1.Instance->CCR3 = 500;
 8000852:	4b5a      	ldr	r3, [pc, #360]	; (80009bc <main+0x1a4>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800085a:	63da      	str	r2, [r3, #60]	; 0x3c

	htim1.Instance->CR2 &= ~(TIM_CR2_CCPC);
 800085c:	4b57      	ldr	r3, [pc, #348]	; (80009bc <main+0x1a4>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	685a      	ldr	r2, [r3, #4]
 8000862:	4b56      	ldr	r3, [pc, #344]	; (80009bc <main+0x1a4>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f022 0201 	bic.w	r2, r2, #1
 800086a:	605a      	str	r2, [r3, #4]
	HAL_TIM_Base_Start(&htim1);
 800086c:	4853      	ldr	r0, [pc, #332]	; (80009bc <main+0x1a4>)
 800086e:	f004 f99f 	bl	8004bb0 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000872:	2100      	movs	r1, #0
 8000874:	4851      	ldr	r0, [pc, #324]	; (80009bc <main+0x1a4>)
 8000876:	f004 fa93 	bl	8004da0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800087a:	2100      	movs	r1, #0
 800087c:	484f      	ldr	r0, [pc, #316]	; (80009bc <main+0x1a4>)
 800087e:	f005 fa35 	bl	8005cec <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000882:	2104      	movs	r1, #4
 8000884:	484d      	ldr	r0, [pc, #308]	; (80009bc <main+0x1a4>)
 8000886:	f004 fa8b 	bl	8004da0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800088a:	2104      	movs	r1, #4
 800088c:	484b      	ldr	r0, [pc, #300]	; (80009bc <main+0x1a4>)
 800088e:	f005 fa2d 	bl	8005cec <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000892:	2108      	movs	r1, #8
 8000894:	4849      	ldr	r0, [pc, #292]	; (80009bc <main+0x1a4>)
 8000896:	f004 fa83 	bl	8004da0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800089a:	2108      	movs	r1, #8
 800089c:	4847      	ldr	r0, [pc, #284]	; (80009bc <main+0x1a4>)
 800089e:	f005 fa25 	bl	8005cec <HAL_TIMEx_PWMN_Start>

	// start interrupt
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&uart_receive_buffer, UART_PACKAGE_SIZE);
 80008a2:	2209      	movs	r2, #9
 80008a4:	4946      	ldr	r1, [pc, #280]	; (80009c0 <main+0x1a8>)
 80008a6:	4847      	ldr	r0, [pc, #284]	; (80009c4 <main+0x1ac>)
 80008a8:	f005 fc9c 	bl	80061e4 <HAL_UART_Receive_IT>

	// start adc
	HAL_ADC_Start_DMA(&hadc1, adc_dma_buffer, 2);
 80008ac:	2202      	movs	r2, #2
 80008ae:	4946      	ldr	r1, [pc, #280]	; (80009c8 <main+0x1b0>)
 80008b0:	4846      	ldr	r0, [pc, #280]	; (80009cc <main+0x1b4>)
 80008b2:	f001 fab3 	bl	8001e1c <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim2);
 80008b6:	4846      	ldr	r0, [pc, #280]	; (80009d0 <main+0x1b8>)
 80008b8:	f004 f9c6 	bl	8004c48 <HAL_TIM_Base_Start_IT>

	char tx_buffer[32];
	sprintf(tx_buffer, "current(mA), velocity(n/s), position(n)\n");
 80008bc:	f107 0320 	add.w	r3, r7, #32
 80008c0:	4944      	ldr	r1, [pc, #272]	; (80009d4 <main+0x1bc>)
 80008c2:	4618      	mov	r0, r3
 80008c4:	f006 ffb6 	bl	8007834 <siprintf>
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, strlen(tx_buffer));
 80008c8:	f107 0320 	add.w	r3, r7, #32
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff fc7f 	bl	80001d0 <strlen>
 80008d2:	4603      	mov	r3, r0
 80008d4:	b29a      	uxth	r2, r3
 80008d6:	f107 0320 	add.w	r3, r7, #32
 80008da:	4619      	mov	r1, r3
 80008dc:	4839      	ldr	r0, [pc, #228]	; (80009c4 <main+0x1ac>)
 80008de:	f005 fc13 	bl	8006108 <HAL_UART_Transmit_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		static uint32_t current_loop = 100;
		if(current_loop < HAL_GetTick())
 80008e2:	f000 ff6d 	bl	80017c0 <HAL_GetTick>
 80008e6:	4602      	mov	r2, r0
 80008e8:	4b3b      	ldr	r3, [pc, #236]	; (80009d8 <main+0x1c0>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	f240 809a 	bls.w	8000a26 <main+0x20e>
		{
			current_loop = HAL_GetTick() + 5;
 80008f2:	f000 ff65 	bl	80017c0 <HAL_GetTick>
 80008f6:	4603      	mov	r3, r0
 80008f8:	3305      	adds	r3, #5
 80008fa:	4a37      	ldr	r2, [pc, #220]	; (80009d8 <main+0x1c0>)
 80008fc:	6013      	str	r3, [r2, #0]

			// get milliamp count
			int32_t millivolt = (int32_t)(3300 * adc_buffer[1] / 4096);
 80008fe:	4b37      	ldr	r3, [pc, #220]	; (80009dc <main+0x1c4>)
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	f640 42e4 	movw	r2, #3300	; 0xce4
 8000906:	fb02 f303 	mul.w	r3, r2, r3
 800090a:	0b1b      	lsrs	r3, r3, #12
 800090c:	66bb      	str	r3, [r7, #104]	; 0x68
			current = direction * millivolt / 1.5924f;
 800090e:	4b34      	ldr	r3, [pc, #208]	; (80009e0 <main+0x1c8>)
 8000910:	f993 3000 	ldrsb.w	r3, [r3]
 8000914:	461a      	mov	r2, r3
 8000916:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000918:	fb02 f303 	mul.w	r3, r2, r3
 800091c:	ee07 3a90 	vmov	s15, r3
 8000920:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000924:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80009e4 <main+0x1cc>
 8000928:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800092c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000930:	ee17 2a90 	vmov	r2, s15
 8000934:	4b2c      	ldr	r3, [pc, #176]	; (80009e8 <main+0x1d0>)
 8000936:	601a      	str	r2, [r3, #0]

			// PI controller
			int32_t error = target_current - current;
 8000938:	4b2c      	ldr	r3, [pc, #176]	; (80009ec <main+0x1d4>)
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	4b2a      	ldr	r3, [pc, #168]	; (80009e8 <main+0x1d0>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	667b      	str	r3, [r7, #100]	; 0x64

			int32_t proportional = error * 64;
 8000944:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000946:	019b      	lsls	r3, r3, #6
 8000948:	663b      	str	r3, [r7, #96]	; 0x60

			static int32_t integral = 0;
			integral += error * 32;
 800094a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800094c:	015a      	lsls	r2, r3, #5
 800094e:	4b28      	ldr	r3, [pc, #160]	; (80009f0 <main+0x1d8>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4413      	add	r3, r2
 8000954:	4a26      	ldr	r2, [pc, #152]	; (80009f0 <main+0x1d8>)
 8000956:	6013      	str	r3, [r2, #0]
			integral = integral > 512000 ? 512000 : integral;
 8000958:	4b25      	ldr	r3, [pc, #148]	; (80009f0 <main+0x1d8>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f5b3 2ffa 	cmp.w	r3, #512000	; 0x7d000
 8000960:	bfa8      	it	ge
 8000962:	f44f 23fa 	movge.w	r3, #512000	; 0x7d000
 8000966:	4a22      	ldr	r2, [pc, #136]	; (80009f0 <main+0x1d8>)
 8000968:	6013      	str	r3, [r2, #0]
			integral = integral <-512000 ?-512000 : integral;
 800096a:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <main+0x1d8>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a21      	ldr	r2, [pc, #132]	; (80009f4 <main+0x1dc>)
 8000970:	4293      	cmp	r3, r2
 8000972:	bfb8      	it	lt
 8000974:	4613      	movlt	r3, r2
 8000976:	4a1e      	ldr	r2, [pc, #120]	; (80009f0 <main+0x1d8>)
 8000978:	6013      	str	r3, [r2, #0]

			int32_t output = proportional / 256 + integral / 256;
 800097a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800097c:	2b00      	cmp	r3, #0
 800097e:	da00      	bge.n	8000982 <main+0x16a>
 8000980:	33ff      	adds	r3, #255	; 0xff
 8000982:	121b      	asrs	r3, r3, #8
 8000984:	461a      	mov	r2, r3
 8000986:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <main+0x1d8>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	da00      	bge.n	8000990 <main+0x178>
 800098e:	33ff      	adds	r3, #255	; 0xff
 8000990:	121b      	asrs	r3, r3, #8
 8000992:	4413      	add	r3, r2
 8000994:	65fb      	str	r3, [r7, #92]	; 0x5c
			output = output > 2000 ? 2000 : output;
 8000996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000998:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800099c:	bfa8      	it	ge
 800099e:	f44f 63fa 	movge.w	r3, #2000	; 0x7d0
 80009a2:	65fb      	str	r3, [r7, #92]	; 0x5c
			output = output <-2000 ?-2000 : output;
 80009a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009a6:	4a14      	ldr	r2, [pc, #80]	; (80009f8 <main+0x1e0>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	bfb8      	it	lt
 80009ac:	4613      	movlt	r3, r2
 80009ae:	65fb      	str	r3, [r7, #92]	; 0x5c

			direction = output > 0 ? 1 : -1;
 80009b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	dd22      	ble.n	80009fc <main+0x1e4>
 80009b6:	2201      	movs	r2, #1
 80009b8:	e022      	b.n	8000a00 <main+0x1e8>
 80009ba:	bf00      	nop
 80009bc:	20000154 	.word	0x20000154
 80009c0:	2000028c 	.word	0x2000028c
 80009c4:	200001ec 	.word	0x200001ec
 80009c8:	200002a0 	.word	0x200002a0
 80009cc:	200000a8 	.word	0x200000a8
 80009d0:	200001a0 	.word	0x200001a0
 80009d4:	08008be0 	.word	0x08008be0
 80009d8:	20000008 	.word	0x20000008
 80009dc:	20000298 	.word	0x20000298
 80009e0:	20000270 	.word	0x20000270
 80009e4:	3fcbd3c3 	.word	0x3fcbd3c3
 80009e8:	2000027c 	.word	0x2000027c
 80009ec:	20000284 	.word	0x20000284
 80009f0:	200002ac 	.word	0x200002ac
 80009f4:	fff83000 	.word	0xfff83000
 80009f8:	fffff830 	.word	0xfffff830
 80009fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000a00:	4b97      	ldr	r3, [pc, #604]	; (8000c60 <main+0x448>)
 8000a02:	701a      	strb	r2, [r3, #0]
			power = labs(output);
 8000a04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	bfb8      	it	lt
 8000a0a:	425b      	neglt	r3, r3
 8000a0c:	4a95      	ldr	r2, [pc, #596]	; (8000c64 <main+0x44c>)
 8000a0e:	6013      	str	r3, [r2, #0]

			if(velocity <= 5 && velocity >= -5)
 8000a10:	4b95      	ldr	r3, [pc, #596]	; (8000c68 <main+0x450>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2b05      	cmp	r3, #5
 8000a16:	dc06      	bgt.n	8000a26 <main+0x20e>
 8000a18:	4b93      	ldr	r3, [pc, #588]	; (8000c68 <main+0x450>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f113 0f05 	cmn.w	r3, #5
 8000a20:	db01      	blt.n	8000a26 <main+0x20e>
				setSequence();
 8000a22:	f7ff fdaf 	bl	8000584 <setSequence>
		}

		static uint32_t velocity_loop = 100;
		if(velocity_loop < HAL_GetTick())
 8000a26:	f000 fecb 	bl	80017c0 <HAL_GetTick>
 8000a2a:	4602      	mov	r2, r0
 8000a2c:	4b8f      	ldr	r3, [pc, #572]	; (8000c6c <main+0x454>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d97b      	bls.n	8000b2c <main+0x314>
		{
			velocity_loop = HAL_GetTick() + 10;
 8000a34:	f000 fec4 	bl	80017c0 <HAL_GetTick>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	330a      	adds	r3, #10
 8000a3c:	4a8b      	ldr	r2, [pc, #556]	; (8000c6c <main+0x454>)
 8000a3e:	6013      	str	r3, [r2, #0]

			// get velocity count
			static int32_t prev_position = 0;
			int32_t dir = position - prev_position;
 8000a40:	4b8b      	ldr	r3, [pc, #556]	; (8000c70 <main+0x458>)
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	4b8b      	ldr	r3, [pc, #556]	; (8000c74 <main+0x45c>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	65bb      	str	r3, [r7, #88]	; 0x58
			prev_position = position;
 8000a4c:	4b88      	ldr	r3, [pc, #544]	; (8000c70 <main+0x458>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a88      	ldr	r2, [pc, #544]	; (8000c74 <main+0x45c>)
 8000a52:	6013      	str	r3, [r2, #0]
			dir = dir > 1 ? 1 : dir;
 8000a54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	bfa8      	it	ge
 8000a5a:	2301      	movge	r3, #1
 8000a5c:	65bb      	str	r3, [r7, #88]	; 0x58
			dir = dir < -1 ? -1 : dir;
 8000a5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a60:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000a64:	65bb      	str	r3, [r7, #88]	; 0x58

			int32_t raw_velocity = dir * 20000000l / velocity_interval;
 8000a66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a68:	4a83      	ldr	r2, [pc, #524]	; (8000c78 <main+0x460>)
 8000a6a:	fb03 f202 	mul.w	r2, r3, r2
 8000a6e:	4b83      	ldr	r3, [pc, #524]	; (8000c7c <main+0x464>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a76:	66fb      	str	r3, [r7, #108]	; 0x6c
			if(velocity_interval == -1)
 8000a78:	4b80      	ldr	r3, [pc, #512]	; (8000c7c <main+0x464>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a80:	d101      	bne.n	8000a86 <main+0x26e>
				raw_velocity = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	66fb      	str	r3, [r7, #108]	; 0x6c
			velocity = (velocity * 150 + raw_velocity * 106) >> 8;
 8000a86:	4b78      	ldr	r3, [pc, #480]	; (8000c68 <main+0x450>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2296      	movs	r2, #150	; 0x96
 8000a8c:	fb03 f202 	mul.w	r2, r3, r2
 8000a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000a92:	216a      	movs	r1, #106	; 0x6a
 8000a94:	fb01 f303 	mul.w	r3, r1, r3
 8000a98:	4413      	add	r3, r2
 8000a9a:	121b      	asrs	r3, r3, #8
 8000a9c:	4a72      	ldr	r2, [pc, #456]	; (8000c68 <main+0x450>)
 8000a9e:	6013      	str	r3, [r2, #0]

			// PI controller
			int32_t error = target_velocity - velocity;
 8000aa0:	4b77      	ldr	r3, [pc, #476]	; (8000c80 <main+0x468>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b70      	ldr	r3, [pc, #448]	; (8000c68 <main+0x450>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	657b      	str	r3, [r7, #84]	; 0x54

			int32_t proportional = error * 800;
 8000aac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000aae:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000ab2:	fb02 f303 	mul.w	r3, r2, r3
 8000ab6:	653b      	str	r3, [r7, #80]	; 0x50

			static int32_t integral = 0;
			integral += error * 120;
 8000ab8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000aba:	4613      	mov	r3, r2
 8000abc:	011b      	lsls	r3, r3, #4
 8000abe:	1a9b      	subs	r3, r3, r2
 8000ac0:	00db      	lsls	r3, r3, #3
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	4b6f      	ldr	r3, [pc, #444]	; (8000c84 <main+0x46c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4413      	add	r3, r2
 8000aca:	4a6e      	ldr	r2, [pc, #440]	; (8000c84 <main+0x46c>)
 8000acc:	6013      	str	r3, [r2, #0]
			integral = integral > 256000 ? 256000 : integral;
 8000ace:	4b6d      	ldr	r3, [pc, #436]	; (8000c84 <main+0x46c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f5b3 3f7a 	cmp.w	r3, #256000	; 0x3e800
 8000ad6:	bfa8      	it	ge
 8000ad8:	f44f 337a 	movge.w	r3, #256000	; 0x3e800
 8000adc:	4a69      	ldr	r2, [pc, #420]	; (8000c84 <main+0x46c>)
 8000ade:	6013      	str	r3, [r2, #0]
			integral = integral <-256000 ?-256000 : integral;
 8000ae0:	4b68      	ldr	r3, [pc, #416]	; (8000c84 <main+0x46c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a68      	ldr	r2, [pc, #416]	; (8000c88 <main+0x470>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	bfb8      	it	lt
 8000aea:	4613      	movlt	r3, r2
 8000aec:	4a65      	ldr	r2, [pc, #404]	; (8000c84 <main+0x46c>)
 8000aee:	6013      	str	r3, [r2, #0]

			int32_t output = proportional / 256 + integral / 256;
 8000af0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	da00      	bge.n	8000af8 <main+0x2e0>
 8000af6:	33ff      	adds	r3, #255	; 0xff
 8000af8:	121b      	asrs	r3, r3, #8
 8000afa:	461a      	mov	r2, r3
 8000afc:	4b61      	ldr	r3, [pc, #388]	; (8000c84 <main+0x46c>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	da00      	bge.n	8000b06 <main+0x2ee>
 8000b04:	33ff      	adds	r3, #255	; 0xff
 8000b06:	121b      	asrs	r3, r3, #8
 8000b08:	4413      	add	r3, r2
 8000b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
			output = output > 1000 ? 1000 : output;
 8000b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b12:	bfa8      	it	ge
 8000b14:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 8000b18:	64fb      	str	r3, [r7, #76]	; 0x4c
			output = output <-1000 ?-1000 : output;
 8000b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b1c:	4a5b      	ldr	r2, [pc, #364]	; (8000c8c <main+0x474>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	bfb8      	it	lt
 8000b22:	4613      	movlt	r3, r2
 8000b24:	64fb      	str	r3, [r7, #76]	; 0x4c

			target_current = output;
 8000b26:	4a5a      	ldr	r2, [pc, #360]	; (8000c90 <main+0x478>)
 8000b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b2a:	6013      	str	r3, [r2, #0]
		}

		static uint32_t position_loop = 100;
		if(position_loop < HAL_GetTick())
 8000b2c:	f000 fe48 	bl	80017c0 <HAL_GetTick>
 8000b30:	4602      	mov	r2, r0
 8000b32:	4b58      	ldr	r3, [pc, #352]	; (8000c94 <main+0x47c>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d944      	bls.n	8000bc4 <main+0x3ac>
		{
			position_loop = HAL_GetTick() + 20;
 8000b3a:	f000 fe41 	bl	80017c0 <HAL_GetTick>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	3314      	adds	r3, #20
 8000b42:	4a54      	ldr	r2, [pc, #336]	; (8000c94 <main+0x47c>)
 8000b44:	6013      	str	r3, [r2, #0]

			// PI controller
			int32_t error = target_position - position;
 8000b46:	4b54      	ldr	r3, [pc, #336]	; (8000c98 <main+0x480>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	4b49      	ldr	r3, [pc, #292]	; (8000c70 <main+0x458>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	1ad3      	subs	r3, r2, r3
 8000b50:	64bb      	str	r3, [r7, #72]	; 0x48

			int32_t proportional = error * 400;
 8000b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b54:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000b58:	fb02 f303 	mul.w	r3, r2, r3
 8000b5c:	647b      	str	r3, [r7, #68]	; 0x44

			static int32_t integral = 0;
			integral += error * 0;
 8000b5e:	4b4f      	ldr	r3, [pc, #316]	; (8000c9c <main+0x484>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a4e      	ldr	r2, [pc, #312]	; (8000c9c <main+0x484>)
 8000b64:	6013      	str	r3, [r2, #0]
			integral = integral > 307200 ? 307200 : integral;
 8000b66:	4b4d      	ldr	r3, [pc, #308]	; (8000c9c <main+0x484>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f5b3 2f96 	cmp.w	r3, #307200	; 0x4b000
 8000b6e:	bfa8      	it	ge
 8000b70:	f44f 2396 	movge.w	r3, #307200	; 0x4b000
 8000b74:	4a49      	ldr	r2, [pc, #292]	; (8000c9c <main+0x484>)
 8000b76:	6013      	str	r3, [r2, #0]
			integral = integral <-307200 ?-307200 : integral;
 8000b78:	4b48      	ldr	r3, [pc, #288]	; (8000c9c <main+0x484>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a48      	ldr	r2, [pc, #288]	; (8000ca0 <main+0x488>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	bfb8      	it	lt
 8000b82:	4613      	movlt	r3, r2
 8000b84:	4a45      	ldr	r2, [pc, #276]	; (8000c9c <main+0x484>)
 8000b86:	6013      	str	r3, [r2, #0]

			int32_t output = proportional / 256 + integral / 256;
 8000b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	da00      	bge.n	8000b90 <main+0x378>
 8000b8e:	33ff      	adds	r3, #255	; 0xff
 8000b90:	121b      	asrs	r3, r3, #8
 8000b92:	461a      	mov	r2, r3
 8000b94:	4b41      	ldr	r3, [pc, #260]	; (8000c9c <main+0x484>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	da00      	bge.n	8000b9e <main+0x386>
 8000b9c:	33ff      	adds	r3, #255	; 0xff
 8000b9e:	121b      	asrs	r3, r3, #8
 8000ba0:	4413      	add	r3, r2
 8000ba2:	643b      	str	r3, [r7, #64]	; 0x40
			output = output > 1200 ? 1200 : output;
 8000ba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ba6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8000baa:	bfa8      	it	ge
 8000bac:	f44f 6396 	movge.w	r3, #1200	; 0x4b0
 8000bb0:	643b      	str	r3, [r7, #64]	; 0x40
			output = output <-1200 ?-1200 : output;
 8000bb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000bb4:	4a3b      	ldr	r2, [pc, #236]	; (8000ca4 <main+0x48c>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	bfb8      	it	lt
 8000bba:	4613      	movlt	r3, r2
 8000bbc:	643b      	str	r3, [r7, #64]	; 0x40

			target_velocity = output;
 8000bbe:	4a30      	ldr	r2, [pc, #192]	; (8000c80 <main+0x468>)
 8000bc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000bc2:	6013      	str	r3, [r2, #0]
		}

		// debug code
		static uint32_t debug = 100;
		if(debug < HAL_GetTick())
 8000bc4:	f000 fdfc 	bl	80017c0 <HAL_GetTick>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	4b37      	ldr	r3, [pc, #220]	; (8000ca8 <main+0x490>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d91c      	bls.n	8000c0c <main+0x3f4>
		{
			debug = HAL_GetTick() + 20;
 8000bd2:	f000 fdf5 	bl	80017c0 <HAL_GetTick>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	3314      	adds	r3, #20
 8000bda:	4a33      	ldr	r2, [pc, #204]	; (8000ca8 <main+0x490>)
 8000bdc:	6013      	str	r3, [r2, #0]

			char tx_buffer[32];
			sprintf(tx_buffer, "%ld, %ld, %ld\n", current, velocity, position);
 8000bde:	4b33      	ldr	r3, [pc, #204]	; (8000cac <main+0x494>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	4b21      	ldr	r3, [pc, #132]	; (8000c68 <main+0x450>)
 8000be4:	6819      	ldr	r1, [r3, #0]
 8000be6:	4b22      	ldr	r3, [pc, #136]	; (8000c70 <main+0x458>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4638      	mov	r0, r7
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	460b      	mov	r3, r1
 8000bf0:	492f      	ldr	r1, [pc, #188]	; (8000cb0 <main+0x498>)
 8000bf2:	f006 fe1f 	bl	8007834 <siprintf>
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)tx_buffer, strlen(tx_buffer));
 8000bf6:	463b      	mov	r3, r7
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff fae9 	bl	80001d0 <strlen>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	b29a      	uxth	r2, r3
 8000c02:	463b      	mov	r3, r7
 8000c04:	4619      	mov	r1, r3
 8000c06:	482b      	ldr	r0, [pc, #172]	; (8000cb4 <main+0x49c>)
 8000c08:	f005 fa7e 	bl	8006108 <HAL_UART_Transmit_IT>
		}

		// switch code
		static uint32_t switch_loop = 100;
		if(switch_loop < HAL_GetTick())
 8000c0c:	f000 fdd8 	bl	80017c0 <HAL_GetTick>
 8000c10:	4602      	mov	r2, r0
 8000c12:	4b29      	ldr	r3, [pc, #164]	; (8000cb8 <main+0x4a0>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	f67f ae63 	bls.w	80008e2 <main+0xca>
		{
			switch_loop = HAL_GetTick() + 50;
 8000c1c:	f000 fdd0 	bl	80017c0 <HAL_GetTick>
 8000c20:	4603      	mov	r3, r0
 8000c22:	3332      	adds	r3, #50	; 0x32
 8000c24:	4a24      	ldr	r2, [pc, #144]	; (8000cb8 <main+0x4a0>)
 8000c26:	6013      	str	r3, [r2, #0]
			target_position = 600 * sinf((float)HAL_GetTick() / 4000.0f);
 8000c28:	f000 fdca 	bl	80017c0 <HAL_GetTick>
 8000c2c:	ee07 0a90 	vmov	s15, r0
 8000c30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c34:	eddf 6a21 	vldr	s13, [pc, #132]	; 8000cbc <main+0x4a4>
 8000c38:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000c3c:	eeb0 0a47 	vmov.f32	s0, s14
 8000c40:	f007 fa66 	bl	8008110 <sinf>
 8000c44:	eef0 7a40 	vmov.f32	s15, s0
 8000c48:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8000cc0 <main+0x4a8>
 8000c4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c54:	ee17 2a90 	vmov	r2, s15
 8000c58:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <main+0x480>)
 8000c5a:	601a      	str	r2, [r3, #0]
	{
 8000c5c:	e641      	b.n	80008e2 <main+0xca>
 8000c5e:	bf00      	nop
 8000c60:	20000270 	.word	0x20000270
 8000c64:	20000000 	.word	0x20000000
 8000c68:	20000278 	.word	0x20000278
 8000c6c:	2000000c 	.word	0x2000000c
 8000c70:	20000274 	.word	0x20000274
 8000c74:	200002b0 	.word	0x200002b0
 8000c78:	01312d00 	.word	0x01312d00
 8000c7c:	20000288 	.word	0x20000288
 8000c80:	20000004 	.word	0x20000004
 8000c84:	200002b4 	.word	0x200002b4
 8000c88:	fffc1800 	.word	0xfffc1800
 8000c8c:	fffffc18 	.word	0xfffffc18
 8000c90:	20000284 	.word	0x20000284
 8000c94:	20000010 	.word	0x20000010
 8000c98:	20000280 	.word	0x20000280
 8000c9c:	200002b8 	.word	0x200002b8
 8000ca0:	fffb5000 	.word	0xfffb5000
 8000ca4:	fffffb50 	.word	0xfffffb50
 8000ca8:	20000014 	.word	0x20000014
 8000cac:	2000027c 	.word	0x2000027c
 8000cb0:	08008c0c 	.word	0x08008c0c
 8000cb4:	200001ec 	.word	0x200001ec
 8000cb8:	20000018 	.word	0x20000018
 8000cbc:	457a0000 	.word	0x457a0000
 8000cc0:	44160000 	.word	0x44160000

08000cc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b096      	sub	sp, #88	; 0x58
 8000cc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	2244      	movs	r2, #68	; 0x44
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f006 fda6 	bl	8007824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd8:	463b      	mov	r3, r7
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
 8000ce4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ce6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000cea:	f002 fd71 	bl	80037d0 <HAL_PWREx_ControlVoltageScaling>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000cf4:	f000 fa68 	bl	80011c8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d00:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d02:	2310      	movs	r3, #16
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d06:	2302      	movs	r3, #2
 8000d08:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000d12:	2314      	movs	r3, #20
 8000d14:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d16:	2307      	movs	r3, #7
 8000d18:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4618      	mov	r0, r3
 8000d28:	f002 fda8 	bl	800387c <HAL_RCC_OscConfig>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000d32:	f000 fa49 	bl	80011c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d36:	230f      	movs	r3, #15
 8000d38:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	2104      	movs	r1, #4
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f003 f9a8 	bl	80040a4 <HAL_RCC_ClockConfig>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d5a:	f000 fa35 	bl	80011c8 <Error_Handler>
  }
}
 8000d5e:	bf00      	nop
 8000d60:	3758      	adds	r7, #88	; 0x58
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d6e:	463b      	mov	r3, r7
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
 8000d7c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d7e:	4b30      	ldr	r3, [pc, #192]	; (8000e40 <MX_ADC1_Init+0xd8>)
 8000d80:	4a30      	ldr	r2, [pc, #192]	; (8000e44 <MX_ADC1_Init+0xdc>)
 8000d82:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8000d84:	4b2e      	ldr	r3, [pc, #184]	; (8000e40 <MX_ADC1_Init+0xd8>)
 8000d86:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000d8a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d8c:	4b2c      	ldr	r3, [pc, #176]	; (8000e40 <MX_ADC1_Init+0xd8>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d92:	4b2b      	ldr	r3, [pc, #172]	; (8000e40 <MX_ADC1_Init+0xd8>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d98:	4b29      	ldr	r3, [pc, #164]	; (8000e40 <MX_ADC1_Init+0xd8>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000d9e:	4b28      	ldr	r3, [pc, #160]	; (8000e40 <MX_ADC1_Init+0xd8>)
 8000da0:	2208      	movs	r2, #8
 8000da2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000da4:	4b26      	ldr	r3, [pc, #152]	; (8000e40 <MX_ADC1_Init+0xd8>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000daa:	4b25      	ldr	r3, [pc, #148]	; (8000e40 <MX_ADC1_Init+0xd8>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000db0:	4b23      	ldr	r3, [pc, #140]	; (8000e40 <MX_ADC1_Init+0xd8>)
 8000db2:	2202      	movs	r2, #2
 8000db4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000db6:	4b22      	ldr	r3, [pc, #136]	; (8000e40 <MX_ADC1_Init+0xd8>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dbe:	4b20      	ldr	r3, [pc, #128]	; (8000e40 <MX_ADC1_Init+0xd8>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dc4:	4b1e      	ldr	r3, [pc, #120]	; (8000e40 <MX_ADC1_Init+0xd8>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dca:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <MX_ADC1_Init+0xd8>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dd2:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <MX_ADC1_Init+0xd8>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000dd8:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <MX_ADC1_Init+0xd8>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000de0:	4817      	ldr	r0, [pc, #92]	; (8000e40 <MX_ADC1_Init+0xd8>)
 8000de2:	f000 fed3 	bl	8001b8c <HAL_ADC_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000dec:	f000 f9ec 	bl	80011c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000df0:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <MX_ADC1_Init+0xe0>)
 8000df2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000df4:	2306      	movs	r3, #6
 8000df6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dfc:	237f      	movs	r3, #127	; 0x7f
 8000dfe:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e00:	2304      	movs	r3, #4
 8000e02:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e08:	463b      	mov	r3, r7
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	480c      	ldr	r0, [pc, #48]	; (8000e40 <MX_ADC1_Init+0xd8>)
 8000e0e:	f001 fa5b 	bl	80022c8 <HAL_ADC_ConfigChannel>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000e18:	f000 f9d6 	bl	80011c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <MX_ADC1_Init+0xe4>)
 8000e1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e20:	230c      	movs	r3, #12
 8000e22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e24:	463b      	mov	r3, r7
 8000e26:	4619      	mov	r1, r3
 8000e28:	4805      	ldr	r0, [pc, #20]	; (8000e40 <MX_ADC1_Init+0xd8>)
 8000e2a:	f001 fa4d 	bl	80022c8 <HAL_ADC_ConfigChannel>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8000e34:	f000 f9c8 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e38:	bf00      	nop
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	200000a8 	.word	0x200000a8
 8000e44:	50040000 	.word	0x50040000
 8000e48:	14f00020 	.word	0x14f00020
 8000e4c:	25b00200 	.word	0x25b00200

08000e50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b096      	sub	sp, #88	; 0x58
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e56:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]
 8000e70:	611a      	str	r2, [r3, #16]
 8000e72:	615a      	str	r2, [r3, #20]
 8000e74:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	222c      	movs	r2, #44	; 0x2c
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f006 fcd1 	bl	8007824 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e82:	4b45      	ldr	r3, [pc, #276]	; (8000f98 <MX_TIM1_Init+0x148>)
 8000e84:	4a45      	ldr	r2, [pc, #276]	; (8000f9c <MX_TIM1_Init+0x14c>)
 8000e86:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8000e88:	4b43      	ldr	r3, [pc, #268]	; (8000f98 <MX_TIM1_Init+0x148>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8e:	4b42      	ldr	r3, [pc, #264]	; (8000f98 <MX_TIM1_Init+0x148>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 8000e94:	4b40      	ldr	r3, [pc, #256]	; (8000f98 <MX_TIM1_Init+0x148>)
 8000e96:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000e9a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9c:	4b3e      	ldr	r3, [pc, #248]	; (8000f98 <MX_TIM1_Init+0x148>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ea2:	4b3d      	ldr	r3, [pc, #244]	; (8000f98 <MX_TIM1_Init+0x148>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea8:	4b3b      	ldr	r3, [pc, #236]	; (8000f98 <MX_TIM1_Init+0x148>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000eae:	483a      	ldr	r0, [pc, #232]	; (8000f98 <MX_TIM1_Init+0x148>)
 8000eb0:	f003 ff1e 	bl	8004cf0 <HAL_TIM_PWM_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000eba:	f000 f985 	bl	80011c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000eca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4831      	ldr	r0, [pc, #196]	; (8000f98 <MX_TIM1_Init+0x148>)
 8000ed2:	f004 ffa9 	bl	8005e28 <HAL_TIMEx_MasterConfigSynchronization>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000edc:	f000 f974 	bl	80011c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ee0:	2360      	movs	r3, #96	; 0x60
 8000ee2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000eec:	2300      	movs	r3, #0
 8000eee:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000efc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f00:	2200      	movs	r2, #0
 8000f02:	4619      	mov	r1, r3
 8000f04:	4824      	ldr	r0, [pc, #144]	; (8000f98 <MX_TIM1_Init+0x148>)
 8000f06:	f004 f949 	bl	800519c <HAL_TIM_PWM_ConfigChannel>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000f10:	f000 f95a 	bl	80011c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f18:	2204      	movs	r2, #4
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	481e      	ldr	r0, [pc, #120]	; (8000f98 <MX_TIM1_Init+0x148>)
 8000f1e:	f004 f93d 	bl	800519c <HAL_TIM_PWM_ConfigChannel>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000f28:	f000 f94e 	bl	80011c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f30:	2208      	movs	r2, #8
 8000f32:	4619      	mov	r1, r3
 8000f34:	4818      	ldr	r0, [pc, #96]	; (8000f98 <MX_TIM1_Init+0x148>)
 8000f36:	f004 f931 	bl	800519c <HAL_TIM_PWM_ConfigChannel>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000f40:	f000 f942 	bl	80011c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f44:	2300      	movs	r3, #0
 8000f46:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f5c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f62:	2300      	movs	r3, #0
 8000f64:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f70:	2300      	movs	r3, #0
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	4619      	mov	r1, r3
 8000f78:	4807      	ldr	r0, [pc, #28]	; (8000f98 <MX_TIM1_Init+0x148>)
 8000f7a:	f004 ffbb 	bl	8005ef4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8000f84:	f000 f920 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f88:	4803      	ldr	r0, [pc, #12]	; (8000f98 <MX_TIM1_Init+0x148>)
 8000f8a:	f000 fa27 	bl	80013dc <HAL_TIM_MspPostInit>

}
 8000f8e:	bf00      	nop
 8000f90:	3758      	adds	r7, #88	; 0x58
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000154 	.word	0x20000154
 8000f9c:	40012c00 	.word	0x40012c00

08000fa0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fa6:	f107 0310 	add.w	r3, r7, #16
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fbe:	4b1e      	ldr	r3, [pc, #120]	; (8001038 <MX_TIM2_Init+0x98>)
 8000fc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fc4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4-1;
 8000fc6:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <MX_TIM2_Init+0x98>)
 8000fc8:	2203      	movs	r2, #3
 8000fca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fcc:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <MX_TIM2_Init+0x98>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967296-1;
 8000fd2:	4b19      	ldr	r3, [pc, #100]	; (8001038 <MX_TIM2_Init+0x98>)
 8000fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fda:	4b17      	ldr	r3, [pc, #92]	; (8001038 <MX_TIM2_Init+0x98>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe0:	4b15      	ldr	r3, [pc, #84]	; (8001038 <MX_TIM2_Init+0x98>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fe6:	4814      	ldr	r0, [pc, #80]	; (8001038 <MX_TIM2_Init+0x98>)
 8000fe8:	f003 fd8a 	bl	8004b00 <HAL_TIM_Base_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000ff2:	f000 f8e9 	bl	80011c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ff6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ffa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ffc:	f107 0310 	add.w	r3, r7, #16
 8001000:	4619      	mov	r1, r3
 8001002:	480d      	ldr	r0, [pc, #52]	; (8001038 <MX_TIM2_Init+0x98>)
 8001004:	f004 f9de 	bl	80053c4 <HAL_TIM_ConfigClockSource>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800100e:	f000 f8db 	bl	80011c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001012:	2300      	movs	r3, #0
 8001014:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	4619      	mov	r1, r3
 800101e:	4806      	ldr	r0, [pc, #24]	; (8001038 <MX_TIM2_Init+0x98>)
 8001020:	f004 ff02 	bl	8005e28 <HAL_TIMEx_MasterConfigSynchronization>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800102a:	f000 f8cd 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	3720      	adds	r7, #32
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200001a0 	.word	0x200001a0

0800103c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001040:	4b14      	ldr	r3, [pc, #80]	; (8001094 <MX_USART2_UART_Init+0x58>)
 8001042:	4a15      	ldr	r2, [pc, #84]	; (8001098 <MX_USART2_UART_Init+0x5c>)
 8001044:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001046:	4b13      	ldr	r3, [pc, #76]	; (8001094 <MX_USART2_UART_Init+0x58>)
 8001048:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800104c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <MX_USART2_UART_Init+0x58>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001054:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <MX_USART2_UART_Init+0x58>)
 8001056:	2200      	movs	r2, #0
 8001058:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <MX_USART2_UART_Init+0x58>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <MX_USART2_UART_Init+0x58>)
 8001062:	220c      	movs	r2, #12
 8001064:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001066:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <MX_USART2_UART_Init+0x58>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800106c:	4b09      	ldr	r3, [pc, #36]	; (8001094 <MX_USART2_UART_Init+0x58>)
 800106e:	2200      	movs	r2, #0
 8001070:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001072:	4b08      	ldr	r3, [pc, #32]	; (8001094 <MX_USART2_UART_Init+0x58>)
 8001074:	2200      	movs	r2, #0
 8001076:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <MX_USART2_UART_Init+0x58>)
 800107a:	2200      	movs	r2, #0
 800107c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800107e:	4805      	ldr	r0, [pc, #20]	; (8001094 <MX_USART2_UART_Init+0x58>)
 8001080:	f004 fff3 	bl	800606a <HAL_UART_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800108a:	f000 f89d 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200001ec 	.word	0x200001ec
 8001098:	40004400 	.word	0x40004400

0800109c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_DMA_Init+0x38>)
 80010a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010a6:	4a0b      	ldr	r2, [pc, #44]	; (80010d4 <MX_DMA_Init+0x38>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6493      	str	r3, [r2, #72]	; 0x48
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_DMA_Init+0x38>)
 80010b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2100      	movs	r1, #0
 80010be:	200b      	movs	r0, #11
 80010c0:	f001 ff09 	bl	8002ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010c4:	200b      	movs	r0, #11
 80010c6:	f001 ff22 	bl	8002f0e <HAL_NVIC_EnableIRQ>

}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40021000 	.word	0x40021000

080010d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
 80010ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	4b34      	ldr	r3, [pc, #208]	; (80011c0 <MX_GPIO_Init+0xe8>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	4a33      	ldr	r2, [pc, #204]	; (80011c0 <MX_GPIO_Init+0xe8>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fa:	4b31      	ldr	r3, [pc, #196]	; (80011c0 <MX_GPIO_Init+0xe8>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001106:	4b2e      	ldr	r3, [pc, #184]	; (80011c0 <MX_GPIO_Init+0xe8>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	4a2d      	ldr	r2, [pc, #180]	; (80011c0 <MX_GPIO_Init+0xe8>)
 800110c:	f043 0302 	orr.w	r3, r3, #2
 8001110:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001112:	4b2b      	ldr	r3, [pc, #172]	; (80011c0 <MX_GPIO_Init+0xe8>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLDC_NSTDBY_GPIO_Port, BLDC_NSTDBY_Pin, GPIO_PIN_SET);
 800111e:	2201      	movs	r2, #1
 8001120:	2140      	movs	r1, #64	; 0x40
 8001122:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001126:	f002 fb15 	bl	8003754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin|LED0_Pin, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	21e0      	movs	r1, #224	; 0xe0
 800112e:	4825      	ldr	r0, [pc, #148]	; (80011c4 <MX_GPIO_Init+0xec>)
 8001130:	f002 fb10 	bl	8003754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLDC_DIAG_Pin */
  GPIO_InitStruct.Pin = BLDC_DIAG_Pin;
 8001134:	2320      	movs	r3, #32
 8001136:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001138:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800113c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLDC_DIAG_GPIO_Port, &GPIO_InitStruct);
 8001142:	f107 030c 	add.w	r3, r7, #12
 8001146:	4619      	mov	r1, r3
 8001148:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114c:	f002 f970 	bl	8003430 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLDC_NSTDBY_Pin */
  GPIO_InitStruct.Pin = BLDC_NSTDBY_Pin;
 8001150:	2340      	movs	r3, #64	; 0x40
 8001152:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001154:	2301      	movs	r3, #1
 8001156:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BLDC_NSTDBY_GPIO_Port, &GPIO_InitStruct);
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	4619      	mov	r1, r3
 8001166:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116a:	f002 f961 	bl	8003430 <HAL_GPIO_Init>

  /*Configure GPIO pins : HAL_C_Pin HAL_B_Pin HAL_A_Pin */
  GPIO_InitStruct.Pin = HAL_C_Pin|HAL_B_Pin|HAL_A_Pin;
 800116e:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 8001172:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001174:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001178:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117e:	f107 030c 	add.w	r3, r7, #12
 8001182:	4619      	mov	r1, r3
 8001184:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001188:	f002 f952 	bl	8003430 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin LED0_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|LED0_Pin;
 800118c:	23e0      	movs	r3, #224	; 0xe0
 800118e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001190:	2301      	movs	r3, #1
 8001192:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001198:	2300      	movs	r3, #0
 800119a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	4619      	mov	r1, r3
 80011a2:	4808      	ldr	r0, [pc, #32]	; (80011c4 <MX_GPIO_Init+0xec>)
 80011a4:	f002 f944 	bl	8003430 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2100      	movs	r1, #0
 80011ac:	2028      	movs	r0, #40	; 0x28
 80011ae:	f001 fe92 	bl	8002ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011b2:	2028      	movs	r0, #40	; 0x28
 80011b4:	f001 feab 	bl	8002f0e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011b8:	bf00      	nop
 80011ba:	3720      	adds	r7, #32
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40021000 	.word	0x40021000
 80011c4:	48000400 	.word	0x48000400

080011c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011cc:	b672      	cpsid	i
}
 80011ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80011d0:	e7fe      	b.n	80011d0 <Error_Handler+0x8>
	...

080011d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011da:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <HAL_MspInit+0x44>)
 80011dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011de:	4a0e      	ldr	r2, [pc, #56]	; (8001218 <HAL_MspInit+0x44>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6613      	str	r3, [r2, #96]	; 0x60
 80011e6:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <HAL_MspInit+0x44>)
 80011e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <HAL_MspInit+0x44>)
 80011f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f6:	4a08      	ldr	r2, [pc, #32]	; (8001218 <HAL_MspInit+0x44>)
 80011f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011fc:	6593      	str	r3, [r2, #88]	; 0x58
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_MspInit+0x44>)
 8001200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40021000 	.word	0x40021000

0800121c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b0a0      	sub	sp, #128	; 0x80
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001234:	f107 0310 	add.w	r3, r7, #16
 8001238:	225c      	movs	r2, #92	; 0x5c
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f006 faf1 	bl	8007824 <memset>
  if(hadc->Instance==ADC1)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a3f      	ldr	r2, [pc, #252]	; (8001344 <HAL_ADC_MspInit+0x128>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d176      	bne.n	800133a <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800124c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001250:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001252:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001256:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001258:	2302      	movs	r3, #2
 800125a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 800125c:	2302      	movs	r3, #2
 800125e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001260:	2310      	movs	r3, #16
 8001262:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001264:	2307      	movs	r3, #7
 8001266:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001268:	2302      	movs	r3, #2
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800126c:	2302      	movs	r3, #2
 800126e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001270:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001274:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001276:	f107 0310 	add.w	r3, r7, #16
 800127a:	4618      	mov	r0, r3
 800127c:	f003 f936 	bl	80044ec <HAL_RCCEx_PeriphCLKConfig>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001286:	f7ff ff9f 	bl	80011c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800128a:	4b2f      	ldr	r3, [pc, #188]	; (8001348 <HAL_ADC_MspInit+0x12c>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	4a2e      	ldr	r2, [pc, #184]	; (8001348 <HAL_ADC_MspInit+0x12c>)
 8001290:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001294:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001296:	4b2c      	ldr	r3, [pc, #176]	; (8001348 <HAL_ADC_MspInit+0x12c>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	4b29      	ldr	r3, [pc, #164]	; (8001348 <HAL_ADC_MspInit+0x12c>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	4a28      	ldr	r2, [pc, #160]	; (8001348 <HAL_ADC_MspInit+0x12c>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ae:	4b26      	ldr	r3, [pc, #152]	; (8001348 <HAL_ADC_MspInit+0x12c>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = VS_ADC_Pin|BLDC_ISENSE_Pin;
 80012ba:	2311      	movs	r3, #17
 80012bc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80012be:	230b      	movs	r3, #11
 80012c0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012ca:	4619      	mov	r1, r3
 80012cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d0:	f002 f8ae 	bl	8003430 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012d4:	4b1d      	ldr	r3, [pc, #116]	; (800134c <HAL_ADC_MspInit+0x130>)
 80012d6:	4a1e      	ldr	r2, [pc, #120]	; (8001350 <HAL_ADC_MspInit+0x134>)
 80012d8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80012da:	4b1c      	ldr	r3, [pc, #112]	; (800134c <HAL_ADC_MspInit+0x130>)
 80012dc:	2200      	movs	r2, #0
 80012de:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012e0:	4b1a      	ldr	r3, [pc, #104]	; (800134c <HAL_ADC_MspInit+0x130>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012e6:	4b19      	ldr	r3, [pc, #100]	; (800134c <HAL_ADC_MspInit+0x130>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012ec:	4b17      	ldr	r3, [pc, #92]	; (800134c <HAL_ADC_MspInit+0x130>)
 80012ee:	2280      	movs	r2, #128	; 0x80
 80012f0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012f2:	4b16      	ldr	r3, [pc, #88]	; (800134c <HAL_ADC_MspInit+0x130>)
 80012f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012f8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80012fa:	4b14      	ldr	r3, [pc, #80]	; (800134c <HAL_ADC_MspInit+0x130>)
 80012fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001300:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001302:	4b12      	ldr	r3, [pc, #72]	; (800134c <HAL_ADC_MspInit+0x130>)
 8001304:	2220      	movs	r2, #32
 8001306:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001308:	4b10      	ldr	r3, [pc, #64]	; (800134c <HAL_ADC_MspInit+0x130>)
 800130a:	2200      	movs	r2, #0
 800130c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800130e:	480f      	ldr	r0, [pc, #60]	; (800134c <HAL_ADC_MspInit+0x130>)
 8001310:	f001 fe18 	bl	8002f44 <HAL_DMA_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 800131a:	f7ff ff55 	bl	80011c8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a0a      	ldr	r2, [pc, #40]	; (800134c <HAL_ADC_MspInit+0x130>)
 8001322:	64da      	str	r2, [r3, #76]	; 0x4c
 8001324:	4a09      	ldr	r2, [pc, #36]	; (800134c <HAL_ADC_MspInit+0x130>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2100      	movs	r1, #0
 800132e:	2012      	movs	r0, #18
 8001330:	f001 fdd1 	bl	8002ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001334:	2012      	movs	r0, #18
 8001336:	f001 fdea 	bl	8002f0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800133a:	bf00      	nop
 800133c:	3780      	adds	r7, #128	; 0x80
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	50040000 	.word	0x50040000
 8001348:	40021000 	.word	0x40021000
 800134c:	2000010c 	.word	0x2000010c
 8001350:	40020008 	.word	0x40020008

08001354 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a0a      	ldr	r2, [pc, #40]	; (800138c <HAL_TIM_PWM_MspInit+0x38>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d10b      	bne.n	800137e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001366:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <HAL_TIM_PWM_MspInit+0x3c>)
 8001368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800136a:	4a09      	ldr	r2, [pc, #36]	; (8001390 <HAL_TIM_PWM_MspInit+0x3c>)
 800136c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001370:	6613      	str	r3, [r2, #96]	; 0x60
 8001372:	4b07      	ldr	r3, [pc, #28]	; (8001390 <HAL_TIM_PWM_MspInit+0x3c>)
 8001374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001376:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800137e:	bf00      	nop
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40012c00 	.word	0x40012c00
 8001390:	40021000 	.word	0x40021000

08001394 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013a4:	d113      	bne.n	80013ce <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013a6:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <HAL_TIM_Base_MspInit+0x44>)
 80013a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013aa:	4a0b      	ldr	r2, [pc, #44]	; (80013d8 <HAL_TIM_Base_MspInit+0x44>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6593      	str	r3, [r2, #88]	; 0x58
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <HAL_TIM_Base_MspInit+0x44>)
 80013b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	2100      	movs	r1, #0
 80013c2:	201c      	movs	r0, #28
 80013c4:	f001 fd87 	bl	8002ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013c8:	201c      	movs	r0, #28
 80013ca:	f001 fda0 	bl	8002f0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013ce:	bf00      	nop
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40021000 	.word	0x40021000

080013dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	; 0x28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a20      	ldr	r2, [pc, #128]	; (800147c <HAL_TIM_MspPostInit+0xa0>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d139      	bne.n	8001472 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fe:	4b20      	ldr	r3, [pc, #128]	; (8001480 <HAL_TIM_MspPostInit+0xa4>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001402:	4a1f      	ldr	r2, [pc, #124]	; (8001480 <HAL_TIM_MspPostInit+0xa4>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140a:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <HAL_TIM_MspPostInit+0xa4>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001416:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <HAL_TIM_MspPostInit+0xa4>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141a:	4a19      	ldr	r2, [pc, #100]	; (8001480 <HAL_TIM_MspPostInit+0xa4>)
 800141c:	f043 0302 	orr.w	r3, r3, #2
 8001420:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001422:	4b17      	ldr	r3, [pc, #92]	; (8001480 <HAL_TIM_MspPostInit+0xa4>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = BLDC_WL_Pin|BLDC_WH_Pin|BLDC_VH_Pin|BLDC_UH_Pin;
 800142e:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001434:	2302      	movs	r3, #2
 8001436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143c:	2300      	movs	r3, #0
 800143e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001440:	2301      	movs	r3, #1
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	4619      	mov	r1, r3
 800144a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800144e:	f001 ffef 	bl	8003430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BLDC_VL_Pin|BLDC_UL_Pin;
 8001452:	2303      	movs	r3, #3
 8001454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001456:	2302      	movs	r3, #2
 8001458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145e:	2300      	movs	r3, #0
 8001460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001462:	2301      	movs	r3, #1
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	4619      	mov	r1, r3
 800146c:	4805      	ldr	r0, [pc, #20]	; (8001484 <HAL_TIM_MspPostInit+0xa8>)
 800146e:	f001 ffdf 	bl	8003430 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001472:	bf00      	nop
 8001474:	3728      	adds	r7, #40	; 0x28
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40012c00 	.word	0x40012c00
 8001480:	40021000 	.word	0x40021000
 8001484:	48000400 	.word	0x48000400

08001488 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b0a0      	sub	sp, #128	; 0x80
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014a0:	f107 0310 	add.w	r3, r7, #16
 80014a4:	225c      	movs	r2, #92	; 0x5c
 80014a6:	2100      	movs	r1, #0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f006 f9bb 	bl	8007824 <memset>
  if(huart->Instance==USART2)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a23      	ldr	r2, [pc, #140]	; (8001540 <HAL_UART_MspInit+0xb8>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d13e      	bne.n	8001536 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014b8:	2302      	movs	r3, #2
 80014ba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014bc:	2300      	movs	r3, #0
 80014be:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014c0:	f107 0310 	add.w	r3, r7, #16
 80014c4:	4618      	mov	r0, r3
 80014c6:	f003 f811 	bl	80044ec <HAL_RCCEx_PeriphCLKConfig>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014d0:	f7ff fe7a 	bl	80011c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014d4:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <HAL_UART_MspInit+0xbc>)
 80014d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d8:	4a1a      	ldr	r2, [pc, #104]	; (8001544 <HAL_UART_MspInit+0xbc>)
 80014da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014de:	6593      	str	r3, [r2, #88]	; 0x58
 80014e0:	4b18      	ldr	r3, [pc, #96]	; (8001544 <HAL_UART_MspInit+0xbc>)
 80014e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ec:	4b15      	ldr	r3, [pc, #84]	; (8001544 <HAL_UART_MspInit+0xbc>)
 80014ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f0:	4a14      	ldr	r2, [pc, #80]	; (8001544 <HAL_UART_MspInit+0xbc>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <HAL_UART_MspInit+0xbc>)
 80014fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = COMMAND_TX_Pin|COMMAND_RX_Pin;
 8001504:	230c      	movs	r3, #12
 8001506:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	2302      	movs	r3, #2
 800150a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001510:	2301      	movs	r3, #1
 8001512:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001514:	2307      	movs	r3, #7
 8001516:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001518:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800151c:	4619      	mov	r1, r3
 800151e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001522:	f001 ff85 	bl	8003430 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	2026      	movs	r0, #38	; 0x26
 800152c:	f001 fcd3 	bl	8002ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001530:	2026      	movs	r0, #38	; 0x26
 8001532:	f001 fcec 	bl	8002f0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001536:	bf00      	nop
 8001538:	3780      	adds	r7, #128	; 0x80
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40004400 	.word	0x40004400
 8001544:	40021000 	.word	0x40021000

08001548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800154c:	e7fe      	b.n	800154c <NMI_Handler+0x4>

0800154e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001552:	e7fe      	b.n	8001552 <HardFault_Handler+0x4>

08001554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <MemManage_Handler+0x4>

0800155a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800155e:	e7fe      	b.n	800155e <BusFault_Handler+0x4>

08001560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <UsageFault_Handler+0x4>

08001566 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001594:	f000 f900 	bl	8001798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}

0800159c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015a0:	4802      	ldr	r0, [pc, #8]	; (80015ac <DMA1_Channel1_IRQHandler+0x10>)
 80015a2:	f001 fe66 	bl	8003272 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	2000010c 	.word	0x2000010c

080015b0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80015b4:	4802      	ldr	r0, [pc, #8]	; (80015c0 <ADC1_IRQHandler+0x10>)
 80015b6:	f000 fcb5 	bl	8001f24 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	200000a8 	.word	0x200000a8

080015c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015c8:	4802      	ldr	r0, [pc, #8]	; (80015d4 <TIM2_IRQHandler+0x10>)
 80015ca:	f003 fcc7 	bl	8004f5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	200001a0 	.word	0x200001a0

080015d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015dc:	4802      	ldr	r0, [pc, #8]	; (80015e8 <USART2_IRQHandler+0x10>)
 80015de:	f004 fe57 	bl	8006290 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	200001ec 	.word	0x200001ec

080015ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HAL_C_Pin);
 80015f0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80015f4:	f002 f8c6 	bl	8003784 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HAL_B_Pin);
 80015f8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80015fc:	f002 f8c2 	bl	8003784 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HAL_A_Pin);
 8001600:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001604:	f002 f8be 	bl	8003784 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}

0800160c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001614:	4a14      	ldr	r2, [pc, #80]	; (8001668 <_sbrk+0x5c>)
 8001616:	4b15      	ldr	r3, [pc, #84]	; (800166c <_sbrk+0x60>)
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001620:	4b13      	ldr	r3, [pc, #76]	; (8001670 <_sbrk+0x64>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d102      	bne.n	800162e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001628:	4b11      	ldr	r3, [pc, #68]	; (8001670 <_sbrk+0x64>)
 800162a:	4a12      	ldr	r2, [pc, #72]	; (8001674 <_sbrk+0x68>)
 800162c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800162e:	4b10      	ldr	r3, [pc, #64]	; (8001670 <_sbrk+0x64>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4413      	add	r3, r2
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	429a      	cmp	r2, r3
 800163a:	d207      	bcs.n	800164c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800163c:	f006 f8c8 	bl	80077d0 <__errno>
 8001640:	4603      	mov	r3, r0
 8001642:	220c      	movs	r2, #12
 8001644:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001646:	f04f 33ff 	mov.w	r3, #4294967295
 800164a:	e009      	b.n	8001660 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800164c:	4b08      	ldr	r3, [pc, #32]	; (8001670 <_sbrk+0x64>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001652:	4b07      	ldr	r3, [pc, #28]	; (8001670 <_sbrk+0x64>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	4a05      	ldr	r2, [pc, #20]	; (8001670 <_sbrk+0x64>)
 800165c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800165e:	68fb      	ldr	r3, [r7, #12]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20010000 	.word	0x20010000
 800166c:	00000400 	.word	0x00000400
 8001670:	200002bc 	.word	0x200002bc
 8001674:	200002d8 	.word	0x200002d8

08001678 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <SystemInit+0x20>)
 800167e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001682:	4a05      	ldr	r2, [pc, #20]	; (8001698 <SystemInit+0x20>)
 8001684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800169c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016a0:	f7ff ffea 	bl	8001678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016a4:	480c      	ldr	r0, [pc, #48]	; (80016d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80016a6:	490d      	ldr	r1, [pc, #52]	; (80016dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80016a8:	4a0d      	ldr	r2, [pc, #52]	; (80016e0 <LoopForever+0xe>)
  movs r3, #0
 80016aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016ac:	e002      	b.n	80016b4 <LoopCopyDataInit>

080016ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016b2:	3304      	adds	r3, #4

080016b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b8:	d3f9      	bcc.n	80016ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ba:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016bc:	4c0a      	ldr	r4, [pc, #40]	; (80016e8 <LoopForever+0x16>)
  movs r3, #0
 80016be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016c0:	e001      	b.n	80016c6 <LoopFillZerobss>

080016c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c4:	3204      	adds	r2, #4

080016c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c8:	d3fb      	bcc.n	80016c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ca:	f006 f887 	bl	80077dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016ce:	f7ff f8a3 	bl	8000818 <main>

080016d2 <LoopForever>:

LoopForever:
    b LoopForever
 80016d2:	e7fe      	b.n	80016d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016d4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80016d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016dc:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80016e0:	08009098 	.word	0x08009098
  ldr r2, =_sbss
 80016e4:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80016e8:	200002d4 	.word	0x200002d4

080016ec <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016ec:	e7fe      	b.n	80016ec <CAN1_RX0_IRQHandler>

080016ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016f4:	2300      	movs	r3, #0
 80016f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f8:	2003      	movs	r0, #3
 80016fa:	f001 fbe1 	bl	8002ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016fe:	200f      	movs	r0, #15
 8001700:	f000 f80e 	bl	8001720 <HAL_InitTick>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d002      	beq.n	8001710 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	71fb      	strb	r3, [r7, #7]
 800170e:	e001      	b.n	8001714 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001710:	f7ff fd60 	bl	80011d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001714:	79fb      	ldrb	r3, [r7, #7]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001728:	2300      	movs	r3, #0
 800172a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800172c:	4b17      	ldr	r3, [pc, #92]	; (800178c <HAL_InitTick+0x6c>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d023      	beq.n	800177c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001734:	4b16      	ldr	r3, [pc, #88]	; (8001790 <HAL_InitTick+0x70>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b14      	ldr	r3, [pc, #80]	; (800178c <HAL_InitTick+0x6c>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	4619      	mov	r1, r3
 800173e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001742:	fbb3 f3f1 	udiv	r3, r3, r1
 8001746:	fbb2 f3f3 	udiv	r3, r2, r3
 800174a:	4618      	mov	r0, r3
 800174c:	f001 fbed 	bl	8002f2a <HAL_SYSTICK_Config>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10f      	bne.n	8001776 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b0f      	cmp	r3, #15
 800175a:	d809      	bhi.n	8001770 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800175c:	2200      	movs	r2, #0
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	f04f 30ff 	mov.w	r0, #4294967295
 8001764:	f001 fbb7 	bl	8002ed6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001768:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <HAL_InitTick+0x74>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	e007      	b.n	8001780 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	73fb      	strb	r3, [r7, #15]
 8001774:	e004      	b.n	8001780 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	73fb      	strb	r3, [r7, #15]
 800177a:	e001      	b.n	8001780 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001780:	7bfb      	ldrb	r3, [r7, #15]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000024 	.word	0x20000024
 8001790:	2000001c 	.word	0x2000001c
 8001794:	20000020 	.word	0x20000020

08001798 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_IncTick+0x20>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <HAL_IncTick+0x24>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4413      	add	r3, r2
 80017a8:	4a04      	ldr	r2, [pc, #16]	; (80017bc <HAL_IncTick+0x24>)
 80017aa:	6013      	str	r3, [r2, #0]
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	20000024 	.word	0x20000024
 80017bc:	200002c0 	.word	0x200002c0

080017c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return uwTick;
 80017c4:	4b03      	ldr	r3, [pc, #12]	; (80017d4 <HAL_GetTick+0x14>)
 80017c6:	681b      	ldr	r3, [r3, #0]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	200002c0 	.word	0x200002c0

080017d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	431a      	orrs	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	609a      	str	r2, [r3, #8]
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	609a      	str	r2, [r3, #8]
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001834:	4618      	mov	r0, r3
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001840:	b480      	push	{r7}
 8001842:	b087      	sub	sp, #28
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
 800184c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	3360      	adds	r3, #96	; 0x60
 8001852:	461a      	mov	r2, r3
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <LL_ADC_SetOffset+0x44>)
 8001862:	4013      	ands	r3, r2
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	430a      	orrs	r2, r1
 800186e:	4313      	orrs	r3, r2
 8001870:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001878:	bf00      	nop
 800187a:	371c      	adds	r7, #28
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	03fff000 	.word	0x03fff000

08001888 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3360      	adds	r3, #96	; 0x60
 8001896:	461a      	mov	r2, r3
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b087      	sub	sp, #28
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	3360      	adds	r3, #96	; 0x60
 80018c4:	461a      	mov	r2, r3
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4413      	add	r3, r2
 80018cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	431a      	orrs	r2, r3
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80018de:	bf00      	nop
 80018e0:	371c      	adds	r7, #28
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80018fe:	2301      	movs	r3, #1
 8001900:	e000      	b.n	8001904 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001910:	b480      	push	{r7}
 8001912:	b087      	sub	sp, #28
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	3330      	adds	r3, #48	; 0x30
 8001920:	461a      	mov	r2, r3
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	0a1b      	lsrs	r3, r3, #8
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	f003 030c 	and.w	r3, r3, #12
 800192c:	4413      	add	r3, r2
 800192e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	f003 031f 	and.w	r3, r3, #31
 800193a:	211f      	movs	r1, #31
 800193c:	fa01 f303 	lsl.w	r3, r1, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	401a      	ands	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	0e9b      	lsrs	r3, r3, #26
 8001948:	f003 011f 	and.w	r1, r3, #31
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	f003 031f 	and.w	r3, r3, #31
 8001952:	fa01 f303 	lsl.w	r3, r1, r3
 8001956:	431a      	orrs	r2, r3
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800195c:	bf00      	nop
 800195e:	371c      	adds	r7, #28
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001974:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800197c:	2301      	movs	r3, #1
 800197e:	e000      	b.n	8001982 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800198e:	b480      	push	{r7}
 8001990:	b087      	sub	sp, #28
 8001992:	af00      	add	r7, sp, #0
 8001994:	60f8      	str	r0, [r7, #12]
 8001996:	60b9      	str	r1, [r7, #8]
 8001998:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	3314      	adds	r3, #20
 800199e:	461a      	mov	r2, r3
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	0e5b      	lsrs	r3, r3, #25
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	f003 0304 	and.w	r3, r3, #4
 80019aa:	4413      	add	r3, r2
 80019ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	0d1b      	lsrs	r3, r3, #20
 80019b6:	f003 031f 	and.w	r3, r3, #31
 80019ba:	2107      	movs	r1, #7
 80019bc:	fa01 f303 	lsl.w	r3, r1, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	401a      	ands	r2, r3
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	0d1b      	lsrs	r3, r3, #20
 80019c8:	f003 031f 	and.w	r3, r3, #31
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	fa01 f303 	lsl.w	r3, r1, r3
 80019d2:	431a      	orrs	r2, r3
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80019d8:	bf00      	nop
 80019da:	371c      	adds	r7, #28
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019fc:	43db      	mvns	r3, r3
 80019fe:	401a      	ands	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f003 0318 	and.w	r3, r3, #24
 8001a06:	4908      	ldr	r1, [pc, #32]	; (8001a28 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a08:	40d9      	lsrs	r1, r3
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	400b      	ands	r3, r1
 8001a0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a12:	431a      	orrs	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a1a:	bf00      	nop
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	0007ffff 	.word	0x0007ffff

08001a2c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001a3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6093      	str	r3, [r2, #8]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a64:	d101      	bne.n	8001a6a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a66:	2301      	movs	r3, #1
 8001a68:	e000      	b.n	8001a6c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001a88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a8c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ab4:	d101      	bne.n	8001aba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e000      	b.n	8001abc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ad8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001adc:	f043 0201 	orr.w	r2, r3, #1
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d101      	bne.n	8001b08 <LL_ADC_IsEnabled+0x18>
 8001b04:	2301      	movs	r3, #1
 8001b06:	e000      	b.n	8001b0a <LL_ADC_IsEnabled+0x1a>
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b26:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b2a:	f043 0204 	orr.w	r2, r3, #4
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 0304 	and.w	r3, r3, #4
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	d101      	bne.n	8001b56 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b52:	2301      	movs	r3, #1
 8001b54:	e000      	b.n	8001b58 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 0308 	and.w	r3, r3, #8
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d101      	bne.n	8001b7c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e000      	b.n	8001b7e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b088      	sub	sp, #32
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b94:	2300      	movs	r3, #0
 8001b96:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e12c      	b.n	8001e00 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d109      	bne.n	8001bc8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff fb31 	bl	800121c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff ff3f 	bl	8001a50 <LL_ADC_IsDeepPowerDownEnabled>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d004      	beq.n	8001be2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff ff25 	bl	8001a2c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff ff5a 	bl	8001aa0 <LL_ADC_IsInternalRegulatorEnabled>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d115      	bne.n	8001c1e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff ff3e 	bl	8001a78 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bfc:	4b82      	ldr	r3, [pc, #520]	; (8001e08 <HAL_ADC_Init+0x27c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	099b      	lsrs	r3, r3, #6
 8001c02:	4a82      	ldr	r2, [pc, #520]	; (8001e0c <HAL_ADC_Init+0x280>)
 8001c04:	fba2 2303 	umull	r2, r3, r2, r3
 8001c08:	099b      	lsrs	r3, r3, #6
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c10:	e002      	b.n	8001c18 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	3b01      	subs	r3, #1
 8001c16:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f9      	bne.n	8001c12 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff ff3c 	bl	8001aa0 <LL_ADC_IsInternalRegulatorEnabled>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d10d      	bne.n	8001c4a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c32:	f043 0210 	orr.w	r2, r3, #16
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3e:	f043 0201 	orr.w	r2, r3, #1
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff ff75 	bl	8001b3e <LL_ADC_REG_IsConversionOngoing>
 8001c54:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c5a:	f003 0310 	and.w	r3, r3, #16
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f040 80c5 	bne.w	8001dee <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f040 80c1 	bne.w	8001dee <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c70:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c74:	f043 0202 	orr.w	r2, r3, #2
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff ff35 	bl	8001af0 <LL_ADC_IsEnabled>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d10b      	bne.n	8001ca4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c8c:	4860      	ldr	r0, [pc, #384]	; (8001e10 <HAL_ADC_Init+0x284>)
 8001c8e:	f7ff ff2f 	bl	8001af0 <LL_ADC_IsEnabled>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d105      	bne.n	8001ca4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	485d      	ldr	r0, [pc, #372]	; (8001e14 <HAL_ADC_Init+0x288>)
 8001ca0:	f7ff fd9a 	bl	80017d8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	7e5b      	ldrb	r3, [r3, #25]
 8001ca8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cae:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001cb4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001cba:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cc2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d106      	bne.n	8001ce0 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	045b      	lsls	r3, r3, #17
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d009      	beq.n	8001cfc <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cec:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68da      	ldr	r2, [r3, #12]
 8001d02:	4b45      	ldr	r3, [pc, #276]	; (8001e18 <HAL_ADC_Init+0x28c>)
 8001d04:	4013      	ands	r3, r2
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6812      	ldr	r2, [r2, #0]
 8001d0a:	69b9      	ldr	r1, [r7, #24]
 8001d0c:	430b      	orrs	r3, r1
 8001d0e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff12 	bl	8001b3e <LL_ADC_REG_IsConversionOngoing>
 8001d1a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ff1f 	bl	8001b64 <LL_ADC_INJ_IsConversionOngoing>
 8001d26:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d13d      	bne.n	8001daa <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d13a      	bne.n	8001daa <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d38:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d40:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d50:	f023 0302 	bic.w	r3, r3, #2
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	69b9      	ldr	r1, [r7, #24]
 8001d5a:	430b      	orrs	r3, r1
 8001d5c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d118      	bne.n	8001d9a <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d72:	f023 0304 	bic.w	r3, r3, #4
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d7e:	4311      	orrs	r1, r2
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d84:	4311      	orrs	r1, r2
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f042 0201 	orr.w	r2, r2, #1
 8001d96:	611a      	str	r2, [r3, #16]
 8001d98:	e007      	b.n	8001daa <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	691a      	ldr	r2, [r3, #16]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 0201 	bic.w	r2, r2, #1
 8001da8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d10c      	bne.n	8001dcc <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db8:	f023 010f 	bic.w	r1, r3, #15
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	1e5a      	subs	r2, r3, #1
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	631a      	str	r2, [r3, #48]	; 0x30
 8001dca:	e007      	b.n	8001ddc <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 020f 	bic.w	r2, r2, #15
 8001dda:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de0:	f023 0303 	bic.w	r3, r3, #3
 8001de4:	f043 0201 	orr.w	r2, r3, #1
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	655a      	str	r2, [r3, #84]	; 0x54
 8001dec:	e007      	b.n	8001dfe <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df2:	f043 0210 	orr.w	r2, r3, #16
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001dfe:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3720      	adds	r7, #32
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	2000001c 	.word	0x2000001c
 8001e0c:	053e2d63 	.word	0x053e2d63
 8001e10:	50040000 	.word	0x50040000
 8001e14:	50040300 	.word	0x50040300
 8001e18:	fff0c007 	.word	0xfff0c007

08001e1c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff fe86 	bl	8001b3e <LL_ADC_REG_IsConversionOngoing>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d167      	bne.n	8001f08 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d101      	bne.n	8001e46 <HAL_ADC_Start_DMA+0x2a>
 8001e42:	2302      	movs	r3, #2
 8001e44:	e063      	b.n	8001f0e <HAL_ADC_Start_DMA+0xf2>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f000 fe1a 	bl	8002a88 <ADC_Enable>
 8001e54:	4603      	mov	r3, r0
 8001e56:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001e58:	7dfb      	ldrb	r3, [r7, #23]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d14f      	bne.n	8001efe <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e62:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e66:	f023 0301 	bic.w	r3, r3, #1
 8001e6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d006      	beq.n	8001e8c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e82:	f023 0206 	bic.w	r2, r3, #6
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	659a      	str	r2, [r3, #88]	; 0x58
 8001e8a:	e002      	b.n	8001e92 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e96:	4a20      	ldr	r2, [pc, #128]	; (8001f18 <HAL_ADC_Start_DMA+0xfc>)
 8001e98:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9e:	4a1f      	ldr	r2, [pc, #124]	; (8001f1c <HAL_ADC_Start_DMA+0x100>)
 8001ea0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea6:	4a1e      	ldr	r2, [pc, #120]	; (8001f20 <HAL_ADC_Start_DMA+0x104>)
 8001ea8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	221c      	movs	r2, #28
 8001eb0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f042 0210 	orr.w	r2, r2, #16
 8001ec8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68da      	ldr	r2, [r3, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f042 0201 	orr.w	r2, r2, #1
 8001ed8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	3340      	adds	r3, #64	; 0x40
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f001 f8e3 	bl	80030b4 <HAL_DMA_Start_IT>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fe0d 	bl	8001b16 <LL_ADC_REG_StartConversion>
 8001efc:	e006      	b.n	8001f0c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001f06:	e001      	b.n	8001f0c <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3718      	adds	r7, #24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	08002b95 	.word	0x08002b95
 8001f1c:	08002c6d 	.word	0x08002c6d
 8001f20:	08002c89 	.word	0x08002c89

08001f24 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d017      	beq.n	8001f7a <HAL_ADC_IRQHandler+0x56>
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d012      	beq.n	8001f7a <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f58:	f003 0310 	and.w	r3, r3, #16
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d105      	bne.n	8001f6c <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f64:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 fecd 	bl	8002d0c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2202      	movs	r2, #2
 8001f78:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d004      	beq.n	8001f8e <HAL_ADC_IRQHandler+0x6a>
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d109      	bne.n	8001fa2 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d05e      	beq.n	8002056 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d059      	beq.n	8002056 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa6:	f003 0310 	and.w	r3, r3, #16
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d105      	bne.n	8001fba <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff fc93 	bl	80018ea <LL_ADC_REG_IsTriggerSourceSWStart>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d03e      	beq.n	8002048 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d135      	bne.n	8002048 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0308 	and.w	r3, r3, #8
 8001fe6:	2b08      	cmp	r3, #8
 8001fe8:	d12e      	bne.n	8002048 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fda5 	bl	8001b3e <LL_ADC_REG_IsConversionOngoing>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d11a      	bne.n	8002030 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 020c 	bic.w	r2, r2, #12
 8002008:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d112      	bne.n	8002048 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002026:	f043 0201 	orr.w	r2, r3, #1
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	655a      	str	r2, [r3, #84]	; 0x54
 800202e:	e00b      	b.n	8002048 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002034:	f043 0210 	orr.w	r2, r3, #16
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002040:	f043 0201 	orr.w	r2, r3, #1
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7fe fbb1 	bl	80007b0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	220c      	movs	r2, #12
 8002054:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	f003 0320 	and.w	r3, r3, #32
 800205c:	2b00      	cmp	r3, #0
 800205e:	d004      	beq.n	800206a <HAL_ADC_IRQHandler+0x146>
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f003 0320 	and.w	r3, r3, #32
 8002066:	2b00      	cmp	r3, #0
 8002068:	d109      	bne.n	800207e <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002070:	2b00      	cmp	r3, #0
 8002072:	d072      	beq.n	800215a <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800207a:	2b00      	cmp	r3, #0
 800207c:	d06d      	beq.n	800215a <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002082:	f003 0310 	and.w	r3, r3, #16
 8002086:	2b00      	cmp	r3, #0
 8002088:	d105      	bne.n	8002096 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800208e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff fc64 	bl	8001968 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80020a0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff fc1f 	bl	80018ea <LL_ADC_REG_IsTriggerSourceSWStart>
 80020ac:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d047      	beq.n	800214c <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d007      	beq.n	80020d6 <HAL_ADC_IRQHandler+0x1b2>
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d03f      	beq.n	800214c <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d13a      	bne.n	800214c <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e0:	2b40      	cmp	r3, #64	; 0x40
 80020e2:	d133      	bne.n	800214c <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d12e      	bne.n	800214c <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fd36 	bl	8001b64 <LL_ADC_INJ_IsConversionOngoing>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d11a      	bne.n	8002134 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800210c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002112:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800211e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002122:	2b00      	cmp	r3, #0
 8002124:	d112      	bne.n	800214c <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212a:	f043 0201 	orr.w	r2, r3, #1
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	655a      	str	r2, [r3, #84]	; 0x54
 8002132:	e00b      	b.n	800214c <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002138:	f043 0210 	orr.w	r2, r3, #16
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002144:	f043 0201 	orr.w	r2, r3, #1
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 fdb5 	bl	8002cbc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2260      	movs	r2, #96	; 0x60
 8002158:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002160:	2b00      	cmp	r3, #0
 8002162:	d011      	beq.n	8002188 <HAL_ADC_IRQHandler+0x264>
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00c      	beq.n	8002188 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002172:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f890 	bl	80022a0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2280      	movs	r2, #128	; 0x80
 8002186:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218e:	2b00      	cmp	r3, #0
 8002190:	d012      	beq.n	80021b8 <HAL_ADC_IRQHandler+0x294>
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00d      	beq.n	80021b8 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 fd9b 	bl	8002ce4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021b6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d012      	beq.n	80021e8 <HAL_ADC_IRQHandler+0x2c4>
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00d      	beq.n	80021e8 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 fd8d 	bl	8002cf8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021e6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	f003 0310 	and.w	r3, r3, #16
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d02a      	beq.n	8002248 <HAL_ADC_IRQHandler+0x324>
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f003 0310 	and.w	r3, r3, #16
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d025      	beq.n	8002248 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002200:	2b00      	cmp	r3, #0
 8002202:	d102      	bne.n	800220a <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002204:	2301      	movs	r3, #1
 8002206:	61fb      	str	r3, [r7, #28]
 8002208:	e008      	b.n	800221c <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002218:	2301      	movs	r3, #1
 800221a:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d10e      	bne.n	8002240 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002226:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002232:	f043 0202 	orr.w	r2, r3, #2
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 f83a 	bl	80022b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2210      	movs	r2, #16
 8002246:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800224e:	2b00      	cmp	r3, #0
 8002250:	d018      	beq.n	8002284 <HAL_ADC_IRQHandler+0x360>
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002258:	2b00      	cmp	r3, #0
 800225a:	d013      	beq.n	8002284 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002260:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226c:	f043 0208 	orr.w	r2, r3, #8
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800227c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 fd26 	bl	8002cd0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002284:	bf00      	nop
 8002286:	3720      	adds	r7, #32
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b0b6      	sub	sp, #216	; 0xd8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022d2:	2300      	movs	r3, #0
 80022d4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80022d8:	2300      	movs	r3, #0
 80022da:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d101      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x22>
 80022e6:	2302      	movs	r3, #2
 80022e8:	e3b9      	b.n	8002a5e <HAL_ADC_ConfigChannel+0x796>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff fc21 	bl	8001b3e <LL_ADC_REG_IsConversionOngoing>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f040 839e 	bne.w	8002a40 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	2b05      	cmp	r3, #5
 800230a:	d824      	bhi.n	8002356 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	3b02      	subs	r3, #2
 8002312:	2b03      	cmp	r3, #3
 8002314:	d81b      	bhi.n	800234e <HAL_ADC_ConfigChannel+0x86>
 8002316:	a201      	add	r2, pc, #4	; (adr r2, 800231c <HAL_ADC_ConfigChannel+0x54>)
 8002318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800231c:	0800232d 	.word	0x0800232d
 8002320:	08002335 	.word	0x08002335
 8002324:	0800233d 	.word	0x0800233d
 8002328:	08002345 	.word	0x08002345
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	220c      	movs	r2, #12
 8002330:	605a      	str	r2, [r3, #4]
          break;
 8002332:	e011      	b.n	8002358 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	2212      	movs	r2, #18
 8002338:	605a      	str	r2, [r3, #4]
          break;
 800233a:	e00d      	b.n	8002358 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	2218      	movs	r2, #24
 8002340:	605a      	str	r2, [r3, #4]
          break;
 8002342:	e009      	b.n	8002358 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	f44f 7280 	mov.w	r2, #256	; 0x100
 800234a:	605a      	str	r2, [r3, #4]
          break;
 800234c:	e004      	b.n	8002358 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	2206      	movs	r2, #6
 8002352:	605a      	str	r2, [r3, #4]
          break;
 8002354:	e000      	b.n	8002358 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002356:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6818      	ldr	r0, [r3, #0]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	6859      	ldr	r1, [r3, #4]
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	461a      	mov	r2, r3
 8002366:	f7ff fad3 	bl	8001910 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff fbe5 	bl	8001b3e <LL_ADC_REG_IsConversionOngoing>
 8002374:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff fbf1 	bl	8001b64 <LL_ADC_INJ_IsConversionOngoing>
 8002382:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002386:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800238a:	2b00      	cmp	r3, #0
 800238c:	f040 81a6 	bne.w	80026dc <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002390:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002394:	2b00      	cmp	r3, #0
 8002396:	f040 81a1 	bne.w	80026dc <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6818      	ldr	r0, [r3, #0]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	6819      	ldr	r1, [r3, #0]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	461a      	mov	r2, r3
 80023a8:	f7ff faf1 	bl	800198e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	695a      	ldr	r2, [r3, #20]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	08db      	lsrs	r3, r3, #3
 80023b8:	f003 0303 	and.w	r3, r3, #3
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d00a      	beq.n	80023e4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6818      	ldr	r0, [r3, #0]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	6919      	ldr	r1, [r3, #16]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80023de:	f7ff fa2f 	bl	8001840 <LL_ADC_SetOffset>
 80023e2:	e17b      	b.n	80026dc <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2100      	movs	r1, #0
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff fa4c 	bl	8001888 <LL_ADC_GetOffsetChannel>
 80023f0:	4603      	mov	r3, r0
 80023f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10a      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x148>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2100      	movs	r1, #0
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff fa41 	bl	8001888 <LL_ADC_GetOffsetChannel>
 8002406:	4603      	mov	r3, r0
 8002408:	0e9b      	lsrs	r3, r3, #26
 800240a:	f003 021f 	and.w	r2, r3, #31
 800240e:	e01e      	b.n	800244e <HAL_ADC_ConfigChannel+0x186>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2100      	movs	r1, #0
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff fa36 	bl	8001888 <LL_ADC_GetOffsetChannel>
 800241c:	4603      	mov	r3, r0
 800241e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002422:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002426:	fa93 f3a3 	rbit	r3, r3
 800242a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800242e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002432:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002436:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800243e:	2320      	movs	r3, #32
 8002440:	e004      	b.n	800244c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002442:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002446:	fab3 f383 	clz	r3, r3
 800244a:	b2db      	uxtb	r3, r3
 800244c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002456:	2b00      	cmp	r3, #0
 8002458:	d105      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x19e>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	0e9b      	lsrs	r3, r3, #26
 8002460:	f003 031f 	and.w	r3, r3, #31
 8002464:	e018      	b.n	8002498 <HAL_ADC_ConfigChannel+0x1d0>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002472:	fa93 f3a3 	rbit	r3, r3
 8002476:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800247a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800247e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002482:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800248a:	2320      	movs	r3, #32
 800248c:	e004      	b.n	8002498 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800248e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002492:	fab3 f383 	clz	r3, r3
 8002496:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002498:	429a      	cmp	r2, r3
 800249a:	d106      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2200      	movs	r2, #0
 80024a2:	2100      	movs	r1, #0
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff fa05 	bl	80018b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2101      	movs	r1, #1
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff f9e9 	bl	8001888 <LL_ADC_GetOffsetChannel>
 80024b6:	4603      	mov	r3, r0
 80024b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10a      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x20e>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2101      	movs	r1, #1
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff f9de 	bl	8001888 <LL_ADC_GetOffsetChannel>
 80024cc:	4603      	mov	r3, r0
 80024ce:	0e9b      	lsrs	r3, r3, #26
 80024d0:	f003 021f 	and.w	r2, r3, #31
 80024d4:	e01e      	b.n	8002514 <HAL_ADC_ConfigChannel+0x24c>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2101      	movs	r1, #1
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff f9d3 	bl	8001888 <LL_ADC_GetOffsetChannel>
 80024e2:	4603      	mov	r3, r0
 80024e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024ec:	fa93 f3a3 	rbit	r3, r3
 80024f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80024f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80024f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80024fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002504:	2320      	movs	r3, #32
 8002506:	e004      	b.n	8002512 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002508:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800250c:	fab3 f383 	clz	r3, r3
 8002510:	b2db      	uxtb	r3, r3
 8002512:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800251c:	2b00      	cmp	r3, #0
 800251e:	d105      	bne.n	800252c <HAL_ADC_ConfigChannel+0x264>
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	0e9b      	lsrs	r3, r3, #26
 8002526:	f003 031f 	and.w	r3, r3, #31
 800252a:	e018      	b.n	800255e <HAL_ADC_ConfigChannel+0x296>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002534:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002538:	fa93 f3a3 	rbit	r3, r3
 800253c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002540:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002544:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002548:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002550:	2320      	movs	r3, #32
 8002552:	e004      	b.n	800255e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002554:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002558:	fab3 f383 	clz	r3, r3
 800255c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800255e:	429a      	cmp	r2, r3
 8002560:	d106      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2200      	movs	r2, #0
 8002568:	2101      	movs	r1, #1
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff f9a2 	bl	80018b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2102      	movs	r1, #2
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff f986 	bl	8001888 <LL_ADC_GetOffsetChannel>
 800257c:	4603      	mov	r3, r0
 800257e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10a      	bne.n	800259c <HAL_ADC_ConfigChannel+0x2d4>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2102      	movs	r1, #2
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff f97b 	bl	8001888 <LL_ADC_GetOffsetChannel>
 8002592:	4603      	mov	r3, r0
 8002594:	0e9b      	lsrs	r3, r3, #26
 8002596:	f003 021f 	and.w	r2, r3, #31
 800259a:	e01e      	b.n	80025da <HAL_ADC_ConfigChannel+0x312>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2102      	movs	r1, #2
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff f970 	bl	8001888 <LL_ADC_GetOffsetChannel>
 80025a8:	4603      	mov	r3, r0
 80025aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025b2:	fa93 f3a3 	rbit	r3, r3
 80025b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80025ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80025c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80025ca:	2320      	movs	r3, #32
 80025cc:	e004      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80025ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025d2:	fab3 f383 	clz	r3, r3
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d105      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x32a>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	0e9b      	lsrs	r3, r3, #26
 80025ec:	f003 031f 	and.w	r3, r3, #31
 80025f0:	e016      	b.n	8002620 <HAL_ADC_ConfigChannel+0x358>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025fe:	fa93 f3a3 	rbit	r3, r3
 8002602:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002604:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002606:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800260a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002612:	2320      	movs	r3, #32
 8002614:	e004      	b.n	8002620 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002616:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800261a:	fab3 f383 	clz	r3, r3
 800261e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002620:	429a      	cmp	r2, r3
 8002622:	d106      	bne.n	8002632 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2200      	movs	r2, #0
 800262a:	2102      	movs	r1, #2
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff f941 	bl	80018b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2103      	movs	r1, #3
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff f925 	bl	8001888 <LL_ADC_GetOffsetChannel>
 800263e:	4603      	mov	r3, r0
 8002640:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10a      	bne.n	800265e <HAL_ADC_ConfigChannel+0x396>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2103      	movs	r1, #3
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff f91a 	bl	8001888 <LL_ADC_GetOffsetChannel>
 8002654:	4603      	mov	r3, r0
 8002656:	0e9b      	lsrs	r3, r3, #26
 8002658:	f003 021f 	and.w	r2, r3, #31
 800265c:	e017      	b.n	800268e <HAL_ADC_ConfigChannel+0x3c6>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2103      	movs	r1, #3
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff f90f 	bl	8001888 <LL_ADC_GetOffsetChannel>
 800266a:	4603      	mov	r3, r0
 800266c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002670:	fa93 f3a3 	rbit	r3, r3
 8002674:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002676:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002678:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800267a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002680:	2320      	movs	r3, #32
 8002682:	e003      	b.n	800268c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002684:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002686:	fab3 f383 	clz	r3, r3
 800268a:	b2db      	uxtb	r3, r3
 800268c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002696:	2b00      	cmp	r3, #0
 8002698:	d105      	bne.n	80026a6 <HAL_ADC_ConfigChannel+0x3de>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	0e9b      	lsrs	r3, r3, #26
 80026a0:	f003 031f 	and.w	r3, r3, #31
 80026a4:	e011      	b.n	80026ca <HAL_ADC_ConfigChannel+0x402>
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026ae:	fa93 f3a3 	rbit	r3, r3
 80026b2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80026b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80026b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80026be:	2320      	movs	r3, #32
 80026c0:	e003      	b.n	80026ca <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80026c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026c4:	fab3 f383 	clz	r3, r3
 80026c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d106      	bne.n	80026dc <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2200      	movs	r2, #0
 80026d4:	2103      	movs	r1, #3
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff f8ec 	bl	80018b4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff fa05 	bl	8001af0 <LL_ADC_IsEnabled>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f040 813f 	bne.w	800296c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6818      	ldr	r0, [r3, #0]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	6819      	ldr	r1, [r3, #0]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	461a      	mov	r2, r3
 80026fc:	f7ff f972 	bl	80019e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	4a8e      	ldr	r2, [pc, #568]	; (8002940 <HAL_ADC_ConfigChannel+0x678>)
 8002706:	4293      	cmp	r3, r2
 8002708:	f040 8130 	bne.w	800296c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10b      	bne.n	8002734 <HAL_ADC_ConfigChannel+0x46c>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	0e9b      	lsrs	r3, r3, #26
 8002722:	3301      	adds	r3, #1
 8002724:	f003 031f 	and.w	r3, r3, #31
 8002728:	2b09      	cmp	r3, #9
 800272a:	bf94      	ite	ls
 800272c:	2301      	movls	r3, #1
 800272e:	2300      	movhi	r3, #0
 8002730:	b2db      	uxtb	r3, r3
 8002732:	e019      	b.n	8002768 <HAL_ADC_ConfigChannel+0x4a0>
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800273c:	fa93 f3a3 	rbit	r3, r3
 8002740:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002742:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002744:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002746:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800274c:	2320      	movs	r3, #32
 800274e:	e003      	b.n	8002758 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002750:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002752:	fab3 f383 	clz	r3, r3
 8002756:	b2db      	uxtb	r3, r3
 8002758:	3301      	adds	r3, #1
 800275a:	f003 031f 	and.w	r3, r3, #31
 800275e:	2b09      	cmp	r3, #9
 8002760:	bf94      	ite	ls
 8002762:	2301      	movls	r3, #1
 8002764:	2300      	movhi	r3, #0
 8002766:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002768:	2b00      	cmp	r3, #0
 800276a:	d079      	beq.n	8002860 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002774:	2b00      	cmp	r3, #0
 8002776:	d107      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x4c0>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	0e9b      	lsrs	r3, r3, #26
 800277e:	3301      	adds	r3, #1
 8002780:	069b      	lsls	r3, r3, #26
 8002782:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002786:	e015      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x4ec>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002790:	fa93 f3a3 	rbit	r3, r3
 8002794:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002798:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800279a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80027a0:	2320      	movs	r3, #32
 80027a2:	e003      	b.n	80027ac <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80027a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027a6:	fab3 f383 	clz	r3, r3
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	3301      	adds	r3, #1
 80027ae:	069b      	lsls	r3, r3, #26
 80027b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d109      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x50c>
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	0e9b      	lsrs	r3, r3, #26
 80027c6:	3301      	adds	r3, #1
 80027c8:	f003 031f 	and.w	r3, r3, #31
 80027cc:	2101      	movs	r1, #1
 80027ce:	fa01 f303 	lsl.w	r3, r1, r3
 80027d2:	e017      	b.n	8002804 <HAL_ADC_ConfigChannel+0x53c>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027dc:	fa93 f3a3 	rbit	r3, r3
 80027e0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80027e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027e4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80027e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80027ec:	2320      	movs	r3, #32
 80027ee:	e003      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80027f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027f2:	fab3 f383 	clz	r3, r3
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	3301      	adds	r3, #1
 80027fa:	f003 031f 	and.w	r3, r3, #31
 80027fe:	2101      	movs	r1, #1
 8002800:	fa01 f303 	lsl.w	r3, r1, r3
 8002804:	ea42 0103 	orr.w	r1, r2, r3
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10a      	bne.n	800282a <HAL_ADC_ConfigChannel+0x562>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	0e9b      	lsrs	r3, r3, #26
 800281a:	3301      	adds	r3, #1
 800281c:	f003 021f 	and.w	r2, r3, #31
 8002820:	4613      	mov	r3, r2
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	4413      	add	r3, r2
 8002826:	051b      	lsls	r3, r3, #20
 8002828:	e018      	b.n	800285c <HAL_ADC_ConfigChannel+0x594>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002832:	fa93 f3a3 	rbit	r3, r3
 8002836:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800283a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800283c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002842:	2320      	movs	r3, #32
 8002844:	e003      	b.n	800284e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002848:	fab3 f383 	clz	r3, r3
 800284c:	b2db      	uxtb	r3, r3
 800284e:	3301      	adds	r3, #1
 8002850:	f003 021f 	and.w	r2, r3, #31
 8002854:	4613      	mov	r3, r2
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	4413      	add	r3, r2
 800285a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800285c:	430b      	orrs	r3, r1
 800285e:	e080      	b.n	8002962 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002868:	2b00      	cmp	r3, #0
 800286a:	d107      	bne.n	800287c <HAL_ADC_ConfigChannel+0x5b4>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	0e9b      	lsrs	r3, r3, #26
 8002872:	3301      	adds	r3, #1
 8002874:	069b      	lsls	r3, r3, #26
 8002876:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800287a:	e015      	b.n	80028a8 <HAL_ADC_ConfigChannel+0x5e0>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002884:	fa93 f3a3 	rbit	r3, r3
 8002888:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800288a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800288e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002894:	2320      	movs	r3, #32
 8002896:	e003      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289a:	fab3 f383 	clz	r3, r3
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	3301      	adds	r3, #1
 80028a2:	069b      	lsls	r3, r3, #26
 80028a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d109      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x600>
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	0e9b      	lsrs	r3, r3, #26
 80028ba:	3301      	adds	r3, #1
 80028bc:	f003 031f 	and.w	r3, r3, #31
 80028c0:	2101      	movs	r1, #1
 80028c2:	fa01 f303 	lsl.w	r3, r1, r3
 80028c6:	e017      	b.n	80028f8 <HAL_ADC_ConfigChannel+0x630>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	fa93 f3a3 	rbit	r3, r3
 80028d4:	61fb      	str	r3, [r7, #28]
  return result;
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80028e0:	2320      	movs	r3, #32
 80028e2:	e003      	b.n	80028ec <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	fab3 f383 	clz	r3, r3
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	3301      	adds	r3, #1
 80028ee:	f003 031f 	and.w	r3, r3, #31
 80028f2:	2101      	movs	r1, #1
 80028f4:	fa01 f303 	lsl.w	r3, r1, r3
 80028f8:	ea42 0103 	orr.w	r1, r2, r3
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10d      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x65c>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	0e9b      	lsrs	r3, r3, #26
 800290e:	3301      	adds	r3, #1
 8002910:	f003 021f 	and.w	r2, r3, #31
 8002914:	4613      	mov	r3, r2
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	4413      	add	r3, r2
 800291a:	3b1e      	subs	r3, #30
 800291c:	051b      	lsls	r3, r3, #20
 800291e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002922:	e01d      	b.n	8002960 <HAL_ADC_ConfigChannel+0x698>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	fa93 f3a3 	rbit	r3, r3
 8002930:	613b      	str	r3, [r7, #16]
  return result;
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d103      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800293c:	2320      	movs	r3, #32
 800293e:	e005      	b.n	800294c <HAL_ADC_ConfigChannel+0x684>
 8002940:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	fab3 f383 	clz	r3, r3
 800294a:	b2db      	uxtb	r3, r3
 800294c:	3301      	adds	r3, #1
 800294e:	f003 021f 	and.w	r2, r3, #31
 8002952:	4613      	mov	r3, r2
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	4413      	add	r3, r2
 8002958:	3b1e      	subs	r3, #30
 800295a:	051b      	lsls	r3, r3, #20
 800295c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002960:	430b      	orrs	r3, r1
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	6892      	ldr	r2, [r2, #8]
 8002966:	4619      	mov	r1, r3
 8002968:	f7ff f811 	bl	800198e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	4b3d      	ldr	r3, [pc, #244]	; (8002a68 <HAL_ADC_ConfigChannel+0x7a0>)
 8002972:	4013      	ands	r3, r2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d06c      	beq.n	8002a52 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002978:	483c      	ldr	r0, [pc, #240]	; (8002a6c <HAL_ADC_ConfigChannel+0x7a4>)
 800297a:	f7fe ff53 	bl	8001824 <LL_ADC_GetCommonPathInternalCh>
 800297e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a3a      	ldr	r2, [pc, #232]	; (8002a70 <HAL_ADC_ConfigChannel+0x7a8>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d127      	bne.n	80029dc <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800298c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002990:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d121      	bne.n	80029dc <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a35      	ldr	r2, [pc, #212]	; (8002a74 <HAL_ADC_ConfigChannel+0x7ac>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d157      	bne.n	8002a52 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029aa:	4619      	mov	r1, r3
 80029ac:	482f      	ldr	r0, [pc, #188]	; (8002a6c <HAL_ADC_ConfigChannel+0x7a4>)
 80029ae:	f7fe ff26 	bl	80017fe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029b2:	4b31      	ldr	r3, [pc, #196]	; (8002a78 <HAL_ADC_ConfigChannel+0x7b0>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	099b      	lsrs	r3, r3, #6
 80029b8:	4a30      	ldr	r2, [pc, #192]	; (8002a7c <HAL_ADC_ConfigChannel+0x7b4>)
 80029ba:	fba2 2303 	umull	r2, r3, r2, r3
 80029be:	099b      	lsrs	r3, r3, #6
 80029c0:	1c5a      	adds	r2, r3, #1
 80029c2:	4613      	mov	r3, r2
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	4413      	add	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029cc:	e002      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	3b01      	subs	r3, #1
 80029d2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f9      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029da:	e03a      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a27      	ldr	r2, [pc, #156]	; (8002a80 <HAL_ADC_ConfigChannel+0x7b8>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d113      	bne.n	8002a0e <HAL_ADC_ConfigChannel+0x746>
 80029e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10d      	bne.n	8002a0e <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a1f      	ldr	r2, [pc, #124]	; (8002a74 <HAL_ADC_ConfigChannel+0x7ac>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d12a      	bne.n	8002a52 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a04:	4619      	mov	r1, r3
 8002a06:	4819      	ldr	r0, [pc, #100]	; (8002a6c <HAL_ADC_ConfigChannel+0x7a4>)
 8002a08:	f7fe fef9 	bl	80017fe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a0c:	e021      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a1c      	ldr	r2, [pc, #112]	; (8002a84 <HAL_ADC_ConfigChannel+0x7bc>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d11c      	bne.n	8002a52 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d116      	bne.n	8002a52 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a12      	ldr	r2, [pc, #72]	; (8002a74 <HAL_ADC_ConfigChannel+0x7ac>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d111      	bne.n	8002a52 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a36:	4619      	mov	r1, r3
 8002a38:	480c      	ldr	r0, [pc, #48]	; (8002a6c <HAL_ADC_ConfigChannel+0x7a4>)
 8002a3a:	f7fe fee0 	bl	80017fe <LL_ADC_SetCommonPathInternalCh>
 8002a3e:	e008      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a44:	f043 0220 	orr.w	r2, r3, #32
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a5a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	37d8      	adds	r7, #216	; 0xd8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	80080000 	.word	0x80080000
 8002a6c:	50040300 	.word	0x50040300
 8002a70:	c7520000 	.word	0xc7520000
 8002a74:	50040000 	.word	0x50040000
 8002a78:	2000001c 	.word	0x2000001c
 8002a7c:	053e2d63 	.word	0x053e2d63
 8002a80:	cb840000 	.word	0xcb840000
 8002a84:	80000001 	.word	0x80000001

08002a88 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002a90:	2300      	movs	r3, #0
 8002a92:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff f829 	bl	8001af0 <LL_ADC_IsEnabled>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d169      	bne.n	8002b78 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689a      	ldr	r2, [r3, #8]
 8002aaa:	4b36      	ldr	r3, [pc, #216]	; (8002b84 <ADC_Enable+0xfc>)
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00d      	beq.n	8002ace <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab6:	f043 0210 	orr.w	r2, r3, #16
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac2:	f043 0201 	orr.w	r2, r3, #1
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e055      	b.n	8002b7a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fe fff8 	bl	8001ac8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002ad8:	482b      	ldr	r0, [pc, #172]	; (8002b88 <ADC_Enable+0x100>)
 8002ada:	f7fe fea3 	bl	8001824 <LL_ADC_GetCommonPathInternalCh>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d013      	beq.n	8002b10 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ae8:	4b28      	ldr	r3, [pc, #160]	; (8002b8c <ADC_Enable+0x104>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	099b      	lsrs	r3, r3, #6
 8002aee:	4a28      	ldr	r2, [pc, #160]	; (8002b90 <ADC_Enable+0x108>)
 8002af0:	fba2 2303 	umull	r2, r3, r2, r3
 8002af4:	099b      	lsrs	r3, r3, #6
 8002af6:	1c5a      	adds	r2, r3, #1
 8002af8:	4613      	mov	r3, r2
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	4413      	add	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002b02:	e002      	b.n	8002b0a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	3b01      	subs	r3, #1
 8002b08:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1f9      	bne.n	8002b04 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002b10:	f7fe fe56 	bl	80017c0 <HAL_GetTick>
 8002b14:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b16:	e028      	b.n	8002b6a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fe ffe7 	bl	8001af0 <LL_ADC_IsEnabled>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d104      	bne.n	8002b32 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fe ffcb 	bl	8001ac8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b32:	f7fe fe45 	bl	80017c0 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d914      	bls.n	8002b6a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d00d      	beq.n	8002b6a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b52:	f043 0210 	orr.w	r2, r3, #16
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5e:	f043 0201 	orr.w	r2, r3, #1
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e007      	b.n	8002b7a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d1cf      	bne.n	8002b18 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	8000003f 	.word	0x8000003f
 8002b88:	50040300 	.word	0x50040300
 8002b8c:	2000001c 	.word	0x2000001c
 8002b90:	053e2d63 	.word	0x053e2d63

08002b94 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d14b      	bne.n	8002c46 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0308 	and.w	r3, r3, #8
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d021      	beq.n	8002c0c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fe fe8c 	bl	80018ea <LL_ADC_REG_IsTriggerSourceSWStart>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d032      	beq.n	8002c3e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d12b      	bne.n	8002c3e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d11f      	bne.n	8002c3e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c02:	f043 0201 	orr.w	r2, r3, #1
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	655a      	str	r2, [r3, #84]	; 0x54
 8002c0a:	e018      	b.n	8002c3e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d111      	bne.n	8002c3e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d105      	bne.n	8002c3e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c36:	f043 0201 	orr.w	r2, r3, #1
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f7fd fdb6 	bl	80007b0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c44:	e00e      	b.n	8002c64 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4a:	f003 0310 	and.w	r3, r3, #16
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f7ff fb2e 	bl	80022b4 <HAL_ADC_ErrorCallback>
}
 8002c58:	e004      	b.n	8002c64 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	4798      	blx	r3
}
 8002c64:	bf00      	nop
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c78:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f7ff fb06 	bl	800228c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c80:	bf00      	nop
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c94:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca6:	f043 0204 	orr.w	r2, r3, #4
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f7ff fb00 	bl	80022b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cb4:	bf00      	nop
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d30:	4b0c      	ldr	r3, [pc, #48]	; (8002d64 <__NVIC_SetPriorityGrouping+0x44>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d52:	4a04      	ldr	r2, [pc, #16]	; (8002d64 <__NVIC_SetPriorityGrouping+0x44>)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	60d3      	str	r3, [r2, #12]
}
 8002d58:	bf00      	nop
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	e000ed00 	.word	0xe000ed00

08002d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d6c:	4b04      	ldr	r3, [pc, #16]	; (8002d80 <__NVIC_GetPriorityGrouping+0x18>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	0a1b      	lsrs	r3, r3, #8
 8002d72:	f003 0307 	and.w	r3, r3, #7
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	e000ed00 	.word	0xe000ed00

08002d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	db0b      	blt.n	8002dae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d96:	79fb      	ldrb	r3, [r7, #7]
 8002d98:	f003 021f 	and.w	r2, r3, #31
 8002d9c:	4907      	ldr	r1, [pc, #28]	; (8002dbc <__NVIC_EnableIRQ+0x38>)
 8002d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da2:	095b      	lsrs	r3, r3, #5
 8002da4:	2001      	movs	r0, #1
 8002da6:	fa00 f202 	lsl.w	r2, r0, r2
 8002daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	e000e100 	.word	0xe000e100

08002dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	6039      	str	r1, [r7, #0]
 8002dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	db0a      	blt.n	8002dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	490c      	ldr	r1, [pc, #48]	; (8002e0c <__NVIC_SetPriority+0x4c>)
 8002dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dde:	0112      	lsls	r2, r2, #4
 8002de0:	b2d2      	uxtb	r2, r2
 8002de2:	440b      	add	r3, r1
 8002de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002de8:	e00a      	b.n	8002e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	4908      	ldr	r1, [pc, #32]	; (8002e10 <__NVIC_SetPriority+0x50>)
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	3b04      	subs	r3, #4
 8002df8:	0112      	lsls	r2, r2, #4
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	761a      	strb	r2, [r3, #24]
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	e000e100 	.word	0xe000e100
 8002e10:	e000ed00 	.word	0xe000ed00

08002e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b089      	sub	sp, #36	; 0x24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	f1c3 0307 	rsb	r3, r3, #7
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	bf28      	it	cs
 8002e32:	2304      	movcs	r3, #4
 8002e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	3304      	adds	r3, #4
 8002e3a:	2b06      	cmp	r3, #6
 8002e3c:	d902      	bls.n	8002e44 <NVIC_EncodePriority+0x30>
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	3b03      	subs	r3, #3
 8002e42:	e000      	b.n	8002e46 <NVIC_EncodePriority+0x32>
 8002e44:	2300      	movs	r3, #0
 8002e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e48:	f04f 32ff 	mov.w	r2, #4294967295
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43da      	mvns	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	401a      	ands	r2, r3
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	fa01 f303 	lsl.w	r3, r1, r3
 8002e66:	43d9      	mvns	r1, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e6c:	4313      	orrs	r3, r2
         );
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3724      	adds	r7, #36	; 0x24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
	...

08002e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3b01      	subs	r3, #1
 8002e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e8c:	d301      	bcc.n	8002e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e00f      	b.n	8002eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e92:	4a0a      	ldr	r2, [pc, #40]	; (8002ebc <SysTick_Config+0x40>)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e9a:	210f      	movs	r1, #15
 8002e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ea0:	f7ff ff8e 	bl	8002dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ea4:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <SysTick_Config+0x40>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eaa:	4b04      	ldr	r3, [pc, #16]	; (8002ebc <SysTick_Config+0x40>)
 8002eac:	2207      	movs	r2, #7
 8002eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	e000e010 	.word	0xe000e010

08002ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7ff ff29 	bl	8002d20 <__NVIC_SetPriorityGrouping>
}
 8002ece:	bf00      	nop
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b086      	sub	sp, #24
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	4603      	mov	r3, r0
 8002ede:	60b9      	str	r1, [r7, #8]
 8002ee0:	607a      	str	r2, [r7, #4]
 8002ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ee8:	f7ff ff3e 	bl	8002d68 <__NVIC_GetPriorityGrouping>
 8002eec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	68b9      	ldr	r1, [r7, #8]
 8002ef2:	6978      	ldr	r0, [r7, #20]
 8002ef4:	f7ff ff8e 	bl	8002e14 <NVIC_EncodePriority>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002efe:	4611      	mov	r1, r2
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff ff5d 	bl	8002dc0 <__NVIC_SetPriority>
}
 8002f06:	bf00      	nop
 8002f08:	3718      	adds	r7, #24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	4603      	mov	r3, r0
 8002f16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff ff31 	bl	8002d84 <__NVIC_EnableIRQ>
}
 8002f22:	bf00      	nop
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b082      	sub	sp, #8
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7ff ffa2 	bl	8002e7c <SysTick_Config>
 8002f38:	4603      	mov	r3, r0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
	...

08002f44 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e098      	b.n	8003088 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	4b4d      	ldr	r3, [pc, #308]	; (8003094 <HAL_DMA_Init+0x150>)
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d80f      	bhi.n	8002f82 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	461a      	mov	r2, r3
 8002f68:	4b4b      	ldr	r3, [pc, #300]	; (8003098 <HAL_DMA_Init+0x154>)
 8002f6a:	4413      	add	r3, r2
 8002f6c:	4a4b      	ldr	r2, [pc, #300]	; (800309c <HAL_DMA_Init+0x158>)
 8002f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f72:	091b      	lsrs	r3, r3, #4
 8002f74:	009a      	lsls	r2, r3, #2
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a48      	ldr	r2, [pc, #288]	; (80030a0 <HAL_DMA_Init+0x15c>)
 8002f7e:	641a      	str	r2, [r3, #64]	; 0x40
 8002f80:	e00e      	b.n	8002fa0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	461a      	mov	r2, r3
 8002f88:	4b46      	ldr	r3, [pc, #280]	; (80030a4 <HAL_DMA_Init+0x160>)
 8002f8a:	4413      	add	r3, r2
 8002f8c:	4a43      	ldr	r2, [pc, #268]	; (800309c <HAL_DMA_Init+0x158>)
 8002f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f92:	091b      	lsrs	r3, r3, #4
 8002f94:	009a      	lsls	r2, r3, #2
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a42      	ldr	r2, [pc, #264]	; (80030a8 <HAL_DMA_Init+0x164>)
 8002f9e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002fc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ffa:	d039      	beq.n	8003070 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	4a27      	ldr	r2, [pc, #156]	; (80030a0 <HAL_DMA_Init+0x15c>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d11a      	bne.n	800303c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003006:	4b29      	ldr	r3, [pc, #164]	; (80030ac <HAL_DMA_Init+0x168>)
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300e:	f003 031c 	and.w	r3, r3, #28
 8003012:	210f      	movs	r1, #15
 8003014:	fa01 f303 	lsl.w	r3, r1, r3
 8003018:	43db      	mvns	r3, r3
 800301a:	4924      	ldr	r1, [pc, #144]	; (80030ac <HAL_DMA_Init+0x168>)
 800301c:	4013      	ands	r3, r2
 800301e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003020:	4b22      	ldr	r3, [pc, #136]	; (80030ac <HAL_DMA_Init+0x168>)
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6859      	ldr	r1, [r3, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302c:	f003 031c 	and.w	r3, r3, #28
 8003030:	fa01 f303 	lsl.w	r3, r1, r3
 8003034:	491d      	ldr	r1, [pc, #116]	; (80030ac <HAL_DMA_Init+0x168>)
 8003036:	4313      	orrs	r3, r2
 8003038:	600b      	str	r3, [r1, #0]
 800303a:	e019      	b.n	8003070 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800303c:	4b1c      	ldr	r3, [pc, #112]	; (80030b0 <HAL_DMA_Init+0x16c>)
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003044:	f003 031c 	and.w	r3, r3, #28
 8003048:	210f      	movs	r1, #15
 800304a:	fa01 f303 	lsl.w	r3, r1, r3
 800304e:	43db      	mvns	r3, r3
 8003050:	4917      	ldr	r1, [pc, #92]	; (80030b0 <HAL_DMA_Init+0x16c>)
 8003052:	4013      	ands	r3, r2
 8003054:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003056:	4b16      	ldr	r3, [pc, #88]	; (80030b0 <HAL_DMA_Init+0x16c>)
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6859      	ldr	r1, [r3, #4]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003062:	f003 031c 	and.w	r3, r3, #28
 8003066:	fa01 f303 	lsl.w	r3, r1, r3
 800306a:	4911      	ldr	r1, [pc, #68]	; (80030b0 <HAL_DMA_Init+0x16c>)
 800306c:	4313      	orrs	r3, r2
 800306e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	40020407 	.word	0x40020407
 8003098:	bffdfff8 	.word	0xbffdfff8
 800309c:	cccccccd 	.word	0xcccccccd
 80030a0:	40020000 	.word	0x40020000
 80030a4:	bffdfbf8 	.word	0xbffdfbf8
 80030a8:	40020400 	.word	0x40020400
 80030ac:	400200a8 	.word	0x400200a8
 80030b0:	400204a8 	.word	0x400204a8

080030b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
 80030c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030c2:	2300      	movs	r3, #0
 80030c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d101      	bne.n	80030d4 <HAL_DMA_Start_IT+0x20>
 80030d0:	2302      	movs	r3, #2
 80030d2:	e04b      	b.n	800316c <HAL_DMA_Start_IT+0xb8>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d13a      	bne.n	800315e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0201 	bic.w	r2, r2, #1
 8003104:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	68b9      	ldr	r1, [r7, #8]
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f000 f95f 	bl	80033d0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	2b00      	cmp	r3, #0
 8003118:	d008      	beq.n	800312c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f042 020e 	orr.w	r2, r2, #14
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	e00f      	b.n	800314c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 0204 	bic.w	r2, r2, #4
 800313a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 020a 	orr.w	r2, r2, #10
 800314a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f042 0201 	orr.w	r2, r2, #1
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	e005      	b.n	800316a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003166:	2302      	movs	r3, #2
 8003168:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800316a:	7dfb      	ldrb	r3, [r7, #23]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3718      	adds	r7, #24
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800317c:	2300      	movs	r3, #0
 800317e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d008      	beq.n	800319e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2204      	movs	r2, #4
 8003190:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e022      	b.n	80031e4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 020e 	bic.w	r2, r2, #14
 80031ac:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 0201 	bic.w	r2, r2, #1
 80031bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c2:	f003 021c 	and.w	r2, r3, #28
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	2101      	movs	r1, #1
 80031cc:	fa01 f202 	lsl.w	r2, r1, r2
 80031d0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3714      	adds	r7, #20
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031f8:	2300      	movs	r3, #0
 80031fa:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d005      	beq.n	8003214 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2204      	movs	r2, #4
 800320c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	73fb      	strb	r3, [r7, #15]
 8003212:	e029      	b.n	8003268 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f022 020e 	bic.w	r2, r2, #14
 8003222:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0201 	bic.w	r2, r2, #1
 8003232:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003238:	f003 021c 	and.w	r2, r3, #28
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003240:	2101      	movs	r1, #1
 8003242:	fa01 f202 	lsl.w	r2, r1, r2
 8003246:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325c:	2b00      	cmp	r3, #0
 800325e:	d003      	beq.n	8003268 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	4798      	blx	r3
    }
  }
  return status;
 8003268:	7bfb      	ldrb	r3, [r7, #15]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b084      	sub	sp, #16
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328e:	f003 031c 	and.w	r3, r3, #28
 8003292:	2204      	movs	r2, #4
 8003294:	409a      	lsls	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	4013      	ands	r3, r2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d026      	beq.n	80032ec <HAL_DMA_IRQHandler+0x7a>
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d021      	beq.n	80032ec <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0320 	and.w	r3, r3, #32
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d107      	bne.n	80032c6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 0204 	bic.w	r2, r2, #4
 80032c4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ca:	f003 021c 	and.w	r2, r3, #28
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	2104      	movs	r1, #4
 80032d4:	fa01 f202 	lsl.w	r2, r1, r2
 80032d8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d071      	beq.n	80033c6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80032ea:	e06c      	b.n	80033c6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f0:	f003 031c 	and.w	r3, r3, #28
 80032f4:	2202      	movs	r2, #2
 80032f6:	409a      	lsls	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4013      	ands	r3, r2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d02e      	beq.n	800335e <HAL_DMA_IRQHandler+0xec>
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d029      	beq.n	800335e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0320 	and.w	r3, r3, #32
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10b      	bne.n	8003330 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 020a 	bic.w	r2, r2, #10
 8003326:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003334:	f003 021c 	and.w	r2, r3, #28
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333c:	2102      	movs	r1, #2
 800333e:	fa01 f202 	lsl.w	r2, r1, r2
 8003342:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003350:	2b00      	cmp	r3, #0
 8003352:	d038      	beq.n	80033c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800335c:	e033      	b.n	80033c6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003362:	f003 031c 	and.w	r3, r3, #28
 8003366:	2208      	movs	r2, #8
 8003368:	409a      	lsls	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	4013      	ands	r3, r2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d02a      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x156>
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	f003 0308 	and.w	r3, r3, #8
 8003378:	2b00      	cmp	r3, #0
 800337a:	d025      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 020e 	bic.w	r2, r2, #14
 800338a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003390:	f003 021c 	and.w	r2, r3, #28
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	2101      	movs	r1, #1
 800339a:	fa01 f202 	lsl.w	r2, r1, r2
 800339e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d004      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80033c6:	bf00      	nop
 80033c8:	bf00      	nop
}
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
 80033dc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e2:	f003 021c 	and.w	r2, r3, #28
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	2101      	movs	r1, #1
 80033ec:	fa01 f202 	lsl.w	r2, r1, r2
 80033f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	2b10      	cmp	r3, #16
 8003400:	d108      	bne.n	8003414 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003412:	e007      	b.n	8003424 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	60da      	str	r2, [r3, #12]
}
 8003424:	bf00      	nop
 8003426:	3714      	adds	r7, #20
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003430:	b480      	push	{r7}
 8003432:	b087      	sub	sp, #28
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800343a:	2300      	movs	r3, #0
 800343c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800343e:	e154      	b.n	80036ea <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	2101      	movs	r1, #1
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	fa01 f303 	lsl.w	r3, r1, r3
 800344c:	4013      	ands	r3, r2
 800344e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 8146 	beq.w	80036e4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f003 0303 	and.w	r3, r3, #3
 8003460:	2b01      	cmp	r3, #1
 8003462:	d005      	beq.n	8003470 <HAL_GPIO_Init+0x40>
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f003 0303 	and.w	r3, r3, #3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d130      	bne.n	80034d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	2203      	movs	r2, #3
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	43db      	mvns	r3, r3
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	4013      	ands	r3, r2
 8003486:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	4313      	orrs	r3, r2
 8003498:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034a6:	2201      	movs	r2, #1
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	43db      	mvns	r3, r3
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	4013      	ands	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	091b      	lsrs	r3, r3, #4
 80034bc:	f003 0201 	and.w	r2, r3, #1
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f003 0303 	and.w	r3, r3, #3
 80034da:	2b03      	cmp	r3, #3
 80034dc:	d017      	beq.n	800350e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	2203      	movs	r2, #3
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	43db      	mvns	r3, r3
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	4013      	ands	r3, r2
 80034f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	689a      	ldr	r2, [r3, #8]
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	4313      	orrs	r3, r2
 8003506:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d123      	bne.n	8003562 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	08da      	lsrs	r2, r3, #3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	3208      	adds	r2, #8
 8003522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003526:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	220f      	movs	r2, #15
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43db      	mvns	r3, r3
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	4013      	ands	r3, r2
 800353c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	691a      	ldr	r2, [r3, #16]
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f003 0307 	and.w	r3, r3, #7
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	4313      	orrs	r3, r2
 8003552:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	08da      	lsrs	r2, r3, #3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3208      	adds	r2, #8
 800355c:	6939      	ldr	r1, [r7, #16]
 800355e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	2203      	movs	r2, #3
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	43db      	mvns	r3, r3
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	4013      	ands	r3, r2
 8003578:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f003 0203 	and.w	r2, r3, #3
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	4313      	orrs	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 80a0 	beq.w	80036e4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035a4:	4b58      	ldr	r3, [pc, #352]	; (8003708 <HAL_GPIO_Init+0x2d8>)
 80035a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035a8:	4a57      	ldr	r2, [pc, #348]	; (8003708 <HAL_GPIO_Init+0x2d8>)
 80035aa:	f043 0301 	orr.w	r3, r3, #1
 80035ae:	6613      	str	r3, [r2, #96]	; 0x60
 80035b0:	4b55      	ldr	r3, [pc, #340]	; (8003708 <HAL_GPIO_Init+0x2d8>)
 80035b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	60bb      	str	r3, [r7, #8]
 80035ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80035bc:	4a53      	ldr	r2, [pc, #332]	; (800370c <HAL_GPIO_Init+0x2dc>)
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	089b      	lsrs	r3, r3, #2
 80035c2:	3302      	adds	r3, #2
 80035c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f003 0303 	and.w	r3, r3, #3
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	220f      	movs	r2, #15
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	43db      	mvns	r3, r3
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4013      	ands	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80035e6:	d019      	beq.n	800361c <HAL_GPIO_Init+0x1ec>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a49      	ldr	r2, [pc, #292]	; (8003710 <HAL_GPIO_Init+0x2e0>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d013      	beq.n	8003618 <HAL_GPIO_Init+0x1e8>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a48      	ldr	r2, [pc, #288]	; (8003714 <HAL_GPIO_Init+0x2e4>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d00d      	beq.n	8003614 <HAL_GPIO_Init+0x1e4>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a47      	ldr	r2, [pc, #284]	; (8003718 <HAL_GPIO_Init+0x2e8>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d007      	beq.n	8003610 <HAL_GPIO_Init+0x1e0>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a46      	ldr	r2, [pc, #280]	; (800371c <HAL_GPIO_Init+0x2ec>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d101      	bne.n	800360c <HAL_GPIO_Init+0x1dc>
 8003608:	2304      	movs	r3, #4
 800360a:	e008      	b.n	800361e <HAL_GPIO_Init+0x1ee>
 800360c:	2307      	movs	r3, #7
 800360e:	e006      	b.n	800361e <HAL_GPIO_Init+0x1ee>
 8003610:	2303      	movs	r3, #3
 8003612:	e004      	b.n	800361e <HAL_GPIO_Init+0x1ee>
 8003614:	2302      	movs	r3, #2
 8003616:	e002      	b.n	800361e <HAL_GPIO_Init+0x1ee>
 8003618:	2301      	movs	r3, #1
 800361a:	e000      	b.n	800361e <HAL_GPIO_Init+0x1ee>
 800361c:	2300      	movs	r3, #0
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	f002 0203 	and.w	r2, r2, #3
 8003624:	0092      	lsls	r2, r2, #2
 8003626:	4093      	lsls	r3, r2
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	4313      	orrs	r3, r2
 800362c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800362e:	4937      	ldr	r1, [pc, #220]	; (800370c <HAL_GPIO_Init+0x2dc>)
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	089b      	lsrs	r3, r3, #2
 8003634:	3302      	adds	r3, #2
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800363c:	4b38      	ldr	r3, [pc, #224]	; (8003720 <HAL_GPIO_Init+0x2f0>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	43db      	mvns	r3, r3
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	4013      	ands	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	4313      	orrs	r3, r2
 800365e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003660:	4a2f      	ldr	r2, [pc, #188]	; (8003720 <HAL_GPIO_Init+0x2f0>)
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003666:	4b2e      	ldr	r3, [pc, #184]	; (8003720 <HAL_GPIO_Init+0x2f0>)
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	43db      	mvns	r3, r3
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	4013      	ands	r3, r2
 8003674:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4313      	orrs	r3, r2
 8003688:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800368a:	4a25      	ldr	r2, [pc, #148]	; (8003720 <HAL_GPIO_Init+0x2f0>)
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003690:	4b23      	ldr	r3, [pc, #140]	; (8003720 <HAL_GPIO_Init+0x2f0>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	43db      	mvns	r3, r3
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	4013      	ands	r3, r2
 800369e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036b4:	4a1a      	ldr	r2, [pc, #104]	; (8003720 <HAL_GPIO_Init+0x2f0>)
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80036ba:	4b19      	ldr	r3, [pc, #100]	; (8003720 <HAL_GPIO_Init+0x2f0>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	43db      	mvns	r3, r3
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	4013      	ands	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4313      	orrs	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036de:	4a10      	ldr	r2, [pc, #64]	; (8003720 <HAL_GPIO_Init+0x2f0>)
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	3301      	adds	r3, #1
 80036e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	fa22 f303 	lsr.w	r3, r2, r3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f47f aea3 	bne.w	8003440 <HAL_GPIO_Init+0x10>
  }
}
 80036fa:	bf00      	nop
 80036fc:	bf00      	nop
 80036fe:	371c      	adds	r7, #28
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr
 8003708:	40021000 	.word	0x40021000
 800370c:	40010000 	.word	0x40010000
 8003710:	48000400 	.word	0x48000400
 8003714:	48000800 	.word	0x48000800
 8003718:	48000c00 	.word	0x48000c00
 800371c:	48001000 	.word	0x48001000
 8003720:	40010400 	.word	0x40010400

08003724 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	460b      	mov	r3, r1
 800372e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	691a      	ldr	r2, [r3, #16]
 8003734:	887b      	ldrh	r3, [r7, #2]
 8003736:	4013      	ands	r3, r2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d002      	beq.n	8003742 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800373c:	2301      	movs	r3, #1
 800373e:	73fb      	strb	r3, [r7, #15]
 8003740:	e001      	b.n	8003746 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003742:	2300      	movs	r3, #0
 8003744:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003746:	7bfb      	ldrb	r3, [r7, #15]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	460b      	mov	r3, r1
 800375e:	807b      	strh	r3, [r7, #2]
 8003760:	4613      	mov	r3, r2
 8003762:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003764:	787b      	ldrb	r3, [r7, #1]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800376a:	887a      	ldrh	r2, [r7, #2]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003770:	e002      	b.n	8003778 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003772:	887a      	ldrh	r2, [r7, #2]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	4603      	mov	r3, r0
 800378c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800378e:	4b08      	ldr	r3, [pc, #32]	; (80037b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003790:	695a      	ldr	r2, [r3, #20]
 8003792:	88fb      	ldrh	r3, [r7, #6]
 8003794:	4013      	ands	r3, r2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d006      	beq.n	80037a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800379a:	4a05      	ldr	r2, [pc, #20]	; (80037b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800379c:	88fb      	ldrh	r3, [r7, #6]
 800379e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037a0:	88fb      	ldrh	r3, [r7, #6]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fc ffa4 	bl	80006f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80037a8:	bf00      	nop
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40010400 	.word	0x40010400

080037b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80037b8:	4b04      	ldr	r3, [pc, #16]	; (80037cc <HAL_PWREx_GetVoltageRange+0x18>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	40007000 	.word	0x40007000

080037d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037de:	d130      	bne.n	8003842 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80037e0:	4b23      	ldr	r3, [pc, #140]	; (8003870 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037ec:	d038      	beq.n	8003860 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037ee:	4b20      	ldr	r3, [pc, #128]	; (8003870 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037f6:	4a1e      	ldr	r2, [pc, #120]	; (8003870 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037fe:	4b1d      	ldr	r3, [pc, #116]	; (8003874 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2232      	movs	r2, #50	; 0x32
 8003804:	fb02 f303 	mul.w	r3, r2, r3
 8003808:	4a1b      	ldr	r2, [pc, #108]	; (8003878 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800380a:	fba2 2303 	umull	r2, r3, r2, r3
 800380e:	0c9b      	lsrs	r3, r3, #18
 8003810:	3301      	adds	r3, #1
 8003812:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003814:	e002      	b.n	800381c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	3b01      	subs	r3, #1
 800381a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800381c:	4b14      	ldr	r3, [pc, #80]	; (8003870 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003828:	d102      	bne.n	8003830 <HAL_PWREx_ControlVoltageScaling+0x60>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1f2      	bne.n	8003816 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003830:	4b0f      	ldr	r3, [pc, #60]	; (8003870 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800383c:	d110      	bne.n	8003860 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e00f      	b.n	8003862 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003842:	4b0b      	ldr	r3, [pc, #44]	; (8003870 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800384a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800384e:	d007      	beq.n	8003860 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003850:	4b07      	ldr	r3, [pc, #28]	; (8003870 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003858:	4a05      	ldr	r2, [pc, #20]	; (8003870 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800385a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800385e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3714      	adds	r7, #20
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	40007000 	.word	0x40007000
 8003874:	2000001c 	.word	0x2000001c
 8003878:	431bde83 	.word	0x431bde83

0800387c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b088      	sub	sp, #32
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d102      	bne.n	8003890 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	f000 bc02 	b.w	8004094 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003890:	4b96      	ldr	r3, [pc, #600]	; (8003aec <HAL_RCC_OscConfig+0x270>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f003 030c 	and.w	r3, r3, #12
 8003898:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800389a:	4b94      	ldr	r3, [pc, #592]	; (8003aec <HAL_RCC_OscConfig+0x270>)
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	f003 0303 	and.w	r3, r3, #3
 80038a2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0310 	and.w	r3, r3, #16
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 80e4 	beq.w	8003a7a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d007      	beq.n	80038c8 <HAL_RCC_OscConfig+0x4c>
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	2b0c      	cmp	r3, #12
 80038bc:	f040 808b 	bne.w	80039d6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	f040 8087 	bne.w	80039d6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038c8:	4b88      	ldr	r3, [pc, #544]	; (8003aec <HAL_RCC_OscConfig+0x270>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <HAL_RCC_OscConfig+0x64>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e3d9      	b.n	8004094 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a1a      	ldr	r2, [r3, #32]
 80038e4:	4b81      	ldr	r3, [pc, #516]	; (8003aec <HAL_RCC_OscConfig+0x270>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0308 	and.w	r3, r3, #8
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d004      	beq.n	80038fa <HAL_RCC_OscConfig+0x7e>
 80038f0:	4b7e      	ldr	r3, [pc, #504]	; (8003aec <HAL_RCC_OscConfig+0x270>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038f8:	e005      	b.n	8003906 <HAL_RCC_OscConfig+0x8a>
 80038fa:	4b7c      	ldr	r3, [pc, #496]	; (8003aec <HAL_RCC_OscConfig+0x270>)
 80038fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003900:	091b      	lsrs	r3, r3, #4
 8003902:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003906:	4293      	cmp	r3, r2
 8003908:	d223      	bcs.n	8003952 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	4618      	mov	r0, r3
 8003910:	f000 fd8c 	bl	800442c <RCC_SetFlashLatencyFromMSIRange>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e3ba      	b.n	8004094 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800391e:	4b73      	ldr	r3, [pc, #460]	; (8003aec <HAL_RCC_OscConfig+0x270>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a72      	ldr	r2, [pc, #456]	; (8003aec <HAL_RCC_OscConfig+0x270>)
 8003924:	f043 0308 	orr.w	r3, r3, #8
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	4b70      	ldr	r3, [pc, #448]	; (8003aec <HAL_RCC_OscConfig+0x270>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	496d      	ldr	r1, [pc, #436]	; (8003aec <HAL_RCC_OscConfig+0x270>)
 8003938:	4313      	orrs	r3, r2
 800393a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800393c:	4b6b      	ldr	r3, [pc, #428]	; (8003aec <HAL_RCC_OscConfig+0x270>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	69db      	ldr	r3, [r3, #28]
 8003948:	021b      	lsls	r3, r3, #8
 800394a:	4968      	ldr	r1, [pc, #416]	; (8003aec <HAL_RCC_OscConfig+0x270>)
 800394c:	4313      	orrs	r3, r2
 800394e:	604b      	str	r3, [r1, #4]
 8003950:	e025      	b.n	800399e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003952:	4b66      	ldr	r3, [pc, #408]	; (8003aec <HAL_RCC_OscConfig+0x270>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a65      	ldr	r2, [pc, #404]	; (8003aec <HAL_RCC_OscConfig+0x270>)
 8003958:	f043 0308 	orr.w	r3, r3, #8
 800395c:	6013      	str	r3, [r2, #0]
 800395e:	4b63      	ldr	r3, [pc, #396]	; (8003aec <HAL_RCC_OscConfig+0x270>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	4960      	ldr	r1, [pc, #384]	; (8003aec <HAL_RCC_OscConfig+0x270>)
 800396c:	4313      	orrs	r3, r2
 800396e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003970:	4b5e      	ldr	r3, [pc, #376]	; (8003aec <HAL_RCC_OscConfig+0x270>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	69db      	ldr	r3, [r3, #28]
 800397c:	021b      	lsls	r3, r3, #8
 800397e:	495b      	ldr	r1, [pc, #364]	; (8003aec <HAL_RCC_OscConfig+0x270>)
 8003980:	4313      	orrs	r3, r2
 8003982:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d109      	bne.n	800399e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	4618      	mov	r0, r3
 8003990:	f000 fd4c 	bl	800442c <RCC_SetFlashLatencyFromMSIRange>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e37a      	b.n	8004094 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800399e:	f000 fc81 	bl	80042a4 <HAL_RCC_GetSysClockFreq>
 80039a2:	4602      	mov	r2, r0
 80039a4:	4b51      	ldr	r3, [pc, #324]	; (8003aec <HAL_RCC_OscConfig+0x270>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	091b      	lsrs	r3, r3, #4
 80039aa:	f003 030f 	and.w	r3, r3, #15
 80039ae:	4950      	ldr	r1, [pc, #320]	; (8003af0 <HAL_RCC_OscConfig+0x274>)
 80039b0:	5ccb      	ldrb	r3, [r1, r3]
 80039b2:	f003 031f 	and.w	r3, r3, #31
 80039b6:	fa22 f303 	lsr.w	r3, r2, r3
 80039ba:	4a4e      	ldr	r2, [pc, #312]	; (8003af4 <HAL_RCC_OscConfig+0x278>)
 80039bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80039be:	4b4e      	ldr	r3, [pc, #312]	; (8003af8 <HAL_RCC_OscConfig+0x27c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fd feac 	bl	8001720 <HAL_InitTick>
 80039c8:	4603      	mov	r3, r0
 80039ca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80039cc:	7bfb      	ldrb	r3, [r7, #15]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d052      	beq.n	8003a78 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80039d2:	7bfb      	ldrb	r3, [r7, #15]
 80039d4:	e35e      	b.n	8004094 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d032      	beq.n	8003a44 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80039de:	4b43      	ldr	r3, [pc, #268]	; (8003aec <HAL_RCC_OscConfig+0x270>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a42      	ldr	r2, [pc, #264]	; (8003aec <HAL_RCC_OscConfig+0x270>)
 80039e4:	f043 0301 	orr.w	r3, r3, #1
 80039e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039ea:	f7fd fee9 	bl	80017c0 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039f2:	f7fd fee5 	bl	80017c0 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e347      	b.n	8004094 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a04:	4b39      	ldr	r3, [pc, #228]	; (8003aec <HAL_RCC_OscConfig+0x270>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0f0      	beq.n	80039f2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a10:	4b36      	ldr	r3, [pc, #216]	; (8003aec <HAL_RCC_OscConfig+0x270>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a35      	ldr	r2, [pc, #212]	; (8003aec <HAL_RCC_OscConfig+0x270>)
 8003a16:	f043 0308 	orr.w	r3, r3, #8
 8003a1a:	6013      	str	r3, [r2, #0]
 8003a1c:	4b33      	ldr	r3, [pc, #204]	; (8003aec <HAL_RCC_OscConfig+0x270>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a1b      	ldr	r3, [r3, #32]
 8003a28:	4930      	ldr	r1, [pc, #192]	; (8003aec <HAL_RCC_OscConfig+0x270>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a2e:	4b2f      	ldr	r3, [pc, #188]	; (8003aec <HAL_RCC_OscConfig+0x270>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	021b      	lsls	r3, r3, #8
 8003a3c:	492b      	ldr	r1, [pc, #172]	; (8003aec <HAL_RCC_OscConfig+0x270>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	604b      	str	r3, [r1, #4]
 8003a42:	e01a      	b.n	8003a7a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a44:	4b29      	ldr	r3, [pc, #164]	; (8003aec <HAL_RCC_OscConfig+0x270>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a28      	ldr	r2, [pc, #160]	; (8003aec <HAL_RCC_OscConfig+0x270>)
 8003a4a:	f023 0301 	bic.w	r3, r3, #1
 8003a4e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a50:	f7fd feb6 	bl	80017c0 <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a58:	f7fd feb2 	bl	80017c0 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e314      	b.n	8004094 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a6a:	4b20      	ldr	r3, [pc, #128]	; (8003aec <HAL_RCC_OscConfig+0x270>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1f0      	bne.n	8003a58 <HAL_RCC_OscConfig+0x1dc>
 8003a76:	e000      	b.n	8003a7a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a78:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d073      	beq.n	8003b6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	d005      	beq.n	8003a98 <HAL_RCC_OscConfig+0x21c>
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	2b0c      	cmp	r3, #12
 8003a90:	d10e      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2b03      	cmp	r3, #3
 8003a96:	d10b      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a98:	4b14      	ldr	r3, [pc, #80]	; (8003aec <HAL_RCC_OscConfig+0x270>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d063      	beq.n	8003b6c <HAL_RCC_OscConfig+0x2f0>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d15f      	bne.n	8003b6c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e2f1      	b.n	8004094 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ab8:	d106      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x24c>
 8003aba:	4b0c      	ldr	r3, [pc, #48]	; (8003aec <HAL_RCC_OscConfig+0x270>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a0b      	ldr	r2, [pc, #44]	; (8003aec <HAL_RCC_OscConfig+0x270>)
 8003ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac4:	6013      	str	r3, [r2, #0]
 8003ac6:	e025      	b.n	8003b14 <HAL_RCC_OscConfig+0x298>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ad0:	d114      	bne.n	8003afc <HAL_RCC_OscConfig+0x280>
 8003ad2:	4b06      	ldr	r3, [pc, #24]	; (8003aec <HAL_RCC_OscConfig+0x270>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a05      	ldr	r2, [pc, #20]	; (8003aec <HAL_RCC_OscConfig+0x270>)
 8003ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	4b03      	ldr	r3, [pc, #12]	; (8003aec <HAL_RCC_OscConfig+0x270>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a02      	ldr	r2, [pc, #8]	; (8003aec <HAL_RCC_OscConfig+0x270>)
 8003ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae8:	6013      	str	r3, [r2, #0]
 8003aea:	e013      	b.n	8003b14 <HAL_RCC_OscConfig+0x298>
 8003aec:	40021000 	.word	0x40021000
 8003af0:	08008c3c 	.word	0x08008c3c
 8003af4:	2000001c 	.word	0x2000001c
 8003af8:	20000020 	.word	0x20000020
 8003afc:	4ba0      	ldr	r3, [pc, #640]	; (8003d80 <HAL_RCC_OscConfig+0x504>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a9f      	ldr	r2, [pc, #636]	; (8003d80 <HAL_RCC_OscConfig+0x504>)
 8003b02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b06:	6013      	str	r3, [r2, #0]
 8003b08:	4b9d      	ldr	r3, [pc, #628]	; (8003d80 <HAL_RCC_OscConfig+0x504>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a9c      	ldr	r2, [pc, #624]	; (8003d80 <HAL_RCC_OscConfig+0x504>)
 8003b0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d013      	beq.n	8003b44 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1c:	f7fd fe50 	bl	80017c0 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b24:	f7fd fe4c 	bl	80017c0 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b64      	cmp	r3, #100	; 0x64
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e2ae      	b.n	8004094 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b36:	4b92      	ldr	r3, [pc, #584]	; (8003d80 <HAL_RCC_OscConfig+0x504>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0f0      	beq.n	8003b24 <HAL_RCC_OscConfig+0x2a8>
 8003b42:	e014      	b.n	8003b6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b44:	f7fd fe3c 	bl	80017c0 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b4c:	f7fd fe38 	bl	80017c0 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b64      	cmp	r3, #100	; 0x64
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e29a      	b.n	8004094 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b5e:	4b88      	ldr	r3, [pc, #544]	; (8003d80 <HAL_RCC_OscConfig+0x504>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1f0      	bne.n	8003b4c <HAL_RCC_OscConfig+0x2d0>
 8003b6a:	e000      	b.n	8003b6e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d060      	beq.n	8003c3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	2b04      	cmp	r3, #4
 8003b7e:	d005      	beq.n	8003b8c <HAL_RCC_OscConfig+0x310>
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	2b0c      	cmp	r3, #12
 8003b84:	d119      	bne.n	8003bba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d116      	bne.n	8003bba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b8c:	4b7c      	ldr	r3, [pc, #496]	; (8003d80 <HAL_RCC_OscConfig+0x504>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d005      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x328>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e277      	b.n	8004094 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba4:	4b76      	ldr	r3, [pc, #472]	; (8003d80 <HAL_RCC_OscConfig+0x504>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	061b      	lsls	r3, r3, #24
 8003bb2:	4973      	ldr	r1, [pc, #460]	; (8003d80 <HAL_RCC_OscConfig+0x504>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bb8:	e040      	b.n	8003c3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d023      	beq.n	8003c0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bc2:	4b6f      	ldr	r3, [pc, #444]	; (8003d80 <HAL_RCC_OscConfig+0x504>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a6e      	ldr	r2, [pc, #440]	; (8003d80 <HAL_RCC_OscConfig+0x504>)
 8003bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bce:	f7fd fdf7 	bl	80017c0 <HAL_GetTick>
 8003bd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bd4:	e008      	b.n	8003be8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bd6:	f7fd fdf3 	bl	80017c0 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e255      	b.n	8004094 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003be8:	4b65      	ldr	r3, [pc, #404]	; (8003d80 <HAL_RCC_OscConfig+0x504>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0f0      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bf4:	4b62      	ldr	r3, [pc, #392]	; (8003d80 <HAL_RCC_OscConfig+0x504>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	061b      	lsls	r3, r3, #24
 8003c02:	495f      	ldr	r1, [pc, #380]	; (8003d80 <HAL_RCC_OscConfig+0x504>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	604b      	str	r3, [r1, #4]
 8003c08:	e018      	b.n	8003c3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c0a:	4b5d      	ldr	r3, [pc, #372]	; (8003d80 <HAL_RCC_OscConfig+0x504>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a5c      	ldr	r2, [pc, #368]	; (8003d80 <HAL_RCC_OscConfig+0x504>)
 8003c10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c16:	f7fd fdd3 	bl	80017c0 <HAL_GetTick>
 8003c1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c1c:	e008      	b.n	8003c30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c1e:	f7fd fdcf 	bl	80017c0 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e231      	b.n	8004094 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c30:	4b53      	ldr	r3, [pc, #332]	; (8003d80 <HAL_RCC_OscConfig+0x504>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1f0      	bne.n	8003c1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0308 	and.w	r3, r3, #8
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d03c      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d01c      	beq.n	8003c8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c50:	4b4b      	ldr	r3, [pc, #300]	; (8003d80 <HAL_RCC_OscConfig+0x504>)
 8003c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c56:	4a4a      	ldr	r2, [pc, #296]	; (8003d80 <HAL_RCC_OscConfig+0x504>)
 8003c58:	f043 0301 	orr.w	r3, r3, #1
 8003c5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c60:	f7fd fdae 	bl	80017c0 <HAL_GetTick>
 8003c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c66:	e008      	b.n	8003c7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c68:	f7fd fdaa 	bl	80017c0 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e20c      	b.n	8004094 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c7a:	4b41      	ldr	r3, [pc, #260]	; (8003d80 <HAL_RCC_OscConfig+0x504>)
 8003c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d0ef      	beq.n	8003c68 <HAL_RCC_OscConfig+0x3ec>
 8003c88:	e01b      	b.n	8003cc2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c8a:	4b3d      	ldr	r3, [pc, #244]	; (8003d80 <HAL_RCC_OscConfig+0x504>)
 8003c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c90:	4a3b      	ldr	r2, [pc, #236]	; (8003d80 <HAL_RCC_OscConfig+0x504>)
 8003c92:	f023 0301 	bic.w	r3, r3, #1
 8003c96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c9a:	f7fd fd91 	bl	80017c0 <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ca0:	e008      	b.n	8003cb4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ca2:	f7fd fd8d 	bl	80017c0 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e1ef      	b.n	8004094 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cb4:	4b32      	ldr	r3, [pc, #200]	; (8003d80 <HAL_RCC_OscConfig+0x504>)
 8003cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1ef      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0304 	and.w	r3, r3, #4
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f000 80a6 	beq.w	8003e1c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003cd4:	4b2a      	ldr	r3, [pc, #168]	; (8003d80 <HAL_RCC_OscConfig+0x504>)
 8003cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10d      	bne.n	8003cfc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ce0:	4b27      	ldr	r3, [pc, #156]	; (8003d80 <HAL_RCC_OscConfig+0x504>)
 8003ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce4:	4a26      	ldr	r2, [pc, #152]	; (8003d80 <HAL_RCC_OscConfig+0x504>)
 8003ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cea:	6593      	str	r3, [r2, #88]	; 0x58
 8003cec:	4b24      	ldr	r3, [pc, #144]	; (8003d80 <HAL_RCC_OscConfig+0x504>)
 8003cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf4:	60bb      	str	r3, [r7, #8]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cfc:	4b21      	ldr	r3, [pc, #132]	; (8003d84 <HAL_RCC_OscConfig+0x508>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d118      	bne.n	8003d3a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d08:	4b1e      	ldr	r3, [pc, #120]	; (8003d84 <HAL_RCC_OscConfig+0x508>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a1d      	ldr	r2, [pc, #116]	; (8003d84 <HAL_RCC_OscConfig+0x508>)
 8003d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d14:	f7fd fd54 	bl	80017c0 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d1c:	f7fd fd50 	bl	80017c0 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e1b2      	b.n	8004094 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d2e:	4b15      	ldr	r3, [pc, #84]	; (8003d84 <HAL_RCC_OscConfig+0x508>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0f0      	beq.n	8003d1c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d108      	bne.n	8003d54 <HAL_RCC_OscConfig+0x4d8>
 8003d42:	4b0f      	ldr	r3, [pc, #60]	; (8003d80 <HAL_RCC_OscConfig+0x504>)
 8003d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d48:	4a0d      	ldr	r2, [pc, #52]	; (8003d80 <HAL_RCC_OscConfig+0x504>)
 8003d4a:	f043 0301 	orr.w	r3, r3, #1
 8003d4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d52:	e029      	b.n	8003da8 <HAL_RCC_OscConfig+0x52c>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	2b05      	cmp	r3, #5
 8003d5a:	d115      	bne.n	8003d88 <HAL_RCC_OscConfig+0x50c>
 8003d5c:	4b08      	ldr	r3, [pc, #32]	; (8003d80 <HAL_RCC_OscConfig+0x504>)
 8003d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d62:	4a07      	ldr	r2, [pc, #28]	; (8003d80 <HAL_RCC_OscConfig+0x504>)
 8003d64:	f043 0304 	orr.w	r3, r3, #4
 8003d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d6c:	4b04      	ldr	r3, [pc, #16]	; (8003d80 <HAL_RCC_OscConfig+0x504>)
 8003d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d72:	4a03      	ldr	r2, [pc, #12]	; (8003d80 <HAL_RCC_OscConfig+0x504>)
 8003d74:	f043 0301 	orr.w	r3, r3, #1
 8003d78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d7c:	e014      	b.n	8003da8 <HAL_RCC_OscConfig+0x52c>
 8003d7e:	bf00      	nop
 8003d80:	40021000 	.word	0x40021000
 8003d84:	40007000 	.word	0x40007000
 8003d88:	4b9a      	ldr	r3, [pc, #616]	; (8003ff4 <HAL_RCC_OscConfig+0x778>)
 8003d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d8e:	4a99      	ldr	r2, [pc, #612]	; (8003ff4 <HAL_RCC_OscConfig+0x778>)
 8003d90:	f023 0301 	bic.w	r3, r3, #1
 8003d94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d98:	4b96      	ldr	r3, [pc, #600]	; (8003ff4 <HAL_RCC_OscConfig+0x778>)
 8003d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9e:	4a95      	ldr	r2, [pc, #596]	; (8003ff4 <HAL_RCC_OscConfig+0x778>)
 8003da0:	f023 0304 	bic.w	r3, r3, #4
 8003da4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d016      	beq.n	8003dde <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db0:	f7fd fd06 	bl	80017c0 <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003db6:	e00a      	b.n	8003dce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db8:	f7fd fd02 	bl	80017c0 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e162      	b.n	8004094 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dce:	4b89      	ldr	r3, [pc, #548]	; (8003ff4 <HAL_RCC_OscConfig+0x778>)
 8003dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0ed      	beq.n	8003db8 <HAL_RCC_OscConfig+0x53c>
 8003ddc:	e015      	b.n	8003e0a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dde:	f7fd fcef 	bl	80017c0 <HAL_GetTick>
 8003de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003de4:	e00a      	b.n	8003dfc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de6:	f7fd fceb 	bl	80017c0 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d901      	bls.n	8003dfc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e14b      	b.n	8004094 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dfc:	4b7d      	ldr	r3, [pc, #500]	; (8003ff4 <HAL_RCC_OscConfig+0x778>)
 8003dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1ed      	bne.n	8003de6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e0a:	7ffb      	ldrb	r3, [r7, #31]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d105      	bne.n	8003e1c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e10:	4b78      	ldr	r3, [pc, #480]	; (8003ff4 <HAL_RCC_OscConfig+0x778>)
 8003e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e14:	4a77      	ldr	r2, [pc, #476]	; (8003ff4 <HAL_RCC_OscConfig+0x778>)
 8003e16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e1a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0320 	and.w	r3, r3, #32
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d03c      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d01c      	beq.n	8003e6a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e30:	4b70      	ldr	r3, [pc, #448]	; (8003ff4 <HAL_RCC_OscConfig+0x778>)
 8003e32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e36:	4a6f      	ldr	r2, [pc, #444]	; (8003ff4 <HAL_RCC_OscConfig+0x778>)
 8003e38:	f043 0301 	orr.w	r3, r3, #1
 8003e3c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e40:	f7fd fcbe 	bl	80017c0 <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e48:	f7fd fcba 	bl	80017c0 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e11c      	b.n	8004094 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e5a:	4b66      	ldr	r3, [pc, #408]	; (8003ff4 <HAL_RCC_OscConfig+0x778>)
 8003e5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0ef      	beq.n	8003e48 <HAL_RCC_OscConfig+0x5cc>
 8003e68:	e01b      	b.n	8003ea2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e6a:	4b62      	ldr	r3, [pc, #392]	; (8003ff4 <HAL_RCC_OscConfig+0x778>)
 8003e6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e70:	4a60      	ldr	r2, [pc, #384]	; (8003ff4 <HAL_RCC_OscConfig+0x778>)
 8003e72:	f023 0301 	bic.w	r3, r3, #1
 8003e76:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e7a:	f7fd fca1 	bl	80017c0 <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e80:	e008      	b.n	8003e94 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e82:	f7fd fc9d 	bl	80017c0 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e0ff      	b.n	8004094 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e94:	4b57      	ldr	r3, [pc, #348]	; (8003ff4 <HAL_RCC_OscConfig+0x778>)
 8003e96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1ef      	bne.n	8003e82 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 80f3 	beq.w	8004092 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	f040 80c9 	bne.w	8004048 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003eb6:	4b4f      	ldr	r3, [pc, #316]	; (8003ff4 <HAL_RCC_OscConfig+0x778>)
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f003 0203 	and.w	r2, r3, #3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d12c      	bne.n	8003f24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d123      	bne.n	8003f24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d11b      	bne.n	8003f24 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d113      	bne.n	8003f24 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f06:	085b      	lsrs	r3, r3, #1
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d109      	bne.n	8003f24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	085b      	lsrs	r3, r3, #1
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d06b      	beq.n	8003ffc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	2b0c      	cmp	r3, #12
 8003f28:	d062      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f2a:	4b32      	ldr	r3, [pc, #200]	; (8003ff4 <HAL_RCC_OscConfig+0x778>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e0ac      	b.n	8004094 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f3a:	4b2e      	ldr	r3, [pc, #184]	; (8003ff4 <HAL_RCC_OscConfig+0x778>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a2d      	ldr	r2, [pc, #180]	; (8003ff4 <HAL_RCC_OscConfig+0x778>)
 8003f40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f44:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f46:	f7fd fc3b 	bl	80017c0 <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f4e:	f7fd fc37 	bl	80017c0 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e099      	b.n	8004094 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f60:	4b24      	ldr	r3, [pc, #144]	; (8003ff4 <HAL_RCC_OscConfig+0x778>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1f0      	bne.n	8003f4e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f6c:	4b21      	ldr	r3, [pc, #132]	; (8003ff4 <HAL_RCC_OscConfig+0x778>)
 8003f6e:	68da      	ldr	r2, [r3, #12]
 8003f70:	4b21      	ldr	r3, [pc, #132]	; (8003ff8 <HAL_RCC_OscConfig+0x77c>)
 8003f72:	4013      	ands	r3, r2
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f7c:	3a01      	subs	r2, #1
 8003f7e:	0112      	lsls	r2, r2, #4
 8003f80:	4311      	orrs	r1, r2
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f86:	0212      	lsls	r2, r2, #8
 8003f88:	4311      	orrs	r1, r2
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f8e:	0852      	lsrs	r2, r2, #1
 8003f90:	3a01      	subs	r2, #1
 8003f92:	0552      	lsls	r2, r2, #21
 8003f94:	4311      	orrs	r1, r2
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f9a:	0852      	lsrs	r2, r2, #1
 8003f9c:	3a01      	subs	r2, #1
 8003f9e:	0652      	lsls	r2, r2, #25
 8003fa0:	4311      	orrs	r1, r2
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fa6:	06d2      	lsls	r2, r2, #27
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	4912      	ldr	r1, [pc, #72]	; (8003ff4 <HAL_RCC_OscConfig+0x778>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003fb0:	4b10      	ldr	r3, [pc, #64]	; (8003ff4 <HAL_RCC_OscConfig+0x778>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a0f      	ldr	r2, [pc, #60]	; (8003ff4 <HAL_RCC_OscConfig+0x778>)
 8003fb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fbc:	4b0d      	ldr	r3, [pc, #52]	; (8003ff4 <HAL_RCC_OscConfig+0x778>)
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	4a0c      	ldr	r2, [pc, #48]	; (8003ff4 <HAL_RCC_OscConfig+0x778>)
 8003fc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fc6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fc8:	f7fd fbfa 	bl	80017c0 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd0:	f7fd fbf6 	bl	80017c0 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e058      	b.n	8004094 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fe2:	4b04      	ldr	r3, [pc, #16]	; (8003ff4 <HAL_RCC_OscConfig+0x778>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0f0      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fee:	e050      	b.n	8004092 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e04f      	b.n	8004094 <HAL_RCC_OscConfig+0x818>
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ffc:	4b27      	ldr	r3, [pc, #156]	; (800409c <HAL_RCC_OscConfig+0x820>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d144      	bne.n	8004092 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004008:	4b24      	ldr	r3, [pc, #144]	; (800409c <HAL_RCC_OscConfig+0x820>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a23      	ldr	r2, [pc, #140]	; (800409c <HAL_RCC_OscConfig+0x820>)
 800400e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004012:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004014:	4b21      	ldr	r3, [pc, #132]	; (800409c <HAL_RCC_OscConfig+0x820>)
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	4a20      	ldr	r2, [pc, #128]	; (800409c <HAL_RCC_OscConfig+0x820>)
 800401a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800401e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004020:	f7fd fbce 	bl	80017c0 <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004028:	f7fd fbca 	bl	80017c0 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e02c      	b.n	8004094 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800403a:	4b18      	ldr	r3, [pc, #96]	; (800409c <HAL_RCC_OscConfig+0x820>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0f0      	beq.n	8004028 <HAL_RCC_OscConfig+0x7ac>
 8004046:	e024      	b.n	8004092 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	2b0c      	cmp	r3, #12
 800404c:	d01f      	beq.n	800408e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800404e:	4b13      	ldr	r3, [pc, #76]	; (800409c <HAL_RCC_OscConfig+0x820>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a12      	ldr	r2, [pc, #72]	; (800409c <HAL_RCC_OscConfig+0x820>)
 8004054:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004058:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405a:	f7fd fbb1 	bl	80017c0 <HAL_GetTick>
 800405e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004060:	e008      	b.n	8004074 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004062:	f7fd fbad 	bl	80017c0 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d901      	bls.n	8004074 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e00f      	b.n	8004094 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004074:	4b09      	ldr	r3, [pc, #36]	; (800409c <HAL_RCC_OscConfig+0x820>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1f0      	bne.n	8004062 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004080:	4b06      	ldr	r3, [pc, #24]	; (800409c <HAL_RCC_OscConfig+0x820>)
 8004082:	68da      	ldr	r2, [r3, #12]
 8004084:	4905      	ldr	r1, [pc, #20]	; (800409c <HAL_RCC_OscConfig+0x820>)
 8004086:	4b06      	ldr	r3, [pc, #24]	; (80040a0 <HAL_RCC_OscConfig+0x824>)
 8004088:	4013      	ands	r3, r2
 800408a:	60cb      	str	r3, [r1, #12]
 800408c:	e001      	b.n	8004092 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e000      	b.n	8004094 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3720      	adds	r7, #32
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40021000 	.word	0x40021000
 80040a0:	feeefffc 	.word	0xfeeefffc

080040a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d101      	bne.n	80040b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e0e7      	b.n	8004288 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040b8:	4b75      	ldr	r3, [pc, #468]	; (8004290 <HAL_RCC_ClockConfig+0x1ec>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0307 	and.w	r3, r3, #7
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d910      	bls.n	80040e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040c6:	4b72      	ldr	r3, [pc, #456]	; (8004290 <HAL_RCC_ClockConfig+0x1ec>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f023 0207 	bic.w	r2, r3, #7
 80040ce:	4970      	ldr	r1, [pc, #448]	; (8004290 <HAL_RCC_ClockConfig+0x1ec>)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040d6:	4b6e      	ldr	r3, [pc, #440]	; (8004290 <HAL_RCC_ClockConfig+0x1ec>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0307 	and.w	r3, r3, #7
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d001      	beq.n	80040e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e0cf      	b.n	8004288 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d010      	beq.n	8004116 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	4b66      	ldr	r3, [pc, #408]	; (8004294 <HAL_RCC_ClockConfig+0x1f0>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004100:	429a      	cmp	r2, r3
 8004102:	d908      	bls.n	8004116 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004104:	4b63      	ldr	r3, [pc, #396]	; (8004294 <HAL_RCC_ClockConfig+0x1f0>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	4960      	ldr	r1, [pc, #384]	; (8004294 <HAL_RCC_ClockConfig+0x1f0>)
 8004112:	4313      	orrs	r3, r2
 8004114:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d04c      	beq.n	80041bc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2b03      	cmp	r3, #3
 8004128:	d107      	bne.n	800413a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800412a:	4b5a      	ldr	r3, [pc, #360]	; (8004294 <HAL_RCC_ClockConfig+0x1f0>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d121      	bne.n	800417a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e0a6      	b.n	8004288 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2b02      	cmp	r3, #2
 8004140:	d107      	bne.n	8004152 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004142:	4b54      	ldr	r3, [pc, #336]	; (8004294 <HAL_RCC_ClockConfig+0x1f0>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d115      	bne.n	800417a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e09a      	b.n	8004288 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d107      	bne.n	800416a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800415a:	4b4e      	ldr	r3, [pc, #312]	; (8004294 <HAL_RCC_ClockConfig+0x1f0>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d109      	bne.n	800417a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e08e      	b.n	8004288 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800416a:	4b4a      	ldr	r3, [pc, #296]	; (8004294 <HAL_RCC_ClockConfig+0x1f0>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e086      	b.n	8004288 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800417a:	4b46      	ldr	r3, [pc, #280]	; (8004294 <HAL_RCC_ClockConfig+0x1f0>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f023 0203 	bic.w	r2, r3, #3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	4943      	ldr	r1, [pc, #268]	; (8004294 <HAL_RCC_ClockConfig+0x1f0>)
 8004188:	4313      	orrs	r3, r2
 800418a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800418c:	f7fd fb18 	bl	80017c0 <HAL_GetTick>
 8004190:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004192:	e00a      	b.n	80041aa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004194:	f7fd fb14 	bl	80017c0 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e06e      	b.n	8004288 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041aa:	4b3a      	ldr	r3, [pc, #232]	; (8004294 <HAL_RCC_ClockConfig+0x1f0>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f003 020c 	and.w	r2, r3, #12
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d1eb      	bne.n	8004194 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d010      	beq.n	80041ea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	4b31      	ldr	r3, [pc, #196]	; (8004294 <HAL_RCC_ClockConfig+0x1f0>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d208      	bcs.n	80041ea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041d8:	4b2e      	ldr	r3, [pc, #184]	; (8004294 <HAL_RCC_ClockConfig+0x1f0>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	492b      	ldr	r1, [pc, #172]	; (8004294 <HAL_RCC_ClockConfig+0x1f0>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041ea:	4b29      	ldr	r3, [pc, #164]	; (8004290 <HAL_RCC_ClockConfig+0x1ec>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d210      	bcs.n	800421a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f8:	4b25      	ldr	r3, [pc, #148]	; (8004290 <HAL_RCC_ClockConfig+0x1ec>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f023 0207 	bic.w	r2, r3, #7
 8004200:	4923      	ldr	r1, [pc, #140]	; (8004290 <HAL_RCC_ClockConfig+0x1ec>)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	4313      	orrs	r3, r2
 8004206:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004208:	4b21      	ldr	r3, [pc, #132]	; (8004290 <HAL_RCC_ClockConfig+0x1ec>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	683a      	ldr	r2, [r7, #0]
 8004212:	429a      	cmp	r2, r3
 8004214:	d001      	beq.n	800421a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e036      	b.n	8004288 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0304 	and.w	r3, r3, #4
 8004222:	2b00      	cmp	r3, #0
 8004224:	d008      	beq.n	8004238 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004226:	4b1b      	ldr	r3, [pc, #108]	; (8004294 <HAL_RCC_ClockConfig+0x1f0>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	4918      	ldr	r1, [pc, #96]	; (8004294 <HAL_RCC_ClockConfig+0x1f0>)
 8004234:	4313      	orrs	r3, r2
 8004236:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0308 	and.w	r3, r3, #8
 8004240:	2b00      	cmp	r3, #0
 8004242:	d009      	beq.n	8004258 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004244:	4b13      	ldr	r3, [pc, #76]	; (8004294 <HAL_RCC_ClockConfig+0x1f0>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	00db      	lsls	r3, r3, #3
 8004252:	4910      	ldr	r1, [pc, #64]	; (8004294 <HAL_RCC_ClockConfig+0x1f0>)
 8004254:	4313      	orrs	r3, r2
 8004256:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004258:	f000 f824 	bl	80042a4 <HAL_RCC_GetSysClockFreq>
 800425c:	4602      	mov	r2, r0
 800425e:	4b0d      	ldr	r3, [pc, #52]	; (8004294 <HAL_RCC_ClockConfig+0x1f0>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	091b      	lsrs	r3, r3, #4
 8004264:	f003 030f 	and.w	r3, r3, #15
 8004268:	490b      	ldr	r1, [pc, #44]	; (8004298 <HAL_RCC_ClockConfig+0x1f4>)
 800426a:	5ccb      	ldrb	r3, [r1, r3]
 800426c:	f003 031f 	and.w	r3, r3, #31
 8004270:	fa22 f303 	lsr.w	r3, r2, r3
 8004274:	4a09      	ldr	r2, [pc, #36]	; (800429c <HAL_RCC_ClockConfig+0x1f8>)
 8004276:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004278:	4b09      	ldr	r3, [pc, #36]	; (80042a0 <HAL_RCC_ClockConfig+0x1fc>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4618      	mov	r0, r3
 800427e:	f7fd fa4f 	bl	8001720 <HAL_InitTick>
 8004282:	4603      	mov	r3, r0
 8004284:	72fb      	strb	r3, [r7, #11]

  return status;
 8004286:	7afb      	ldrb	r3, [r7, #11]
}
 8004288:	4618      	mov	r0, r3
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	40022000 	.word	0x40022000
 8004294:	40021000 	.word	0x40021000
 8004298:	08008c3c 	.word	0x08008c3c
 800429c:	2000001c 	.word	0x2000001c
 80042a0:	20000020 	.word	0x20000020

080042a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b089      	sub	sp, #36	; 0x24
 80042a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80042aa:	2300      	movs	r3, #0
 80042ac:	61fb      	str	r3, [r7, #28]
 80042ae:	2300      	movs	r3, #0
 80042b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042b2:	4b3e      	ldr	r3, [pc, #248]	; (80043ac <HAL_RCC_GetSysClockFreq+0x108>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 030c 	and.w	r3, r3, #12
 80042ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042bc:	4b3b      	ldr	r3, [pc, #236]	; (80043ac <HAL_RCC_GetSysClockFreq+0x108>)
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	f003 0303 	and.w	r3, r3, #3
 80042c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d005      	beq.n	80042d8 <HAL_RCC_GetSysClockFreq+0x34>
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	2b0c      	cmp	r3, #12
 80042d0:	d121      	bne.n	8004316 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d11e      	bne.n	8004316 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80042d8:	4b34      	ldr	r3, [pc, #208]	; (80043ac <HAL_RCC_GetSysClockFreq+0x108>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0308 	and.w	r3, r3, #8
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d107      	bne.n	80042f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80042e4:	4b31      	ldr	r3, [pc, #196]	; (80043ac <HAL_RCC_GetSysClockFreq+0x108>)
 80042e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042ea:	0a1b      	lsrs	r3, r3, #8
 80042ec:	f003 030f 	and.w	r3, r3, #15
 80042f0:	61fb      	str	r3, [r7, #28]
 80042f2:	e005      	b.n	8004300 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80042f4:	4b2d      	ldr	r3, [pc, #180]	; (80043ac <HAL_RCC_GetSysClockFreq+0x108>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	091b      	lsrs	r3, r3, #4
 80042fa:	f003 030f 	and.w	r3, r3, #15
 80042fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004300:	4a2b      	ldr	r2, [pc, #172]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004308:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d10d      	bne.n	800432c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004314:	e00a      	b.n	800432c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	2b04      	cmp	r3, #4
 800431a:	d102      	bne.n	8004322 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800431c:	4b25      	ldr	r3, [pc, #148]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800431e:	61bb      	str	r3, [r7, #24]
 8004320:	e004      	b.n	800432c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	2b08      	cmp	r3, #8
 8004326:	d101      	bne.n	800432c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004328:	4b23      	ldr	r3, [pc, #140]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800432a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	2b0c      	cmp	r3, #12
 8004330:	d134      	bne.n	800439c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004332:	4b1e      	ldr	r3, [pc, #120]	; (80043ac <HAL_RCC_GetSysClockFreq+0x108>)
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	2b02      	cmp	r3, #2
 8004340:	d003      	beq.n	800434a <HAL_RCC_GetSysClockFreq+0xa6>
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	2b03      	cmp	r3, #3
 8004346:	d003      	beq.n	8004350 <HAL_RCC_GetSysClockFreq+0xac>
 8004348:	e005      	b.n	8004356 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800434a:	4b1a      	ldr	r3, [pc, #104]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800434c:	617b      	str	r3, [r7, #20]
      break;
 800434e:	e005      	b.n	800435c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004350:	4b19      	ldr	r3, [pc, #100]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004352:	617b      	str	r3, [r7, #20]
      break;
 8004354:	e002      	b.n	800435c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	617b      	str	r3, [r7, #20]
      break;
 800435a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800435c:	4b13      	ldr	r3, [pc, #76]	; (80043ac <HAL_RCC_GetSysClockFreq+0x108>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	091b      	lsrs	r3, r3, #4
 8004362:	f003 0307 	and.w	r3, r3, #7
 8004366:	3301      	adds	r3, #1
 8004368:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800436a:	4b10      	ldr	r3, [pc, #64]	; (80043ac <HAL_RCC_GetSysClockFreq+0x108>)
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	0a1b      	lsrs	r3, r3, #8
 8004370:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	fb03 f202 	mul.w	r2, r3, r2
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004380:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004382:	4b0a      	ldr	r3, [pc, #40]	; (80043ac <HAL_RCC_GetSysClockFreq+0x108>)
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	0e5b      	lsrs	r3, r3, #25
 8004388:	f003 0303 	and.w	r3, r3, #3
 800438c:	3301      	adds	r3, #1
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	fbb2 f3f3 	udiv	r3, r2, r3
 800439a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800439c:	69bb      	ldr	r3, [r7, #24]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3724      	adds	r7, #36	; 0x24
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	40021000 	.word	0x40021000
 80043b0:	08008c54 	.word	0x08008c54
 80043b4:	00f42400 	.word	0x00f42400
 80043b8:	007a1200 	.word	0x007a1200

080043bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c0:	4b03      	ldr	r3, [pc, #12]	; (80043d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80043c2:	681b      	ldr	r3, [r3, #0]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	2000001c 	.word	0x2000001c

080043d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80043d8:	f7ff fff0 	bl	80043bc <HAL_RCC_GetHCLKFreq>
 80043dc:	4602      	mov	r2, r0
 80043de:	4b06      	ldr	r3, [pc, #24]	; (80043f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	0a1b      	lsrs	r3, r3, #8
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	4904      	ldr	r1, [pc, #16]	; (80043fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80043ea:	5ccb      	ldrb	r3, [r1, r3]
 80043ec:	f003 031f 	and.w	r3, r3, #31
 80043f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	40021000 	.word	0x40021000
 80043fc:	08008c4c 	.word	0x08008c4c

08004400 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004404:	f7ff ffda 	bl	80043bc <HAL_RCC_GetHCLKFreq>
 8004408:	4602      	mov	r2, r0
 800440a:	4b06      	ldr	r3, [pc, #24]	; (8004424 <HAL_RCC_GetPCLK2Freq+0x24>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	0adb      	lsrs	r3, r3, #11
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	4904      	ldr	r1, [pc, #16]	; (8004428 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004416:	5ccb      	ldrb	r3, [r1, r3]
 8004418:	f003 031f 	and.w	r3, r3, #31
 800441c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004420:	4618      	mov	r0, r3
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40021000 	.word	0x40021000
 8004428:	08008c4c 	.word	0x08008c4c

0800442c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004434:	2300      	movs	r3, #0
 8004436:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004438:	4b2a      	ldr	r3, [pc, #168]	; (80044e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800443a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d003      	beq.n	800444c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004444:	f7ff f9b6 	bl	80037b4 <HAL_PWREx_GetVoltageRange>
 8004448:	6178      	str	r0, [r7, #20]
 800444a:	e014      	b.n	8004476 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800444c:	4b25      	ldr	r3, [pc, #148]	; (80044e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800444e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004450:	4a24      	ldr	r2, [pc, #144]	; (80044e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004456:	6593      	str	r3, [r2, #88]	; 0x58
 8004458:	4b22      	ldr	r3, [pc, #136]	; (80044e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800445a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004460:	60fb      	str	r3, [r7, #12]
 8004462:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004464:	f7ff f9a6 	bl	80037b4 <HAL_PWREx_GetVoltageRange>
 8004468:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800446a:	4b1e      	ldr	r3, [pc, #120]	; (80044e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800446c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446e:	4a1d      	ldr	r2, [pc, #116]	; (80044e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004470:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004474:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800447c:	d10b      	bne.n	8004496 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b80      	cmp	r3, #128	; 0x80
 8004482:	d919      	bls.n	80044b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2ba0      	cmp	r3, #160	; 0xa0
 8004488:	d902      	bls.n	8004490 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800448a:	2302      	movs	r3, #2
 800448c:	613b      	str	r3, [r7, #16]
 800448e:	e013      	b.n	80044b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004490:	2301      	movs	r3, #1
 8004492:	613b      	str	r3, [r7, #16]
 8004494:	e010      	b.n	80044b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b80      	cmp	r3, #128	; 0x80
 800449a:	d902      	bls.n	80044a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800449c:	2303      	movs	r3, #3
 800449e:	613b      	str	r3, [r7, #16]
 80044a0:	e00a      	b.n	80044b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b80      	cmp	r3, #128	; 0x80
 80044a6:	d102      	bne.n	80044ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044a8:	2302      	movs	r3, #2
 80044aa:	613b      	str	r3, [r7, #16]
 80044ac:	e004      	b.n	80044b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b70      	cmp	r3, #112	; 0x70
 80044b2:	d101      	bne.n	80044b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044b4:	2301      	movs	r3, #1
 80044b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80044b8:	4b0b      	ldr	r3, [pc, #44]	; (80044e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f023 0207 	bic.w	r2, r3, #7
 80044c0:	4909      	ldr	r1, [pc, #36]	; (80044e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80044c8:	4b07      	ldr	r3, [pc, #28]	; (80044e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0307 	and.w	r3, r3, #7
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d001      	beq.n	80044da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e000      	b.n	80044dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	40021000 	.word	0x40021000
 80044e8:	40022000 	.word	0x40022000

080044ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044f4:	2300      	movs	r3, #0
 80044f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044f8:	2300      	movs	r3, #0
 80044fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004504:	2b00      	cmp	r3, #0
 8004506:	d031      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800450c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004510:	d01a      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004512:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004516:	d814      	bhi.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004518:	2b00      	cmp	r3, #0
 800451a:	d009      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800451c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004520:	d10f      	bne.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004522:	4b5d      	ldr	r3, [pc, #372]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	4a5c      	ldr	r2, [pc, #368]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800452c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800452e:	e00c      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	3304      	adds	r3, #4
 8004534:	2100      	movs	r1, #0
 8004536:	4618      	mov	r0, r3
 8004538:	f000 f9f0 	bl	800491c <RCCEx_PLLSAI1_Config>
 800453c:	4603      	mov	r3, r0
 800453e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004540:	e003      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	74fb      	strb	r3, [r7, #19]
      break;
 8004546:	e000      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004548:	bf00      	nop
    }

    if(ret == HAL_OK)
 800454a:	7cfb      	ldrb	r3, [r7, #19]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10b      	bne.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004550:	4b51      	ldr	r3, [pc, #324]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004556:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455e:	494e      	ldr	r1, [pc, #312]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004560:	4313      	orrs	r3, r2
 8004562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004566:	e001      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004568:	7cfb      	ldrb	r3, [r7, #19]
 800456a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 809e 	beq.w	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800457a:	2300      	movs	r3, #0
 800457c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800457e:	4b46      	ldr	r3, [pc, #280]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800458a:	2301      	movs	r3, #1
 800458c:	e000      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800458e:	2300      	movs	r3, #0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00d      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004594:	4b40      	ldr	r3, [pc, #256]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004598:	4a3f      	ldr	r2, [pc, #252]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800459a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800459e:	6593      	str	r3, [r2, #88]	; 0x58
 80045a0:	4b3d      	ldr	r3, [pc, #244]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a8:	60bb      	str	r3, [r7, #8]
 80045aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ac:	2301      	movs	r3, #1
 80045ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045b0:	4b3a      	ldr	r3, [pc, #232]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a39      	ldr	r2, [pc, #228]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80045b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045bc:	f7fd f900 	bl	80017c0 <HAL_GetTick>
 80045c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045c2:	e009      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045c4:	f7fd f8fc 	bl	80017c0 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d902      	bls.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	74fb      	strb	r3, [r7, #19]
        break;
 80045d6:	e005      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045d8:	4b30      	ldr	r3, [pc, #192]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d0ef      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80045e4:	7cfb      	ldrb	r3, [r7, #19]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d15a      	bne.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045ea:	4b2b      	ldr	r3, [pc, #172]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d01e      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	429a      	cmp	r2, r3
 8004604:	d019      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004606:	4b24      	ldr	r3, [pc, #144]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004610:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004612:	4b21      	ldr	r3, [pc, #132]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004618:	4a1f      	ldr	r2, [pc, #124]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800461a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800461e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004622:	4b1d      	ldr	r3, [pc, #116]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004628:	4a1b      	ldr	r2, [pc, #108]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800462a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800462e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004632:	4a19      	ldr	r2, [pc, #100]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	2b00      	cmp	r3, #0
 8004642:	d016      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004644:	f7fd f8bc 	bl	80017c0 <HAL_GetTick>
 8004648:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800464a:	e00b      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800464c:	f7fd f8b8 	bl	80017c0 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	f241 3288 	movw	r2, #5000	; 0x1388
 800465a:	4293      	cmp	r3, r2
 800465c:	d902      	bls.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	74fb      	strb	r3, [r7, #19]
            break;
 8004662:	e006      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004664:	4b0c      	ldr	r3, [pc, #48]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d0ec      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004672:	7cfb      	ldrb	r3, [r7, #19]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10b      	bne.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004678:	4b07      	ldr	r3, [pc, #28]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800467a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800467e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004686:	4904      	ldr	r1, [pc, #16]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004688:	4313      	orrs	r3, r2
 800468a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800468e:	e009      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004690:	7cfb      	ldrb	r3, [r7, #19]
 8004692:	74bb      	strb	r3, [r7, #18]
 8004694:	e006      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004696:	bf00      	nop
 8004698:	40021000 	.word	0x40021000
 800469c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a0:	7cfb      	ldrb	r3, [r7, #19]
 80046a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046a4:	7c7b      	ldrb	r3, [r7, #17]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d105      	bne.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046aa:	4b9b      	ldr	r3, [pc, #620]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80046ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ae:	4a9a      	ldr	r2, [pc, #616]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80046b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00a      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046c2:	4b95      	ldr	r3, [pc, #596]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80046c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c8:	f023 0203 	bic.w	r2, r3, #3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	4991      	ldr	r1, [pc, #580]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00a      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046e4:	4b8c      	ldr	r3, [pc, #560]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80046e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ea:	f023 020c 	bic.w	r2, r3, #12
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	4989      	ldr	r1, [pc, #548]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0304 	and.w	r3, r3, #4
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004706:	4b84      	ldr	r3, [pc, #528]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004714:	4980      	ldr	r1, [pc, #512]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004716:	4313      	orrs	r3, r2
 8004718:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0320 	and.w	r3, r3, #32
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00a      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004728:	4b7b      	ldr	r3, [pc, #492]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800472a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004736:	4978      	ldr	r1, [pc, #480]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004738:	4313      	orrs	r3, r2
 800473a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800474a:	4b73      	ldr	r3, [pc, #460]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800474c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004750:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004758:	496f      	ldr	r1, [pc, #444]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800475a:	4313      	orrs	r3, r2
 800475c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00a      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800476c:	4b6a      	ldr	r3, [pc, #424]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800476e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004772:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	4967      	ldr	r1, [pc, #412]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800477c:	4313      	orrs	r3, r2
 800477e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00a      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800478e:	4b62      	ldr	r3, [pc, #392]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004794:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479c:	495e      	ldr	r1, [pc, #376]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00a      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047b0:	4b59      	ldr	r3, [pc, #356]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80047b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047be:	4956      	ldr	r1, [pc, #344]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00a      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047d2:	4b51      	ldr	r3, [pc, #324]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80047d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e0:	494d      	ldr	r1, [pc, #308]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d028      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80047f4:	4b48      	ldr	r3, [pc, #288]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80047f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004802:	4945      	ldr	r1, [pc, #276]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004804:	4313      	orrs	r3, r2
 8004806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800480e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004812:	d106      	bne.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004814:	4b40      	ldr	r3, [pc, #256]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	4a3f      	ldr	r2, [pc, #252]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800481a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800481e:	60d3      	str	r3, [r2, #12]
 8004820:	e011      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004826:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800482a:	d10c      	bne.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	3304      	adds	r3, #4
 8004830:	2101      	movs	r1, #1
 8004832:	4618      	mov	r0, r3
 8004834:	f000 f872 	bl	800491c <RCCEx_PLLSAI1_Config>
 8004838:	4603      	mov	r3, r0
 800483a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800483c:	7cfb      	ldrb	r3, [r7, #19]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8004842:	7cfb      	ldrb	r3, [r7, #19]
 8004844:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d028      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004852:	4b31      	ldr	r3, [pc, #196]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004858:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004860:	492d      	ldr	r1, [pc, #180]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004862:	4313      	orrs	r3, r2
 8004864:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800486c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004870:	d106      	bne.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004872:	4b29      	ldr	r3, [pc, #164]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	4a28      	ldr	r2, [pc, #160]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004878:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800487c:	60d3      	str	r3, [r2, #12]
 800487e:	e011      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004884:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004888:	d10c      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	3304      	adds	r3, #4
 800488e:	2101      	movs	r1, #1
 8004890:	4618      	mov	r0, r3
 8004892:	f000 f843 	bl	800491c <RCCEx_PLLSAI1_Config>
 8004896:	4603      	mov	r3, r0
 8004898:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800489a:	7cfb      	ldrb	r3, [r7, #19]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d001      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80048a0:	7cfb      	ldrb	r3, [r7, #19]
 80048a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d01c      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048b0:	4b19      	ldr	r3, [pc, #100]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80048b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048be:	4916      	ldr	r1, [pc, #88]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048ce:	d10c      	bne.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3304      	adds	r3, #4
 80048d4:	2102      	movs	r1, #2
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 f820 	bl	800491c <RCCEx_PLLSAI1_Config>
 80048dc:	4603      	mov	r3, r0
 80048de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048e0:	7cfb      	ldrb	r3, [r7, #19]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 80048e6:	7cfb      	ldrb	r3, [r7, #19]
 80048e8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048f6:	4b08      	ldr	r3, [pc, #32]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80048f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004904:	4904      	ldr	r1, [pc, #16]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004906:	4313      	orrs	r3, r2
 8004908:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800490c:	7cbb      	ldrb	r3, [r7, #18]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3718      	adds	r7, #24
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	40021000 	.word	0x40021000

0800491c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004926:	2300      	movs	r3, #0
 8004928:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800492a:	4b74      	ldr	r3, [pc, #464]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	f003 0303 	and.w	r3, r3, #3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d018      	beq.n	8004968 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004936:	4b71      	ldr	r3, [pc, #452]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	f003 0203 	and.w	r2, r3, #3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	429a      	cmp	r2, r3
 8004944:	d10d      	bne.n	8004962 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
       ||
 800494a:	2b00      	cmp	r3, #0
 800494c:	d009      	beq.n	8004962 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800494e:	4b6b      	ldr	r3, [pc, #428]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	091b      	lsrs	r3, r3, #4
 8004954:	f003 0307 	and.w	r3, r3, #7
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
       ||
 800495e:	429a      	cmp	r2, r3
 8004960:	d047      	beq.n	80049f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	73fb      	strb	r3, [r7, #15]
 8004966:	e044      	b.n	80049f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2b03      	cmp	r3, #3
 800496e:	d018      	beq.n	80049a2 <RCCEx_PLLSAI1_Config+0x86>
 8004970:	2b03      	cmp	r3, #3
 8004972:	d825      	bhi.n	80049c0 <RCCEx_PLLSAI1_Config+0xa4>
 8004974:	2b01      	cmp	r3, #1
 8004976:	d002      	beq.n	800497e <RCCEx_PLLSAI1_Config+0x62>
 8004978:	2b02      	cmp	r3, #2
 800497a:	d009      	beq.n	8004990 <RCCEx_PLLSAI1_Config+0x74>
 800497c:	e020      	b.n	80049c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800497e:	4b5f      	ldr	r3, [pc, #380]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d11d      	bne.n	80049c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800498e:	e01a      	b.n	80049c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004990:	4b5a      	ldr	r3, [pc, #360]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004998:	2b00      	cmp	r3, #0
 800499a:	d116      	bne.n	80049ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049a0:	e013      	b.n	80049ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049a2:	4b56      	ldr	r3, [pc, #344]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10f      	bne.n	80049ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049ae:	4b53      	ldr	r3, [pc, #332]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d109      	bne.n	80049ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049be:	e006      	b.n	80049ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	73fb      	strb	r3, [r7, #15]
      break;
 80049c4:	e004      	b.n	80049d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049c6:	bf00      	nop
 80049c8:	e002      	b.n	80049d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049ca:	bf00      	nop
 80049cc:	e000      	b.n	80049d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10d      	bne.n	80049f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049d6:	4b49      	ldr	r3, [pc, #292]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6819      	ldr	r1, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	011b      	lsls	r3, r3, #4
 80049ea:	430b      	orrs	r3, r1
 80049ec:	4943      	ldr	r1, [pc, #268]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049f2:	7bfb      	ldrb	r3, [r7, #15]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d17c      	bne.n	8004af2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80049f8:	4b40      	ldr	r3, [pc, #256]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a3f      	ldr	r2, [pc, #252]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 80049fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a04:	f7fc fedc 	bl	80017c0 <HAL_GetTick>
 8004a08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a0a:	e009      	b.n	8004a20 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a0c:	f7fc fed8 	bl	80017c0 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d902      	bls.n	8004a20 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	73fb      	strb	r3, [r7, #15]
        break;
 8004a1e:	e005      	b.n	8004a2c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a20:	4b36      	ldr	r3, [pc, #216]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1ef      	bne.n	8004a0c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a2c:	7bfb      	ldrb	r3, [r7, #15]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d15f      	bne.n	8004af2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d110      	bne.n	8004a5a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a38:	4b30      	ldr	r3, [pc, #192]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004a40:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6892      	ldr	r2, [r2, #8]
 8004a48:	0211      	lsls	r1, r2, #8
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	68d2      	ldr	r2, [r2, #12]
 8004a4e:	06d2      	lsls	r2, r2, #27
 8004a50:	430a      	orrs	r2, r1
 8004a52:	492a      	ldr	r1, [pc, #168]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	610b      	str	r3, [r1, #16]
 8004a58:	e027      	b.n	8004aaa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d112      	bne.n	8004a86 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a60:	4b26      	ldr	r3, [pc, #152]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004a68:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	6892      	ldr	r2, [r2, #8]
 8004a70:	0211      	lsls	r1, r2, #8
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	6912      	ldr	r2, [r2, #16]
 8004a76:	0852      	lsrs	r2, r2, #1
 8004a78:	3a01      	subs	r2, #1
 8004a7a:	0552      	lsls	r2, r2, #21
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	491f      	ldr	r1, [pc, #124]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	610b      	str	r3, [r1, #16]
 8004a84:	e011      	b.n	8004aaa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a86:	4b1d      	ldr	r3, [pc, #116]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a8e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	6892      	ldr	r2, [r2, #8]
 8004a96:	0211      	lsls	r1, r2, #8
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	6952      	ldr	r2, [r2, #20]
 8004a9c:	0852      	lsrs	r2, r2, #1
 8004a9e:	3a01      	subs	r2, #1
 8004aa0:	0652      	lsls	r2, r2, #25
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	4915      	ldr	r1, [pc, #84]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004aaa:	4b14      	ldr	r3, [pc, #80]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a13      	ldr	r2, [pc, #76]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ab0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ab4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab6:	f7fc fe83 	bl	80017c0 <HAL_GetTick>
 8004aba:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004abc:	e009      	b.n	8004ad2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004abe:	f7fc fe7f 	bl	80017c0 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d902      	bls.n	8004ad2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	73fb      	strb	r3, [r7, #15]
          break;
 8004ad0:	e005      	b.n	8004ade <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ad2:	4b0a      	ldr	r3, [pc, #40]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0ef      	beq.n	8004abe <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004ade:	7bfb      	ldrb	r3, [r7, #15]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d106      	bne.n	8004af2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ae4:	4b05      	ldr	r3, [pc, #20]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ae6:	691a      	ldr	r2, [r3, #16]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	4903      	ldr	r1, [pc, #12]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	40021000 	.word	0x40021000

08004b00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e049      	b.n	8004ba6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d106      	bne.n	8004b2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7fc fc34 	bl	8001394 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	3304      	adds	r3, #4
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4610      	mov	r0, r2
 8004b40:	f000 fd32 	bl	80055a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
	...

08004bb0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d001      	beq.n	8004bc8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e033      	b.n	8004c30 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a19      	ldr	r2, [pc, #100]	; (8004c3c <HAL_TIM_Base_Start+0x8c>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d009      	beq.n	8004bee <HAL_TIM_Base_Start+0x3e>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004be2:	d004      	beq.n	8004bee <HAL_TIM_Base_Start+0x3e>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a15      	ldr	r2, [pc, #84]	; (8004c40 <HAL_TIM_Base_Start+0x90>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d115      	bne.n	8004c1a <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	4b13      	ldr	r3, [pc, #76]	; (8004c44 <HAL_TIM_Base_Start+0x94>)
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2b06      	cmp	r3, #6
 8004bfe:	d015      	beq.n	8004c2c <HAL_TIM_Base_Start+0x7c>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c06:	d011      	beq.n	8004c2c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f042 0201 	orr.w	r2, r2, #1
 8004c16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c18:	e008      	b.n	8004c2c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f042 0201 	orr.w	r2, r2, #1
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	e000      	b.n	8004c2e <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3714      	adds	r7, #20
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr
 8004c3c:	40012c00 	.word	0x40012c00
 8004c40:	40014000 	.word	0x40014000
 8004c44:	00010007 	.word	0x00010007

08004c48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d001      	beq.n	8004c60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e03b      	b.n	8004cd8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2202      	movs	r2, #2
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68da      	ldr	r2, [r3, #12]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f042 0201 	orr.w	r2, r2, #1
 8004c76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a19      	ldr	r2, [pc, #100]	; (8004ce4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d009      	beq.n	8004c96 <HAL_TIM_Base_Start_IT+0x4e>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c8a:	d004      	beq.n	8004c96 <HAL_TIM_Base_Start_IT+0x4e>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a15      	ldr	r2, [pc, #84]	; (8004ce8 <HAL_TIM_Base_Start_IT+0xa0>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d115      	bne.n	8004cc2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689a      	ldr	r2, [r3, #8]
 8004c9c:	4b13      	ldr	r3, [pc, #76]	; (8004cec <HAL_TIM_Base_Start_IT+0xa4>)
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2b06      	cmp	r3, #6
 8004ca6:	d015      	beq.n	8004cd4 <HAL_TIM_Base_Start_IT+0x8c>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cae:	d011      	beq.n	8004cd4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 0201 	orr.w	r2, r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cc0:	e008      	b.n	8004cd4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f042 0201 	orr.w	r2, r2, #1
 8004cd0:	601a      	str	r2, [r3, #0]
 8004cd2:	e000      	b.n	8004cd6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr
 8004ce4:	40012c00 	.word	0x40012c00
 8004ce8:	40014000 	.word	0x40014000
 8004cec:	00010007 	.word	0x00010007

08004cf0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e049      	b.n	8004d96 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d106      	bne.n	8004d1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7fc fb1c 	bl	8001354 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2202      	movs	r2, #2
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	3304      	adds	r3, #4
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4610      	mov	r0, r2
 8004d30:	f000 fc3a 	bl	80055a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
	...

08004da0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d109      	bne.n	8004dc4 <HAL_TIM_PWM_Start+0x24>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	bf14      	ite	ne
 8004dbc:	2301      	movne	r3, #1
 8004dbe:	2300      	moveq	r3, #0
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	e03c      	b.n	8004e3e <HAL_TIM_PWM_Start+0x9e>
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	2b04      	cmp	r3, #4
 8004dc8:	d109      	bne.n	8004dde <HAL_TIM_PWM_Start+0x3e>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	bf14      	ite	ne
 8004dd6:	2301      	movne	r3, #1
 8004dd8:	2300      	moveq	r3, #0
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	e02f      	b.n	8004e3e <HAL_TIM_PWM_Start+0x9e>
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	2b08      	cmp	r3, #8
 8004de2:	d109      	bne.n	8004df8 <HAL_TIM_PWM_Start+0x58>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	bf14      	ite	ne
 8004df0:	2301      	movne	r3, #1
 8004df2:	2300      	moveq	r3, #0
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	e022      	b.n	8004e3e <HAL_TIM_PWM_Start+0x9e>
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	2b0c      	cmp	r3, #12
 8004dfc:	d109      	bne.n	8004e12 <HAL_TIM_PWM_Start+0x72>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	bf14      	ite	ne
 8004e0a:	2301      	movne	r3, #1
 8004e0c:	2300      	moveq	r3, #0
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	e015      	b.n	8004e3e <HAL_TIM_PWM_Start+0x9e>
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	2b10      	cmp	r3, #16
 8004e16:	d109      	bne.n	8004e2c <HAL_TIM_PWM_Start+0x8c>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	bf14      	ite	ne
 8004e24:	2301      	movne	r3, #1
 8004e26:	2300      	moveq	r3, #0
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	e008      	b.n	8004e3e <HAL_TIM_PWM_Start+0x9e>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	bf14      	ite	ne
 8004e38:	2301      	movne	r3, #1
 8004e3a:	2300      	moveq	r3, #0
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e07e      	b.n	8004f44 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d104      	bne.n	8004e56 <HAL_TIM_PWM_Start+0xb6>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e54:	e023      	b.n	8004e9e <HAL_TIM_PWM_Start+0xfe>
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2b04      	cmp	r3, #4
 8004e5a:	d104      	bne.n	8004e66 <HAL_TIM_PWM_Start+0xc6>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e64:	e01b      	b.n	8004e9e <HAL_TIM_PWM_Start+0xfe>
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	2b08      	cmp	r3, #8
 8004e6a:	d104      	bne.n	8004e76 <HAL_TIM_PWM_Start+0xd6>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2202      	movs	r2, #2
 8004e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e74:	e013      	b.n	8004e9e <HAL_TIM_PWM_Start+0xfe>
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b0c      	cmp	r3, #12
 8004e7a:	d104      	bne.n	8004e86 <HAL_TIM_PWM_Start+0xe6>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2202      	movs	r2, #2
 8004e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e84:	e00b      	b.n	8004e9e <HAL_TIM_PWM_Start+0xfe>
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b10      	cmp	r3, #16
 8004e8a:	d104      	bne.n	8004e96 <HAL_TIM_PWM_Start+0xf6>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e94:	e003      	b.n	8004e9e <HAL_TIM_PWM_Start+0xfe>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2202      	movs	r2, #2
 8004e9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	6839      	ldr	r1, [r7, #0]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 fefa 	bl	8005ca0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a26      	ldr	r2, [pc, #152]	; (8004f4c <HAL_TIM_PWM_Start+0x1ac>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d009      	beq.n	8004eca <HAL_TIM_PWM_Start+0x12a>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a25      	ldr	r2, [pc, #148]	; (8004f50 <HAL_TIM_PWM_Start+0x1b0>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d004      	beq.n	8004eca <HAL_TIM_PWM_Start+0x12a>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a23      	ldr	r2, [pc, #140]	; (8004f54 <HAL_TIM_PWM_Start+0x1b4>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d101      	bne.n	8004ece <HAL_TIM_PWM_Start+0x12e>
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e000      	b.n	8004ed0 <HAL_TIM_PWM_Start+0x130>
 8004ece:	2300      	movs	r3, #0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d007      	beq.n	8004ee4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ee2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a18      	ldr	r2, [pc, #96]	; (8004f4c <HAL_TIM_PWM_Start+0x1ac>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d009      	beq.n	8004f02 <HAL_TIM_PWM_Start+0x162>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef6:	d004      	beq.n	8004f02 <HAL_TIM_PWM_Start+0x162>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a14      	ldr	r2, [pc, #80]	; (8004f50 <HAL_TIM_PWM_Start+0x1b0>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d115      	bne.n	8004f2e <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	4b13      	ldr	r3, [pc, #76]	; (8004f58 <HAL_TIM_PWM_Start+0x1b8>)
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2b06      	cmp	r3, #6
 8004f12:	d015      	beq.n	8004f40 <HAL_TIM_PWM_Start+0x1a0>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f1a:	d011      	beq.n	8004f40 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0201 	orr.w	r2, r2, #1
 8004f2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f2c:	e008      	b.n	8004f40 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f042 0201 	orr.w	r2, r2, #1
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	e000      	b.n	8004f42 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	40012c00 	.word	0x40012c00
 8004f50:	40014000 	.word	0x40014000
 8004f54:	40014400 	.word	0x40014400
 8004f58:	00010007 	.word	0x00010007

08004f5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d122      	bne.n	8004fb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d11b      	bne.n	8004fb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f06f 0202 	mvn.w	r2, #2
 8004f88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	f003 0303 	and.w	r3, r3, #3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 fae3 	bl	800556a <HAL_TIM_IC_CaptureCallback>
 8004fa4:	e005      	b.n	8004fb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 fad5 	bl	8005556 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 fae6 	bl	800557e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	f003 0304 	and.w	r3, r3, #4
 8004fc2:	2b04      	cmp	r3, #4
 8004fc4:	d122      	bne.n	800500c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f003 0304 	and.w	r3, r3, #4
 8004fd0:	2b04      	cmp	r3, #4
 8004fd2:	d11b      	bne.n	800500c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f06f 0204 	mvn.w	r2, #4
 8004fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2202      	movs	r2, #2
 8004fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 fab9 	bl	800556a <HAL_TIM_IC_CaptureCallback>
 8004ff8:	e005      	b.n	8005006 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 faab 	bl	8005556 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 fabc 	bl	800557e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	f003 0308 	and.w	r3, r3, #8
 8005016:	2b08      	cmp	r3, #8
 8005018:	d122      	bne.n	8005060 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	f003 0308 	and.w	r3, r3, #8
 8005024:	2b08      	cmp	r3, #8
 8005026:	d11b      	bne.n	8005060 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f06f 0208 	mvn.w	r2, #8
 8005030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2204      	movs	r2, #4
 8005036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	69db      	ldr	r3, [r3, #28]
 800503e:	f003 0303 	and.w	r3, r3, #3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d003      	beq.n	800504e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 fa8f 	bl	800556a <HAL_TIM_IC_CaptureCallback>
 800504c:	e005      	b.n	800505a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 fa81 	bl	8005556 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 fa92 	bl	800557e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	f003 0310 	and.w	r3, r3, #16
 800506a:	2b10      	cmp	r3, #16
 800506c:	d122      	bne.n	80050b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	f003 0310 	and.w	r3, r3, #16
 8005078:	2b10      	cmp	r3, #16
 800507a:	d11b      	bne.n	80050b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f06f 0210 	mvn.w	r2, #16
 8005084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2208      	movs	r2, #8
 800508a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	69db      	ldr	r3, [r3, #28]
 8005092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005096:	2b00      	cmp	r3, #0
 8005098:	d003      	beq.n	80050a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 fa65 	bl	800556a <HAL_TIM_IC_CaptureCallback>
 80050a0:	e005      	b.n	80050ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 fa57 	bl	8005556 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 fa68 	bl	800557e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d10e      	bne.n	80050e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	f003 0301 	and.w	r3, r3, #1
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d107      	bne.n	80050e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f06f 0201 	mvn.w	r2, #1
 80050d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7fb fb2e 	bl	800073c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ea:	2b80      	cmp	r3, #128	; 0x80
 80050ec:	d10e      	bne.n	800510c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f8:	2b80      	cmp	r3, #128	; 0x80
 80050fa:	d107      	bne.n	800510c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 ff76 	bl	8005ff8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800511a:	d10e      	bne.n	800513a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005126:	2b80      	cmp	r3, #128	; 0x80
 8005128:	d107      	bne.n	800513a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 ff69 	bl	800600c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005144:	2b40      	cmp	r3, #64	; 0x40
 8005146:	d10e      	bne.n	8005166 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005152:	2b40      	cmp	r3, #64	; 0x40
 8005154:	d107      	bne.n	8005166 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800515e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 fa16 	bl	8005592 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	f003 0320 	and.w	r3, r3, #32
 8005170:	2b20      	cmp	r3, #32
 8005172:	d10e      	bne.n	8005192 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	f003 0320 	and.w	r3, r3, #32
 800517e:	2b20      	cmp	r3, #32
 8005180:	d107      	bne.n	8005192 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f06f 0220 	mvn.w	r2, #32
 800518a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 ff29 	bl	8005fe4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005192:	bf00      	nop
 8005194:	3708      	adds	r7, #8
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
	...

0800519c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051a8:	2300      	movs	r3, #0
 80051aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d101      	bne.n	80051ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051b6:	2302      	movs	r3, #2
 80051b8:	e0ff      	b.n	80053ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2b14      	cmp	r3, #20
 80051c6:	f200 80f0 	bhi.w	80053aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80051ca:	a201      	add	r2, pc, #4	; (adr r2, 80051d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d0:	08005225 	.word	0x08005225
 80051d4:	080053ab 	.word	0x080053ab
 80051d8:	080053ab 	.word	0x080053ab
 80051dc:	080053ab 	.word	0x080053ab
 80051e0:	08005265 	.word	0x08005265
 80051e4:	080053ab 	.word	0x080053ab
 80051e8:	080053ab 	.word	0x080053ab
 80051ec:	080053ab 	.word	0x080053ab
 80051f0:	080052a7 	.word	0x080052a7
 80051f4:	080053ab 	.word	0x080053ab
 80051f8:	080053ab 	.word	0x080053ab
 80051fc:	080053ab 	.word	0x080053ab
 8005200:	080052e7 	.word	0x080052e7
 8005204:	080053ab 	.word	0x080053ab
 8005208:	080053ab 	.word	0x080053ab
 800520c:	080053ab 	.word	0x080053ab
 8005210:	08005329 	.word	0x08005329
 8005214:	080053ab 	.word	0x080053ab
 8005218:	080053ab 	.word	0x080053ab
 800521c:	080053ab 	.word	0x080053ab
 8005220:	08005369 	.word	0x08005369
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68b9      	ldr	r1, [r7, #8]
 800522a:	4618      	mov	r0, r3
 800522c:	f000 fa20 	bl	8005670 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	699a      	ldr	r2, [r3, #24]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f042 0208 	orr.w	r2, r2, #8
 800523e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	699a      	ldr	r2, [r3, #24]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f022 0204 	bic.w	r2, r2, #4
 800524e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6999      	ldr	r1, [r3, #24]
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	691a      	ldr	r2, [r3, #16]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	619a      	str	r2, [r3, #24]
      break;
 8005262:	e0a5      	b.n	80053b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68b9      	ldr	r1, [r7, #8]
 800526a:	4618      	mov	r0, r3
 800526c:	f000 fa7c 	bl	8005768 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	699a      	ldr	r2, [r3, #24]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800527e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	699a      	ldr	r2, [r3, #24]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800528e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6999      	ldr	r1, [r3, #24]
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	021a      	lsls	r2, r3, #8
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	619a      	str	r2, [r3, #24]
      break;
 80052a4:	e084      	b.n	80053b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68b9      	ldr	r1, [r7, #8]
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 fad5 	bl	800585c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	69da      	ldr	r2, [r3, #28]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f042 0208 	orr.w	r2, r2, #8
 80052c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	69da      	ldr	r2, [r3, #28]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 0204 	bic.w	r2, r2, #4
 80052d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	69d9      	ldr	r1, [r3, #28]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	691a      	ldr	r2, [r3, #16]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	430a      	orrs	r2, r1
 80052e2:	61da      	str	r2, [r3, #28]
      break;
 80052e4:	e064      	b.n	80053b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68b9      	ldr	r1, [r7, #8]
 80052ec:	4618      	mov	r0, r3
 80052ee:	f000 fb2d 	bl	800594c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	69da      	ldr	r2, [r3, #28]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005300:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	69da      	ldr	r2, [r3, #28]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005310:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	69d9      	ldr	r1, [r3, #28]
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	021a      	lsls	r2, r3, #8
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	61da      	str	r2, [r3, #28]
      break;
 8005326:	e043      	b.n	80053b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68b9      	ldr	r1, [r7, #8]
 800532e:	4618      	mov	r0, r3
 8005330:	f000 fb6a 	bl	8005a08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f042 0208 	orr.w	r2, r2, #8
 8005342:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f022 0204 	bic.w	r2, r2, #4
 8005352:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	691a      	ldr	r2, [r3, #16]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	430a      	orrs	r2, r1
 8005364:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005366:	e023      	b.n	80053b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68b9      	ldr	r1, [r7, #8]
 800536e:	4618      	mov	r0, r3
 8005370:	f000 fba2 	bl	8005ab8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005382:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005392:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	021a      	lsls	r2, r3, #8
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	430a      	orrs	r2, r1
 80053a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80053a8:	e002      	b.n	80053b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	75fb      	strb	r3, [r7, #23]
      break;
 80053ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3718      	adds	r7, #24
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop

080053c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053ce:	2300      	movs	r3, #0
 80053d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d101      	bne.n	80053e0 <HAL_TIM_ConfigClockSource+0x1c>
 80053dc:	2302      	movs	r3, #2
 80053de:	e0b6      	b.n	800554e <HAL_TIM_ConfigClockSource+0x18a>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2202      	movs	r2, #2
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005402:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800540a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800541c:	d03e      	beq.n	800549c <HAL_TIM_ConfigClockSource+0xd8>
 800541e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005422:	f200 8087 	bhi.w	8005534 <HAL_TIM_ConfigClockSource+0x170>
 8005426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800542a:	f000 8086 	beq.w	800553a <HAL_TIM_ConfigClockSource+0x176>
 800542e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005432:	d87f      	bhi.n	8005534 <HAL_TIM_ConfigClockSource+0x170>
 8005434:	2b70      	cmp	r3, #112	; 0x70
 8005436:	d01a      	beq.n	800546e <HAL_TIM_ConfigClockSource+0xaa>
 8005438:	2b70      	cmp	r3, #112	; 0x70
 800543a:	d87b      	bhi.n	8005534 <HAL_TIM_ConfigClockSource+0x170>
 800543c:	2b60      	cmp	r3, #96	; 0x60
 800543e:	d050      	beq.n	80054e2 <HAL_TIM_ConfigClockSource+0x11e>
 8005440:	2b60      	cmp	r3, #96	; 0x60
 8005442:	d877      	bhi.n	8005534 <HAL_TIM_ConfigClockSource+0x170>
 8005444:	2b50      	cmp	r3, #80	; 0x50
 8005446:	d03c      	beq.n	80054c2 <HAL_TIM_ConfigClockSource+0xfe>
 8005448:	2b50      	cmp	r3, #80	; 0x50
 800544a:	d873      	bhi.n	8005534 <HAL_TIM_ConfigClockSource+0x170>
 800544c:	2b40      	cmp	r3, #64	; 0x40
 800544e:	d058      	beq.n	8005502 <HAL_TIM_ConfigClockSource+0x13e>
 8005450:	2b40      	cmp	r3, #64	; 0x40
 8005452:	d86f      	bhi.n	8005534 <HAL_TIM_ConfigClockSource+0x170>
 8005454:	2b30      	cmp	r3, #48	; 0x30
 8005456:	d064      	beq.n	8005522 <HAL_TIM_ConfigClockSource+0x15e>
 8005458:	2b30      	cmp	r3, #48	; 0x30
 800545a:	d86b      	bhi.n	8005534 <HAL_TIM_ConfigClockSource+0x170>
 800545c:	2b20      	cmp	r3, #32
 800545e:	d060      	beq.n	8005522 <HAL_TIM_ConfigClockSource+0x15e>
 8005460:	2b20      	cmp	r3, #32
 8005462:	d867      	bhi.n	8005534 <HAL_TIM_ConfigClockSource+0x170>
 8005464:	2b00      	cmp	r3, #0
 8005466:	d05c      	beq.n	8005522 <HAL_TIM_ConfigClockSource+0x15e>
 8005468:	2b10      	cmp	r3, #16
 800546a:	d05a      	beq.n	8005522 <HAL_TIM_ConfigClockSource+0x15e>
 800546c:	e062      	b.n	8005534 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6818      	ldr	r0, [r3, #0]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	6899      	ldr	r1, [r3, #8]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	685a      	ldr	r2, [r3, #4]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	f000 fbef 	bl	8005c60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005490:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	609a      	str	r2, [r3, #8]
      break;
 800549a:	e04f      	b.n	800553c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6818      	ldr	r0, [r3, #0]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	6899      	ldr	r1, [r3, #8]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f000 fbd8 	bl	8005c60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689a      	ldr	r2, [r3, #8]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054be:	609a      	str	r2, [r3, #8]
      break;
 80054c0:	e03c      	b.n	800553c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6818      	ldr	r0, [r3, #0]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	6859      	ldr	r1, [r3, #4]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	461a      	mov	r2, r3
 80054d0:	f000 fb4c 	bl	8005b6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2150      	movs	r1, #80	; 0x50
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 fba5 	bl	8005c2a <TIM_ITRx_SetConfig>
      break;
 80054e0:	e02c      	b.n	800553c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6818      	ldr	r0, [r3, #0]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	6859      	ldr	r1, [r3, #4]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	461a      	mov	r2, r3
 80054f0:	f000 fb6b 	bl	8005bca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2160      	movs	r1, #96	; 0x60
 80054fa:	4618      	mov	r0, r3
 80054fc:	f000 fb95 	bl	8005c2a <TIM_ITRx_SetConfig>
      break;
 8005500:	e01c      	b.n	800553c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6818      	ldr	r0, [r3, #0]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	6859      	ldr	r1, [r3, #4]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	461a      	mov	r2, r3
 8005510:	f000 fb2c 	bl	8005b6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2140      	movs	r1, #64	; 0x40
 800551a:	4618      	mov	r0, r3
 800551c:	f000 fb85 	bl	8005c2a <TIM_ITRx_SetConfig>
      break;
 8005520:	e00c      	b.n	800553c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4619      	mov	r1, r3
 800552c:	4610      	mov	r0, r2
 800552e:	f000 fb7c 	bl	8005c2a <TIM_ITRx_SetConfig>
      break;
 8005532:	e003      	b.n	800553c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	73fb      	strb	r3, [r7, #15]
      break;
 8005538:	e000      	b.n	800553c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800553a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800554c:	7bfb      	ldrb	r3, [r7, #15]
}
 800554e:	4618      	mov	r0, r3
 8005550:	3710      	adds	r7, #16
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005556:	b480      	push	{r7}
 8005558:	b083      	sub	sp, #12
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800555e:	bf00      	nop
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800556a:	b480      	push	{r7}
 800556c:	b083      	sub	sp, #12
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005572:	bf00      	nop
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800557e:	b480      	push	{r7}
 8005580:	b083      	sub	sp, #12
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005586:	bf00      	nop
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005592:	b480      	push	{r7}
 8005594:	b083      	sub	sp, #12
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800559a:	bf00      	nop
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
	...

080055a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a2a      	ldr	r2, [pc, #168]	; (8005664 <TIM_Base_SetConfig+0xbc>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d003      	beq.n	80055c8 <TIM_Base_SetConfig+0x20>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055c6:	d108      	bne.n	80055da <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a21      	ldr	r2, [pc, #132]	; (8005664 <TIM_Base_SetConfig+0xbc>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d00b      	beq.n	80055fa <TIM_Base_SetConfig+0x52>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055e8:	d007      	beq.n	80055fa <TIM_Base_SetConfig+0x52>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a1e      	ldr	r2, [pc, #120]	; (8005668 <TIM_Base_SetConfig+0xc0>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d003      	beq.n	80055fa <TIM_Base_SetConfig+0x52>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a1d      	ldr	r2, [pc, #116]	; (800566c <TIM_Base_SetConfig+0xc4>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d108      	bne.n	800560c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005600:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	4313      	orrs	r3, r2
 800560a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	4313      	orrs	r3, r2
 8005618:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	689a      	ldr	r2, [r3, #8]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a0c      	ldr	r2, [pc, #48]	; (8005664 <TIM_Base_SetConfig+0xbc>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d007      	beq.n	8005648 <TIM_Base_SetConfig+0xa0>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a0b      	ldr	r2, [pc, #44]	; (8005668 <TIM_Base_SetConfig+0xc0>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d003      	beq.n	8005648 <TIM_Base_SetConfig+0xa0>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a0a      	ldr	r2, [pc, #40]	; (800566c <TIM_Base_SetConfig+0xc4>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d103      	bne.n	8005650 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	691a      	ldr	r2, [r3, #16]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	615a      	str	r2, [r3, #20]
}
 8005656:	bf00      	nop
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	40012c00 	.word	0x40012c00
 8005668:	40014000 	.word	0x40014000
 800566c:	40014400 	.word	0x40014400

08005670 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005670:	b480      	push	{r7}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	f023 0201 	bic.w	r2, r3, #1
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800569e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 0303 	bic.w	r3, r3, #3
 80056aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f023 0302 	bic.w	r3, r3, #2
 80056bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a24      	ldr	r2, [pc, #144]	; (800575c <TIM_OC1_SetConfig+0xec>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d007      	beq.n	80056e0 <TIM_OC1_SetConfig+0x70>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a23      	ldr	r2, [pc, #140]	; (8005760 <TIM_OC1_SetConfig+0xf0>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d003      	beq.n	80056e0 <TIM_OC1_SetConfig+0x70>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a22      	ldr	r2, [pc, #136]	; (8005764 <TIM_OC1_SetConfig+0xf4>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d10c      	bne.n	80056fa <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	f023 0308 	bic.w	r3, r3, #8
 80056e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f023 0304 	bic.w	r3, r3, #4
 80056f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a17      	ldr	r2, [pc, #92]	; (800575c <TIM_OC1_SetConfig+0xec>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d007      	beq.n	8005712 <TIM_OC1_SetConfig+0xa2>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a16      	ldr	r2, [pc, #88]	; (8005760 <TIM_OC1_SetConfig+0xf0>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d003      	beq.n	8005712 <TIM_OC1_SetConfig+0xa2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a15      	ldr	r2, [pc, #84]	; (8005764 <TIM_OC1_SetConfig+0xf4>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d111      	bne.n	8005736 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005718:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005720:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	4313      	orrs	r3, r2
 800572a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	4313      	orrs	r3, r2
 8005734:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	685a      	ldr	r2, [r3, #4]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	621a      	str	r2, [r3, #32]
}
 8005750:	bf00      	nop
 8005752:	371c      	adds	r7, #28
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr
 800575c:	40012c00 	.word	0x40012c00
 8005760:	40014000 	.word	0x40014000
 8005764:	40014400 	.word	0x40014400

08005768 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005768:	b480      	push	{r7}
 800576a:	b087      	sub	sp, #28
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	f023 0210 	bic.w	r2, r3, #16
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800579a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	021b      	lsls	r3, r3, #8
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	f023 0320 	bic.w	r3, r3, #32
 80057b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	011b      	lsls	r3, r3, #4
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a22      	ldr	r2, [pc, #136]	; (8005850 <TIM_OC2_SetConfig+0xe8>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d10d      	bne.n	80057e8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	011b      	lsls	r3, r3, #4
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	4313      	orrs	r3, r2
 80057de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a19      	ldr	r2, [pc, #100]	; (8005850 <TIM_OC2_SetConfig+0xe8>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d007      	beq.n	8005800 <TIM_OC2_SetConfig+0x98>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a18      	ldr	r2, [pc, #96]	; (8005854 <TIM_OC2_SetConfig+0xec>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d003      	beq.n	8005800 <TIM_OC2_SetConfig+0x98>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a17      	ldr	r2, [pc, #92]	; (8005858 <TIM_OC2_SetConfig+0xf0>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d113      	bne.n	8005828 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005806:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800580e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	695b      	ldr	r3, [r3, #20]
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	4313      	orrs	r3, r2
 800581a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	4313      	orrs	r3, r2
 8005826:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	621a      	str	r2, [r3, #32]
}
 8005842:	bf00      	nop
 8005844:	371c      	adds	r7, #28
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	40012c00 	.word	0x40012c00
 8005854:	40014000 	.word	0x40014000
 8005858:	40014400 	.word	0x40014400

0800585c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800585c:	b480      	push	{r7}
 800585e:	b087      	sub	sp, #28
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	69db      	ldr	r3, [r3, #28]
 8005882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800588a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800588e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f023 0303 	bic.w	r3, r3, #3
 8005896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	4313      	orrs	r3, r2
 80058a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	021b      	lsls	r3, r3, #8
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a21      	ldr	r2, [pc, #132]	; (8005940 <TIM_OC3_SetConfig+0xe4>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d10d      	bne.n	80058da <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	021b      	lsls	r3, r3, #8
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a18      	ldr	r2, [pc, #96]	; (8005940 <TIM_OC3_SetConfig+0xe4>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d007      	beq.n	80058f2 <TIM_OC3_SetConfig+0x96>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a17      	ldr	r2, [pc, #92]	; (8005944 <TIM_OC3_SetConfig+0xe8>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d003      	beq.n	80058f2 <TIM_OC3_SetConfig+0x96>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a16      	ldr	r2, [pc, #88]	; (8005948 <TIM_OC3_SetConfig+0xec>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d113      	bne.n	800591a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	011b      	lsls	r3, r3, #4
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	4313      	orrs	r3, r2
 800590c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	011b      	lsls	r3, r3, #4
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	4313      	orrs	r3, r2
 8005918:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	621a      	str	r2, [r3, #32]
}
 8005934:	bf00      	nop
 8005936:	371c      	adds	r7, #28
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr
 8005940:	40012c00 	.word	0x40012c00
 8005944:	40014000 	.word	0x40014000
 8005948:	40014400 	.word	0x40014400

0800594c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800594c:	b480      	push	{r7}
 800594e:	b087      	sub	sp, #28
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	69db      	ldr	r3, [r3, #28]
 8005972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800597a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800597e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005986:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	021b      	lsls	r3, r3, #8
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	4313      	orrs	r3, r2
 8005992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800599a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	031b      	lsls	r3, r3, #12
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a14      	ldr	r2, [pc, #80]	; (80059fc <TIM_OC4_SetConfig+0xb0>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d007      	beq.n	80059c0 <TIM_OC4_SetConfig+0x74>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a13      	ldr	r2, [pc, #76]	; (8005a00 <TIM_OC4_SetConfig+0xb4>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d003      	beq.n	80059c0 <TIM_OC4_SetConfig+0x74>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a12      	ldr	r2, [pc, #72]	; (8005a04 <TIM_OC4_SetConfig+0xb8>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d109      	bne.n	80059d4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	019b      	lsls	r3, r3, #6
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	621a      	str	r2, [r3, #32]
}
 80059ee:	bf00      	nop
 80059f0:	371c      	adds	r7, #28
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	40012c00 	.word	0x40012c00
 8005a00:	40014000 	.word	0x40014000
 8005a04:	40014400 	.word	0x40014400

08005a08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b087      	sub	sp, #28
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005a4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	041b      	lsls	r3, r3, #16
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a13      	ldr	r2, [pc, #76]	; (8005aac <TIM_OC5_SetConfig+0xa4>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d007      	beq.n	8005a72 <TIM_OC5_SetConfig+0x6a>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a12      	ldr	r2, [pc, #72]	; (8005ab0 <TIM_OC5_SetConfig+0xa8>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d003      	beq.n	8005a72 <TIM_OC5_SetConfig+0x6a>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a11      	ldr	r2, [pc, #68]	; (8005ab4 <TIM_OC5_SetConfig+0xac>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d109      	bne.n	8005a86 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	021b      	lsls	r3, r3, #8
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	685a      	ldr	r2, [r3, #4]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	621a      	str	r2, [r3, #32]
}
 8005aa0:	bf00      	nop
 8005aa2:	371c      	adds	r7, #28
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr
 8005aac:	40012c00 	.word	0x40012c00
 8005ab0:	40014000 	.word	0x40014000
 8005ab4:	40014400 	.word	0x40014400

08005ab8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b087      	sub	sp, #28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	021b      	lsls	r3, r3, #8
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005afe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	051b      	lsls	r3, r3, #20
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a14      	ldr	r2, [pc, #80]	; (8005b60 <TIM_OC6_SetConfig+0xa8>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d007      	beq.n	8005b24 <TIM_OC6_SetConfig+0x6c>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a13      	ldr	r2, [pc, #76]	; (8005b64 <TIM_OC6_SetConfig+0xac>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d003      	beq.n	8005b24 <TIM_OC6_SetConfig+0x6c>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a12      	ldr	r2, [pc, #72]	; (8005b68 <TIM_OC6_SetConfig+0xb0>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d109      	bne.n	8005b38 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	695b      	ldr	r3, [r3, #20]
 8005b30:	029b      	lsls	r3, r3, #10
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	621a      	str	r2, [r3, #32]
}
 8005b52:	bf00      	nop
 8005b54:	371c      	adds	r7, #28
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	40012c00 	.word	0x40012c00
 8005b64:	40014000 	.word	0x40014000
 8005b68:	40014400 	.word	0x40014400

08005b6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b087      	sub	sp, #28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6a1b      	ldr	r3, [r3, #32]
 8005b7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	f023 0201 	bic.w	r2, r3, #1
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	011b      	lsls	r3, r3, #4
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	f023 030a 	bic.w	r3, r3, #10
 8005ba8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	621a      	str	r2, [r3, #32]
}
 8005bbe:	bf00      	nop
 8005bc0:	371c      	adds	r7, #28
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr

08005bca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bca:	b480      	push	{r7}
 8005bcc:	b087      	sub	sp, #28
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	60f8      	str	r0, [r7, #12]
 8005bd2:	60b9      	str	r1, [r7, #8]
 8005bd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	f023 0210 	bic.w	r2, r3, #16
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6a1b      	ldr	r3, [r3, #32]
 8005bec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bf4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	031b      	lsls	r3, r3, #12
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	011b      	lsls	r3, r3, #4
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	621a      	str	r2, [r3, #32]
}
 8005c1e:	bf00      	nop
 8005c20:	371c      	adds	r7, #28
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr

08005c2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b085      	sub	sp, #20
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
 8005c32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	f043 0307 	orr.w	r3, r3, #7
 8005c4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	609a      	str	r2, [r3, #8]
}
 8005c54:	bf00      	nop
 8005c56:	3714      	adds	r7, #20
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
 8005c6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	021a      	lsls	r2, r3, #8
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	431a      	orrs	r2, r3
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	609a      	str	r2, [r3, #8]
}
 8005c94:	bf00      	nop
 8005c96:	371c      	adds	r7, #28
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b087      	sub	sp, #28
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	f003 031f 	and.w	r3, r3, #31
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6a1a      	ldr	r2, [r3, #32]
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	43db      	mvns	r3, r3
 8005cc2:	401a      	ands	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6a1a      	ldr	r2, [r3, #32]
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	f003 031f 	and.w	r3, r3, #31
 8005cd2:	6879      	ldr	r1, [r7, #4]
 8005cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8005cd8:	431a      	orrs	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	621a      	str	r2, [r3, #32]
}
 8005cde:	bf00      	nop
 8005ce0:	371c      	adds	r7, #28
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
	...

08005cec <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d109      	bne.n	8005d10 <HAL_TIMEx_PWMN_Start+0x24>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	bf14      	ite	ne
 8005d08:	2301      	movne	r3, #1
 8005d0a:	2300      	moveq	r3, #0
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	e022      	b.n	8005d56 <HAL_TIMEx_PWMN_Start+0x6a>
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	2b04      	cmp	r3, #4
 8005d14:	d109      	bne.n	8005d2a <HAL_TIMEx_PWMN_Start+0x3e>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	bf14      	ite	ne
 8005d22:	2301      	movne	r3, #1
 8005d24:	2300      	moveq	r3, #0
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	e015      	b.n	8005d56 <HAL_TIMEx_PWMN_Start+0x6a>
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	2b08      	cmp	r3, #8
 8005d2e:	d109      	bne.n	8005d44 <HAL_TIMEx_PWMN_Start+0x58>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	bf14      	ite	ne
 8005d3c:	2301      	movne	r3, #1
 8005d3e:	2300      	moveq	r3, #0
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	e008      	b.n	8005d56 <HAL_TIMEx_PWMN_Start+0x6a>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	bf14      	ite	ne
 8005d50:	2301      	movne	r3, #1
 8005d52:	2300      	moveq	r3, #0
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e05a      	b.n	8005e14 <HAL_TIMEx_PWMN_Start+0x128>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d104      	bne.n	8005d6e <HAL_TIMEx_PWMN_Start+0x82>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2202      	movs	r2, #2
 8005d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d6c:	e013      	b.n	8005d96 <HAL_TIMEx_PWMN_Start+0xaa>
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	2b04      	cmp	r3, #4
 8005d72:	d104      	bne.n	8005d7e <HAL_TIMEx_PWMN_Start+0x92>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2202      	movs	r2, #2
 8005d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d7c:	e00b      	b.n	8005d96 <HAL_TIMEx_PWMN_Start+0xaa>
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	2b08      	cmp	r3, #8
 8005d82:	d104      	bne.n	8005d8e <HAL_TIMEx_PWMN_Start+0xa2>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2202      	movs	r2, #2
 8005d88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d8c:	e003      	b.n	8005d96 <HAL_TIMEx_PWMN_Start+0xaa>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2202      	movs	r2, #2
 8005d92:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2204      	movs	r2, #4
 8005d9c:	6839      	ldr	r1, [r7, #0]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f000 f93e 	bl	8006020 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005db2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a18      	ldr	r2, [pc, #96]	; (8005e1c <HAL_TIMEx_PWMN_Start+0x130>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d009      	beq.n	8005dd2 <HAL_TIMEx_PWMN_Start+0xe6>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dc6:	d004      	beq.n	8005dd2 <HAL_TIMEx_PWMN_Start+0xe6>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a14      	ldr	r2, [pc, #80]	; (8005e20 <HAL_TIMEx_PWMN_Start+0x134>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d115      	bne.n	8005dfe <HAL_TIMEx_PWMN_Start+0x112>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	689a      	ldr	r2, [r3, #8]
 8005dd8:	4b12      	ldr	r3, [pc, #72]	; (8005e24 <HAL_TIMEx_PWMN_Start+0x138>)
 8005dda:	4013      	ands	r3, r2
 8005ddc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2b06      	cmp	r3, #6
 8005de2:	d015      	beq.n	8005e10 <HAL_TIMEx_PWMN_Start+0x124>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dea:	d011      	beq.n	8005e10 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f042 0201 	orr.w	r2, r2, #1
 8005dfa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dfc:	e008      	b.n	8005e10 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f042 0201 	orr.w	r2, r2, #1
 8005e0c:	601a      	str	r2, [r3, #0]
 8005e0e:	e000      	b.n	8005e12 <HAL_TIMEx_PWMN_Start+0x126>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e10:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	40012c00 	.word	0x40012c00
 8005e20:	40014000 	.word	0x40014000
 8005e24:	00010007 	.word	0x00010007

08005e28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d101      	bne.n	8005e40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e3c:	2302      	movs	r3, #2
 8005e3e:	e04f      	b.n	8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a21      	ldr	r2, [pc, #132]	; (8005eec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d108      	bne.n	8005e7c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e70:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a14      	ldr	r2, [pc, #80]	; (8005eec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d009      	beq.n	8005eb4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ea8:	d004      	beq.n	8005eb4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a10      	ldr	r2, [pc, #64]	; (8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d10c      	bne.n	8005ece <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3714      	adds	r7, #20
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	40012c00 	.word	0x40012c00
 8005ef0:	40014000 	.word	0x40014000

08005ef4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005efe:	2300      	movs	r3, #0
 8005f00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d101      	bne.n	8005f10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	e060      	b.n	8005fd2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	695b      	ldr	r3, [r3, #20]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f76:	4313      	orrs	r3, r2
 8005f78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	041b      	lsls	r3, r3, #16
 8005f86:	4313      	orrs	r3, r2
 8005f88:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a14      	ldr	r2, [pc, #80]	; (8005fe0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d115      	bne.n	8005fc0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9e:	051b      	lsls	r3, r3, #20
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	6a1b      	ldr	r3, [r3, #32]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3714      	adds	r7, #20
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	40012c00 	.word	0x40012c00

08005fe4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006020:	b480      	push	{r7}
 8006022:	b087      	sub	sp, #28
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	f003 031f 	and.w	r3, r3, #31
 8006032:	2204      	movs	r2, #4
 8006034:	fa02 f303 	lsl.w	r3, r2, r3
 8006038:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6a1a      	ldr	r2, [r3, #32]
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	43db      	mvns	r3, r3
 8006042:	401a      	ands	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6a1a      	ldr	r2, [r3, #32]
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	f003 031f 	and.w	r3, r3, #31
 8006052:	6879      	ldr	r1, [r7, #4]
 8006054:	fa01 f303 	lsl.w	r3, r1, r3
 8006058:	431a      	orrs	r2, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	621a      	str	r2, [r3, #32]
}
 800605e:	bf00      	nop
 8006060:	371c      	adds	r7, #28
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b082      	sub	sp, #8
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d101      	bne.n	800607c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e040      	b.n	80060fe <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006080:	2b00      	cmp	r3, #0
 8006082:	d106      	bne.n	8006092 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f7fb f9fb 	bl	8001488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2224      	movs	r2, #36	; 0x24
 8006096:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f022 0201 	bic.w	r2, r2, #1
 80060a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 fbf3 	bl	8006894 <UART_SetConfig>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d101      	bne.n	80060b8 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e022      	b.n	80060fe <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d002      	beq.n	80060c6 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 fe41 	bl	8006d48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	685a      	ldr	r2, [r3, #4]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	689a      	ldr	r2, [r3, #8]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f042 0201 	orr.w	r2, r2, #1
 80060f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fec8 	bl	8006e8c <UART_CheckIdleState>
 80060fc:	4603      	mov	r3, r0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3708      	adds	r7, #8
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
	...

08006108 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006108:	b480      	push	{r7}
 800610a:	b08b      	sub	sp, #44	; 0x2c
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	4613      	mov	r3, r2
 8006114:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800611a:	2b20      	cmp	r3, #32
 800611c:	d156      	bne.n	80061cc <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d002      	beq.n	800612a <HAL_UART_Transmit_IT+0x22>
 8006124:	88fb      	ldrh	r3, [r7, #6]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d101      	bne.n	800612e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e04f      	b.n	80061ce <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006134:	2b01      	cmp	r3, #1
 8006136:	d101      	bne.n	800613c <HAL_UART_Transmit_IT+0x34>
 8006138:	2302      	movs	r3, #2
 800613a:	e048      	b.n	80061ce <HAL_UART_Transmit_IT+0xc6>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	68ba      	ldr	r2, [r7, #8]
 8006148:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	88fa      	ldrh	r2, [r7, #6]
 800614e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	88fa      	ldrh	r2, [r7, #6]
 8006156:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2200      	movs	r2, #0
 8006164:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2221      	movs	r2, #33	; 0x21
 800616c:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006176:	d107      	bne.n	8006188 <HAL_UART_Transmit_IT+0x80>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d103      	bne.n	8006188 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	4a16      	ldr	r2, [pc, #88]	; (80061dc <HAL_UART_Transmit_IT+0xd4>)
 8006184:	669a      	str	r2, [r3, #104]	; 0x68
 8006186:	e002      	b.n	800618e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	4a15      	ldr	r2, [pc, #84]	; (80061e0 <HAL_UART_Transmit_IT+0xd8>)
 800618c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	e853 3f00 	ldrex	r3, [r3]
 80061a2:	613b      	str	r3, [r7, #16]
   return(result);
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061aa:	627b      	str	r3, [r7, #36]	; 0x24
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	461a      	mov	r2, r3
 80061b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b4:	623b      	str	r3, [r7, #32]
 80061b6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b8:	69f9      	ldr	r1, [r7, #28]
 80061ba:	6a3a      	ldr	r2, [r7, #32]
 80061bc:	e841 2300 	strex	r3, r2, [r1]
 80061c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1e6      	bne.n	8006196 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80061c8:	2300      	movs	r3, #0
 80061ca:	e000      	b.n	80061ce <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80061cc:	2302      	movs	r3, #2
  }
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	372c      	adds	r7, #44	; 0x2c
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	080073e7 	.word	0x080073e7
 80061e0:	0800732f 	.word	0x0800732f

080061e4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b08a      	sub	sp, #40	; 0x28
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	4613      	mov	r3, r2
 80061f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061f6:	2b20      	cmp	r3, #32
 80061f8:	d142      	bne.n	8006280 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d002      	beq.n	8006206 <HAL_UART_Receive_IT+0x22>
 8006200:	88fb      	ldrh	r3, [r7, #6]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e03b      	b.n	8006282 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006210:	2b01      	cmp	r3, #1
 8006212:	d101      	bne.n	8006218 <HAL_UART_Receive_IT+0x34>
 8006214:	2302      	movs	r3, #2
 8006216:	e034      	b.n	8006282 <HAL_UART_Receive_IT+0x9e>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a18      	ldr	r2, [pc, #96]	; (800628c <HAL_UART_Receive_IT+0xa8>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d01f      	beq.n	8006270 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d018      	beq.n	8006270 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	e853 3f00 	ldrex	r3, [r3]
 800624a:	613b      	str	r3, [r7, #16]
   return(result);
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006252:	627b      	str	r3, [r7, #36]	; 0x24
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	461a      	mov	r2, r3
 800625a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625c:	623b      	str	r3, [r7, #32]
 800625e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006260:	69f9      	ldr	r1, [r7, #28]
 8006262:	6a3a      	ldr	r2, [r7, #32]
 8006264:	e841 2300 	strex	r3, r2, [r1]
 8006268:	61bb      	str	r3, [r7, #24]
   return(result);
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d1e6      	bne.n	800623e <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006270:	88fb      	ldrh	r3, [r7, #6]
 8006272:	461a      	mov	r2, r3
 8006274:	68b9      	ldr	r1, [r7, #8]
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f000 ff16 	bl	80070a8 <UART_Start_Receive_IT>
 800627c:	4603      	mov	r3, r0
 800627e:	e000      	b.n	8006282 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006280:	2302      	movs	r3, #2
  }
}
 8006282:	4618      	mov	r0, r3
 8006284:	3728      	adds	r7, #40	; 0x28
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	40008000 	.word	0x40008000

08006290 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b0ba      	sub	sp, #232	; 0xe8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80062b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80062ba:	f640 030f 	movw	r3, #2063	; 0x80f
 80062be:	4013      	ands	r3, r2
 80062c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80062c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d115      	bne.n	80062f8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80062cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062d0:	f003 0320 	and.w	r3, r3, #32
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00f      	beq.n	80062f8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80062d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062dc:	f003 0320 	and.w	r3, r3, #32
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d009      	beq.n	80062f8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f000 82a6 	beq.w	800683a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	4798      	blx	r3
      }
      return;
 80062f6:	e2a0      	b.n	800683a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80062f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f000 8117 	beq.w	8006530 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006302:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006306:	f003 0301 	and.w	r3, r3, #1
 800630a:	2b00      	cmp	r3, #0
 800630c:	d106      	bne.n	800631c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800630e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006312:	4b85      	ldr	r3, [pc, #532]	; (8006528 <HAL_UART_IRQHandler+0x298>)
 8006314:	4013      	ands	r3, r2
 8006316:	2b00      	cmp	r3, #0
 8006318:	f000 810a 	beq.w	8006530 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800631c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006320:	f003 0301 	and.w	r3, r3, #1
 8006324:	2b00      	cmp	r3, #0
 8006326:	d011      	beq.n	800634c <HAL_UART_IRQHandler+0xbc>
 8006328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800632c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00b      	beq.n	800634c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2201      	movs	r2, #1
 800633a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006342:	f043 0201 	orr.w	r2, r3, #1
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800634c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006350:	f003 0302 	and.w	r3, r3, #2
 8006354:	2b00      	cmp	r3, #0
 8006356:	d011      	beq.n	800637c <HAL_UART_IRQHandler+0xec>
 8006358:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800635c:	f003 0301 	and.w	r3, r3, #1
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00b      	beq.n	800637c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2202      	movs	r2, #2
 800636a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006372:	f043 0204 	orr.w	r2, r3, #4
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800637c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006380:	f003 0304 	and.w	r3, r3, #4
 8006384:	2b00      	cmp	r3, #0
 8006386:	d011      	beq.n	80063ac <HAL_UART_IRQHandler+0x11c>
 8006388:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800638c:	f003 0301 	and.w	r3, r3, #1
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00b      	beq.n	80063ac <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2204      	movs	r2, #4
 800639a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063a2:	f043 0202 	orr.w	r2, r3, #2
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80063ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063b0:	f003 0308 	and.w	r3, r3, #8
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d017      	beq.n	80063e8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80063b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063bc:	f003 0320 	and.w	r3, r3, #32
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d105      	bne.n	80063d0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80063c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063c8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00b      	beq.n	80063e8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2208      	movs	r2, #8
 80063d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063de:	f043 0208 	orr.w	r2, r3, #8
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80063e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d012      	beq.n	800641a <HAL_UART_IRQHandler+0x18a>
 80063f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00c      	beq.n	800641a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006408:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006410:	f043 0220 	orr.w	r2, r3, #32
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006420:	2b00      	cmp	r3, #0
 8006422:	f000 820c 	beq.w	800683e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800642a:	f003 0320 	and.w	r3, r3, #32
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00d      	beq.n	800644e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006432:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006436:	f003 0320 	and.w	r3, r3, #32
 800643a:	2b00      	cmp	r3, #0
 800643c:	d007      	beq.n	800644e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006454:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006462:	2b40      	cmp	r3, #64	; 0x40
 8006464:	d005      	beq.n	8006472 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006466:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800646a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800646e:	2b00      	cmp	r3, #0
 8006470:	d04f      	beq.n	8006512 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 fee2 	bl	800723c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006482:	2b40      	cmp	r3, #64	; 0x40
 8006484:	d141      	bne.n	800650a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	3308      	adds	r3, #8
 800648c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006490:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006494:	e853 3f00 	ldrex	r3, [r3]
 8006498:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800649c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	3308      	adds	r3, #8
 80064ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80064b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80064b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80064be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80064c2:	e841 2300 	strex	r3, r2, [r1]
 80064c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80064ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1d9      	bne.n	8006486 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d013      	beq.n	8006502 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064de:	4a13      	ldr	r2, [pc, #76]	; (800652c <HAL_UART_IRQHandler+0x29c>)
 80064e0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7fc fe82 	bl	80031f0 <HAL_DMA_Abort_IT>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d017      	beq.n	8006522 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80064fc:	4610      	mov	r0, r2
 80064fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006500:	e00f      	b.n	8006522 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f9b0 	bl	8006868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006508:	e00b      	b.n	8006522 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 f9ac 	bl	8006868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006510:	e007      	b.n	8006522 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f9a8 	bl	8006868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006520:	e18d      	b.n	800683e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006522:	bf00      	nop
    return;
 8006524:	e18b      	b.n	800683e <HAL_UART_IRQHandler+0x5ae>
 8006526:	bf00      	nop
 8006528:	04000120 	.word	0x04000120
 800652c:	08007303 	.word	0x08007303

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006534:	2b01      	cmp	r3, #1
 8006536:	f040 8146 	bne.w	80067c6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800653a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800653e:	f003 0310 	and.w	r3, r3, #16
 8006542:	2b00      	cmp	r3, #0
 8006544:	f000 813f 	beq.w	80067c6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800654c:	f003 0310 	and.w	r3, r3, #16
 8006550:	2b00      	cmp	r3, #0
 8006552:	f000 8138 	beq.w	80067c6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2210      	movs	r2, #16
 800655c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006568:	2b40      	cmp	r3, #64	; 0x40
 800656a:	f040 80b4 	bne.w	80066d6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800657a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800657e:	2b00      	cmp	r3, #0
 8006580:	f000 815f 	beq.w	8006842 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800658a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800658e:	429a      	cmp	r2, r3
 8006590:	f080 8157 	bcs.w	8006842 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800659a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 0320 	and.w	r3, r3, #32
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f040 8085 	bne.w	80066ba <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80065bc:	e853 3f00 	ldrex	r3, [r3]
 80065c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80065c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	461a      	mov	r2, r3
 80065d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80065de:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80065e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80065ea:	e841 2300 	strex	r3, r2, [r1]
 80065ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80065f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1da      	bne.n	80065b0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	3308      	adds	r3, #8
 8006600:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006602:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006604:	e853 3f00 	ldrex	r3, [r3]
 8006608:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800660a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800660c:	f023 0301 	bic.w	r3, r3, #1
 8006610:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	3308      	adds	r3, #8
 800661a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800661e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006622:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006624:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006626:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800662a:	e841 2300 	strex	r3, r2, [r1]
 800662e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006630:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1e1      	bne.n	80065fa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3308      	adds	r3, #8
 800663c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006640:	e853 3f00 	ldrex	r3, [r3]
 8006644:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006646:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006648:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800664c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	3308      	adds	r3, #8
 8006656:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800665a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800665c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006660:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006662:	e841 2300 	strex	r3, r2, [r1]
 8006666:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006668:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1e3      	bne.n	8006636 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2220      	movs	r2, #32
 8006672:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006682:	e853 3f00 	ldrex	r3, [r3]
 8006686:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800668a:	f023 0310 	bic.w	r3, r3, #16
 800668e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	461a      	mov	r2, r3
 8006698:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800669c:	65bb      	str	r3, [r7, #88]	; 0x58
 800669e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80066a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066a4:	e841 2300 	strex	r3, r2, [r1]
 80066a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80066aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1e4      	bne.n	800667a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b4:	4618      	mov	r0, r3
 80066b6:	f7fc fd5d 	bl	8003174 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	4619      	mov	r1, r3
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f8d4 	bl	800687c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80066d4:	e0b5      	b.n	8006842 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f000 80a7 	beq.w	8006846 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80066f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 80a2 	beq.w	8006846 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670a:	e853 3f00 	ldrex	r3, [r3]
 800670e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006712:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006716:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	461a      	mov	r2, r3
 8006720:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006724:	647b      	str	r3, [r7, #68]	; 0x44
 8006726:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006728:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800672a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800672c:	e841 2300 	strex	r3, r2, [r1]
 8006730:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1e4      	bne.n	8006702 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	3308      	adds	r3, #8
 800673e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006742:	e853 3f00 	ldrex	r3, [r3]
 8006746:	623b      	str	r3, [r7, #32]
   return(result);
 8006748:	6a3b      	ldr	r3, [r7, #32]
 800674a:	f023 0301 	bic.w	r3, r3, #1
 800674e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	3308      	adds	r3, #8
 8006758:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800675c:	633a      	str	r2, [r7, #48]	; 0x30
 800675e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006760:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006762:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006764:	e841 2300 	strex	r3, r2, [r1]
 8006768:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800676a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676c:	2b00      	cmp	r3, #0
 800676e:	d1e3      	bne.n	8006738 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2220      	movs	r2, #32
 8006774:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	e853 3f00 	ldrex	r3, [r3]
 800678e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f023 0310 	bic.w	r3, r3, #16
 8006796:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	461a      	mov	r2, r3
 80067a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80067a4:	61fb      	str	r3, [r7, #28]
 80067a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a8:	69b9      	ldr	r1, [r7, #24]
 80067aa:	69fa      	ldr	r2, [r7, #28]
 80067ac:	e841 2300 	strex	r3, r2, [r1]
 80067b0:	617b      	str	r3, [r7, #20]
   return(result);
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1e4      	bne.n	8006782 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067bc:	4619      	mov	r1, r3
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f85c 	bl	800687c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80067c4:	e03f      	b.n	8006846 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80067c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00e      	beq.n	80067f0 <HAL_UART_IRQHandler+0x560>
 80067d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d008      	beq.n	80067f0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80067e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 ffe6 	bl	80077ba <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80067ee:	e02d      	b.n	800684c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80067f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00e      	beq.n	800681a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80067fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006804:	2b00      	cmp	r3, #0
 8006806:	d008      	beq.n	800681a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800680c:	2b00      	cmp	r3, #0
 800680e:	d01c      	beq.n	800684a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	4798      	blx	r3
    }
    return;
 8006818:	e017      	b.n	800684a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800681a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800681e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006822:	2b00      	cmp	r3, #0
 8006824:	d012      	beq.n	800684c <HAL_UART_IRQHandler+0x5bc>
 8006826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800682a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00c      	beq.n	800684c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fe37 	bl	80074a6 <UART_EndTransmit_IT>
    return;
 8006838:	e008      	b.n	800684c <HAL_UART_IRQHandler+0x5bc>
      return;
 800683a:	bf00      	nop
 800683c:	e006      	b.n	800684c <HAL_UART_IRQHandler+0x5bc>
    return;
 800683e:	bf00      	nop
 8006840:	e004      	b.n	800684c <HAL_UART_IRQHandler+0x5bc>
      return;
 8006842:	bf00      	nop
 8006844:	e002      	b.n	800684c <HAL_UART_IRQHandler+0x5bc>
      return;
 8006846:	bf00      	nop
 8006848:	e000      	b.n	800684c <HAL_UART_IRQHandler+0x5bc>
    return;
 800684a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800684c:	37e8      	adds	r7, #232	; 0xe8
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop

08006854 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800685c:	bf00      	nop
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	460b      	mov	r3, r1
 8006886:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006888:	bf00      	nop
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006898:	b08a      	sub	sp, #40	; 0x28
 800689a:	af00      	add	r7, sp, #0
 800689c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800689e:	2300      	movs	r3, #0
 80068a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	689a      	ldr	r2, [r3, #8]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	431a      	orrs	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	431a      	orrs	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	69db      	ldr	r3, [r3, #28]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	4b9e      	ldr	r3, [pc, #632]	; (8006b3c <UART_SetConfig+0x2a8>)
 80068c4:	4013      	ands	r3, r2
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	6812      	ldr	r2, [r2, #0]
 80068ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068cc:	430b      	orrs	r3, r1
 80068ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	68da      	ldr	r2, [r3, #12]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	430a      	orrs	r2, r1
 80068e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a93      	ldr	r2, [pc, #588]	; (8006b40 <UART_SetConfig+0x2ac>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d004      	beq.n	8006900 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068fc:	4313      	orrs	r3, r2
 80068fe:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006910:	430a      	orrs	r2, r1
 8006912:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a8a      	ldr	r2, [pc, #552]	; (8006b44 <UART_SetConfig+0x2b0>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d126      	bne.n	800696c <UART_SetConfig+0xd8>
 800691e:	4b8a      	ldr	r3, [pc, #552]	; (8006b48 <UART_SetConfig+0x2b4>)
 8006920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006924:	f003 0303 	and.w	r3, r3, #3
 8006928:	2b03      	cmp	r3, #3
 800692a:	d81b      	bhi.n	8006964 <UART_SetConfig+0xd0>
 800692c:	a201      	add	r2, pc, #4	; (adr r2, 8006934 <UART_SetConfig+0xa0>)
 800692e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006932:	bf00      	nop
 8006934:	08006945 	.word	0x08006945
 8006938:	08006955 	.word	0x08006955
 800693c:	0800694d 	.word	0x0800694d
 8006940:	0800695d 	.word	0x0800695d
 8006944:	2301      	movs	r3, #1
 8006946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800694a:	e0ab      	b.n	8006aa4 <UART_SetConfig+0x210>
 800694c:	2302      	movs	r3, #2
 800694e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006952:	e0a7      	b.n	8006aa4 <UART_SetConfig+0x210>
 8006954:	2304      	movs	r3, #4
 8006956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800695a:	e0a3      	b.n	8006aa4 <UART_SetConfig+0x210>
 800695c:	2308      	movs	r3, #8
 800695e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006962:	e09f      	b.n	8006aa4 <UART_SetConfig+0x210>
 8006964:	2310      	movs	r3, #16
 8006966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800696a:	e09b      	b.n	8006aa4 <UART_SetConfig+0x210>
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a76      	ldr	r2, [pc, #472]	; (8006b4c <UART_SetConfig+0x2b8>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d138      	bne.n	80069e8 <UART_SetConfig+0x154>
 8006976:	4b74      	ldr	r3, [pc, #464]	; (8006b48 <UART_SetConfig+0x2b4>)
 8006978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800697c:	f003 030c 	and.w	r3, r3, #12
 8006980:	2b0c      	cmp	r3, #12
 8006982:	d82d      	bhi.n	80069e0 <UART_SetConfig+0x14c>
 8006984:	a201      	add	r2, pc, #4	; (adr r2, 800698c <UART_SetConfig+0xf8>)
 8006986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698a:	bf00      	nop
 800698c:	080069c1 	.word	0x080069c1
 8006990:	080069e1 	.word	0x080069e1
 8006994:	080069e1 	.word	0x080069e1
 8006998:	080069e1 	.word	0x080069e1
 800699c:	080069d1 	.word	0x080069d1
 80069a0:	080069e1 	.word	0x080069e1
 80069a4:	080069e1 	.word	0x080069e1
 80069a8:	080069e1 	.word	0x080069e1
 80069ac:	080069c9 	.word	0x080069c9
 80069b0:	080069e1 	.word	0x080069e1
 80069b4:	080069e1 	.word	0x080069e1
 80069b8:	080069e1 	.word	0x080069e1
 80069bc:	080069d9 	.word	0x080069d9
 80069c0:	2300      	movs	r3, #0
 80069c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069c6:	e06d      	b.n	8006aa4 <UART_SetConfig+0x210>
 80069c8:	2302      	movs	r3, #2
 80069ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ce:	e069      	b.n	8006aa4 <UART_SetConfig+0x210>
 80069d0:	2304      	movs	r3, #4
 80069d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069d6:	e065      	b.n	8006aa4 <UART_SetConfig+0x210>
 80069d8:	2308      	movs	r3, #8
 80069da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069de:	e061      	b.n	8006aa4 <UART_SetConfig+0x210>
 80069e0:	2310      	movs	r3, #16
 80069e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069e6:	e05d      	b.n	8006aa4 <UART_SetConfig+0x210>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a58      	ldr	r2, [pc, #352]	; (8006b50 <UART_SetConfig+0x2bc>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d125      	bne.n	8006a3e <UART_SetConfig+0x1aa>
 80069f2:	4b55      	ldr	r3, [pc, #340]	; (8006b48 <UART_SetConfig+0x2b4>)
 80069f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80069fc:	2b30      	cmp	r3, #48	; 0x30
 80069fe:	d016      	beq.n	8006a2e <UART_SetConfig+0x19a>
 8006a00:	2b30      	cmp	r3, #48	; 0x30
 8006a02:	d818      	bhi.n	8006a36 <UART_SetConfig+0x1a2>
 8006a04:	2b20      	cmp	r3, #32
 8006a06:	d00a      	beq.n	8006a1e <UART_SetConfig+0x18a>
 8006a08:	2b20      	cmp	r3, #32
 8006a0a:	d814      	bhi.n	8006a36 <UART_SetConfig+0x1a2>
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d002      	beq.n	8006a16 <UART_SetConfig+0x182>
 8006a10:	2b10      	cmp	r3, #16
 8006a12:	d008      	beq.n	8006a26 <UART_SetConfig+0x192>
 8006a14:	e00f      	b.n	8006a36 <UART_SetConfig+0x1a2>
 8006a16:	2300      	movs	r3, #0
 8006a18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a1c:	e042      	b.n	8006aa4 <UART_SetConfig+0x210>
 8006a1e:	2302      	movs	r3, #2
 8006a20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a24:	e03e      	b.n	8006aa4 <UART_SetConfig+0x210>
 8006a26:	2304      	movs	r3, #4
 8006a28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a2c:	e03a      	b.n	8006aa4 <UART_SetConfig+0x210>
 8006a2e:	2308      	movs	r3, #8
 8006a30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a34:	e036      	b.n	8006aa4 <UART_SetConfig+0x210>
 8006a36:	2310      	movs	r3, #16
 8006a38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a3c:	e032      	b.n	8006aa4 <UART_SetConfig+0x210>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a3f      	ldr	r2, [pc, #252]	; (8006b40 <UART_SetConfig+0x2ac>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d12a      	bne.n	8006a9e <UART_SetConfig+0x20a>
 8006a48:	4b3f      	ldr	r3, [pc, #252]	; (8006b48 <UART_SetConfig+0x2b4>)
 8006a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a4e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a56:	d01a      	beq.n	8006a8e <UART_SetConfig+0x1fa>
 8006a58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a5c:	d81b      	bhi.n	8006a96 <UART_SetConfig+0x202>
 8006a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a62:	d00c      	beq.n	8006a7e <UART_SetConfig+0x1ea>
 8006a64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a68:	d815      	bhi.n	8006a96 <UART_SetConfig+0x202>
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d003      	beq.n	8006a76 <UART_SetConfig+0x1e2>
 8006a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a72:	d008      	beq.n	8006a86 <UART_SetConfig+0x1f2>
 8006a74:	e00f      	b.n	8006a96 <UART_SetConfig+0x202>
 8006a76:	2300      	movs	r3, #0
 8006a78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a7c:	e012      	b.n	8006aa4 <UART_SetConfig+0x210>
 8006a7e:	2302      	movs	r3, #2
 8006a80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a84:	e00e      	b.n	8006aa4 <UART_SetConfig+0x210>
 8006a86:	2304      	movs	r3, #4
 8006a88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a8c:	e00a      	b.n	8006aa4 <UART_SetConfig+0x210>
 8006a8e:	2308      	movs	r3, #8
 8006a90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a94:	e006      	b.n	8006aa4 <UART_SetConfig+0x210>
 8006a96:	2310      	movs	r3, #16
 8006a98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a9c:	e002      	b.n	8006aa4 <UART_SetConfig+0x210>
 8006a9e:	2310      	movs	r3, #16
 8006aa0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a25      	ldr	r2, [pc, #148]	; (8006b40 <UART_SetConfig+0x2ac>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	f040 808a 	bne.w	8006bc4 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ab0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ab4:	2b08      	cmp	r3, #8
 8006ab6:	d824      	bhi.n	8006b02 <UART_SetConfig+0x26e>
 8006ab8:	a201      	add	r2, pc, #4	; (adr r2, 8006ac0 <UART_SetConfig+0x22c>)
 8006aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006abe:	bf00      	nop
 8006ac0:	08006ae5 	.word	0x08006ae5
 8006ac4:	08006b03 	.word	0x08006b03
 8006ac8:	08006aed 	.word	0x08006aed
 8006acc:	08006b03 	.word	0x08006b03
 8006ad0:	08006af3 	.word	0x08006af3
 8006ad4:	08006b03 	.word	0x08006b03
 8006ad8:	08006b03 	.word	0x08006b03
 8006adc:	08006b03 	.word	0x08006b03
 8006ae0:	08006afb 	.word	0x08006afb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ae4:	f7fd fc76 	bl	80043d4 <HAL_RCC_GetPCLK1Freq>
 8006ae8:	61f8      	str	r0, [r7, #28]
        break;
 8006aea:	e010      	b.n	8006b0e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006aec:	4b19      	ldr	r3, [pc, #100]	; (8006b54 <UART_SetConfig+0x2c0>)
 8006aee:	61fb      	str	r3, [r7, #28]
        break;
 8006af0:	e00d      	b.n	8006b0e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006af2:	f7fd fbd7 	bl	80042a4 <HAL_RCC_GetSysClockFreq>
 8006af6:	61f8      	str	r0, [r7, #28]
        break;
 8006af8:	e009      	b.n	8006b0e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006afa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006afe:	61fb      	str	r3, [r7, #28]
        break;
 8006b00:	e005      	b.n	8006b0e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8006b02:	2300      	movs	r3, #0
 8006b04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006b0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f000 8109 	beq.w	8006d28 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	685a      	ldr	r2, [r3, #4]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	005b      	lsls	r3, r3, #1
 8006b1e:	4413      	add	r3, r2
 8006b20:	69fa      	ldr	r2, [r7, #28]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d305      	bcc.n	8006b32 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b2c:	69fa      	ldr	r2, [r7, #28]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d912      	bls.n	8006b58 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006b38:	e0f6      	b.n	8006d28 <UART_SetConfig+0x494>
 8006b3a:	bf00      	nop
 8006b3c:	efff69f3 	.word	0xefff69f3
 8006b40:	40008000 	.word	0x40008000
 8006b44:	40013800 	.word	0x40013800
 8006b48:	40021000 	.word	0x40021000
 8006b4c:	40004400 	.word	0x40004400
 8006b50:	40004800 	.word	0x40004800
 8006b54:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	461c      	mov	r4, r3
 8006b5e:	4615      	mov	r5, r2
 8006b60:	f04f 0200 	mov.w	r2, #0
 8006b64:	f04f 0300 	mov.w	r3, #0
 8006b68:	022b      	lsls	r3, r5, #8
 8006b6a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006b6e:	0222      	lsls	r2, r4, #8
 8006b70:	68f9      	ldr	r1, [r7, #12]
 8006b72:	6849      	ldr	r1, [r1, #4]
 8006b74:	0849      	lsrs	r1, r1, #1
 8006b76:	2000      	movs	r0, #0
 8006b78:	4688      	mov	r8, r1
 8006b7a:	4681      	mov	r9, r0
 8006b7c:	eb12 0a08 	adds.w	sl, r2, r8
 8006b80:	eb43 0b09 	adc.w	fp, r3, r9
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	603b      	str	r3, [r7, #0]
 8006b8c:	607a      	str	r2, [r7, #4]
 8006b8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b92:	4650      	mov	r0, sl
 8006b94:	4659      	mov	r1, fp
 8006b96:	f7f9 fb73 	bl	8000280 <__aeabi_uldivmod>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ba8:	d308      	bcc.n	8006bbc <UART_SetConfig+0x328>
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bb0:	d204      	bcs.n	8006bbc <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	69ba      	ldr	r2, [r7, #24]
 8006bb8:	60da      	str	r2, [r3, #12]
 8006bba:	e0b5      	b.n	8006d28 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006bc2:	e0b1      	b.n	8006d28 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	69db      	ldr	r3, [r3, #28]
 8006bc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bcc:	d15d      	bne.n	8006c8a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8006bce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bd2:	2b08      	cmp	r3, #8
 8006bd4:	d827      	bhi.n	8006c26 <UART_SetConfig+0x392>
 8006bd6:	a201      	add	r2, pc, #4	; (adr r2, 8006bdc <UART_SetConfig+0x348>)
 8006bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bdc:	08006c01 	.word	0x08006c01
 8006be0:	08006c09 	.word	0x08006c09
 8006be4:	08006c11 	.word	0x08006c11
 8006be8:	08006c27 	.word	0x08006c27
 8006bec:	08006c17 	.word	0x08006c17
 8006bf0:	08006c27 	.word	0x08006c27
 8006bf4:	08006c27 	.word	0x08006c27
 8006bf8:	08006c27 	.word	0x08006c27
 8006bfc:	08006c1f 	.word	0x08006c1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c00:	f7fd fbe8 	bl	80043d4 <HAL_RCC_GetPCLK1Freq>
 8006c04:	61f8      	str	r0, [r7, #28]
        break;
 8006c06:	e014      	b.n	8006c32 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c08:	f7fd fbfa 	bl	8004400 <HAL_RCC_GetPCLK2Freq>
 8006c0c:	61f8      	str	r0, [r7, #28]
        break;
 8006c0e:	e010      	b.n	8006c32 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c10:	4b4c      	ldr	r3, [pc, #304]	; (8006d44 <UART_SetConfig+0x4b0>)
 8006c12:	61fb      	str	r3, [r7, #28]
        break;
 8006c14:	e00d      	b.n	8006c32 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c16:	f7fd fb45 	bl	80042a4 <HAL_RCC_GetSysClockFreq>
 8006c1a:	61f8      	str	r0, [r7, #28]
        break;
 8006c1c:	e009      	b.n	8006c32 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c22:	61fb      	str	r3, [r7, #28]
        break;
 8006c24:	e005      	b.n	8006c32 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8006c26:	2300      	movs	r3, #0
 8006c28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d077      	beq.n	8006d28 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	005a      	lsls	r2, r3, #1
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	085b      	lsrs	r3, r3, #1
 8006c42:	441a      	add	r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c4c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	2b0f      	cmp	r3, #15
 8006c52:	d916      	bls.n	8006c82 <UART_SetConfig+0x3ee>
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c5a:	d212      	bcs.n	8006c82 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	f023 030f 	bic.w	r3, r3, #15
 8006c64:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	085b      	lsrs	r3, r3, #1
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	f003 0307 	and.w	r3, r3, #7
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	8afb      	ldrh	r3, [r7, #22]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	8afa      	ldrh	r2, [r7, #22]
 8006c7e:	60da      	str	r2, [r3, #12]
 8006c80:	e052      	b.n	8006d28 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c88:	e04e      	b.n	8006d28 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c8e:	2b08      	cmp	r3, #8
 8006c90:	d827      	bhi.n	8006ce2 <UART_SetConfig+0x44e>
 8006c92:	a201      	add	r2, pc, #4	; (adr r2, 8006c98 <UART_SetConfig+0x404>)
 8006c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c98:	08006cbd 	.word	0x08006cbd
 8006c9c:	08006cc5 	.word	0x08006cc5
 8006ca0:	08006ccd 	.word	0x08006ccd
 8006ca4:	08006ce3 	.word	0x08006ce3
 8006ca8:	08006cd3 	.word	0x08006cd3
 8006cac:	08006ce3 	.word	0x08006ce3
 8006cb0:	08006ce3 	.word	0x08006ce3
 8006cb4:	08006ce3 	.word	0x08006ce3
 8006cb8:	08006cdb 	.word	0x08006cdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cbc:	f7fd fb8a 	bl	80043d4 <HAL_RCC_GetPCLK1Freq>
 8006cc0:	61f8      	str	r0, [r7, #28]
        break;
 8006cc2:	e014      	b.n	8006cee <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cc4:	f7fd fb9c 	bl	8004400 <HAL_RCC_GetPCLK2Freq>
 8006cc8:	61f8      	str	r0, [r7, #28]
        break;
 8006cca:	e010      	b.n	8006cee <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ccc:	4b1d      	ldr	r3, [pc, #116]	; (8006d44 <UART_SetConfig+0x4b0>)
 8006cce:	61fb      	str	r3, [r7, #28]
        break;
 8006cd0:	e00d      	b.n	8006cee <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cd2:	f7fd fae7 	bl	80042a4 <HAL_RCC_GetSysClockFreq>
 8006cd6:	61f8      	str	r0, [r7, #28]
        break;
 8006cd8:	e009      	b.n	8006cee <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cde:	61fb      	str	r3, [r7, #28]
        break;
 8006ce0:	e005      	b.n	8006cee <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006cec:	bf00      	nop
    }

    if (pclk != 0U)
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d019      	beq.n	8006d28 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	085a      	lsrs	r2, r3, #1
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	441a      	add	r2, r3
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d06:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	2b0f      	cmp	r3, #15
 8006d0c:	d909      	bls.n	8006d22 <UART_SetConfig+0x48e>
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d14:	d205      	bcs.n	8006d22 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	60da      	str	r2, [r3, #12]
 8006d20:	e002      	b.n	8006d28 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006d34:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3728      	adds	r7, #40	; 0x28
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d42:	bf00      	nop
 8006d44:	00f42400 	.word	0x00f42400

08006d48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d54:	f003 0301 	and.w	r3, r3, #1
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00a      	beq.n	8006d72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	430a      	orrs	r2, r1
 8006d70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d76:	f003 0302 	and.w	r3, r3, #2
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00a      	beq.n	8006d94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	430a      	orrs	r2, r1
 8006d92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d98:	f003 0304 	and.w	r3, r3, #4
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00a      	beq.n	8006db6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	430a      	orrs	r2, r1
 8006db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dba:	f003 0308 	and.w	r3, r3, #8
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00a      	beq.n	8006dd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	430a      	orrs	r2, r1
 8006dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ddc:	f003 0310 	and.w	r3, r3, #16
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d00a      	beq.n	8006dfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	430a      	orrs	r2, r1
 8006df8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfe:	f003 0320 	and.w	r3, r3, #32
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00a      	beq.n	8006e1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d01a      	beq.n	8006e5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	430a      	orrs	r2, r1
 8006e3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e46:	d10a      	bne.n	8006e5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00a      	beq.n	8006e80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	430a      	orrs	r2, r1
 8006e7e:	605a      	str	r2, [r3, #4]
  }
}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b086      	sub	sp, #24
 8006e90:	af02      	add	r7, sp, #8
 8006e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e9c:	f7fa fc90 	bl	80017c0 <HAL_GetTick>
 8006ea0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 0308 	and.w	r3, r3, #8
 8006eac:	2b08      	cmp	r3, #8
 8006eae:	d10e      	bne.n	8006ece <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006eb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006eb4:	9300      	str	r3, [sp, #0]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 f82d 	bl	8006f1e <UART_WaitOnFlagUntilTimeout>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	e023      	b.n	8006f16 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 0304 	and.w	r3, r3, #4
 8006ed8:	2b04      	cmp	r3, #4
 8006eda:	d10e      	bne.n	8006efa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006edc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ee0:	9300      	str	r3, [sp, #0]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 f817 	bl	8006f1e <UART_WaitOnFlagUntilTimeout>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d001      	beq.n	8006efa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e00d      	b.n	8006f16 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2220      	movs	r2, #32
 8006efe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2220      	movs	r2, #32
 8006f04:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b09c      	sub	sp, #112	; 0x70
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	60f8      	str	r0, [r7, #12]
 8006f26:	60b9      	str	r1, [r7, #8]
 8006f28:	603b      	str	r3, [r7, #0]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f2e:	e0a5      	b.n	800707c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f36:	f000 80a1 	beq.w	800707c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f3a:	f7fa fc41 	bl	80017c0 <HAL_GetTick>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d302      	bcc.n	8006f50 <UART_WaitOnFlagUntilTimeout+0x32>
 8006f4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d13e      	bne.n	8006fce <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f58:	e853 3f00 	ldrex	r3, [r3]
 8006f5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f64:	667b      	str	r3, [r7, #100]	; 0x64
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f70:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f76:	e841 2300 	strex	r3, r2, [r1]
 8006f7a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006f7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1e6      	bne.n	8006f50 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	3308      	adds	r3, #8
 8006f88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f8c:	e853 3f00 	ldrex	r3, [r3]
 8006f90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f94:	f023 0301 	bic.w	r3, r3, #1
 8006f98:	663b      	str	r3, [r7, #96]	; 0x60
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	3308      	adds	r3, #8
 8006fa0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006fa2:	64ba      	str	r2, [r7, #72]	; 0x48
 8006fa4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006fa8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006faa:	e841 2300 	strex	r3, r2, [r1]
 8006fae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006fb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1e5      	bne.n	8006f82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2220      	movs	r2, #32
 8006fba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2220      	movs	r2, #32
 8006fc0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e067      	b.n	800709e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 0304 	and.w	r3, r3, #4
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d04f      	beq.n	800707c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fe6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fea:	d147      	bne.n	800707c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ff4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffe:	e853 3f00 	ldrex	r3, [r3]
 8007002:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007006:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800700a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	461a      	mov	r2, r3
 8007012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007014:	637b      	str	r3, [r7, #52]	; 0x34
 8007016:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007018:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800701a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800701c:	e841 2300 	strex	r3, r2, [r1]
 8007020:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007024:	2b00      	cmp	r3, #0
 8007026:	d1e6      	bne.n	8006ff6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	3308      	adds	r3, #8
 800702e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	e853 3f00 	ldrex	r3, [r3]
 8007036:	613b      	str	r3, [r7, #16]
   return(result);
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	f023 0301 	bic.w	r3, r3, #1
 800703e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	3308      	adds	r3, #8
 8007046:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007048:	623a      	str	r2, [r7, #32]
 800704a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704c:	69f9      	ldr	r1, [r7, #28]
 800704e:	6a3a      	ldr	r2, [r7, #32]
 8007050:	e841 2300 	strex	r3, r2, [r1]
 8007054:	61bb      	str	r3, [r7, #24]
   return(result);
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1e5      	bne.n	8007028 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2220      	movs	r2, #32
 8007060:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2220      	movs	r2, #32
 8007066:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2220      	movs	r2, #32
 800706c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	e010      	b.n	800709e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	69da      	ldr	r2, [r3, #28]
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	4013      	ands	r3, r2
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	429a      	cmp	r2, r3
 800708a:	bf0c      	ite	eq
 800708c:	2301      	moveq	r3, #1
 800708e:	2300      	movne	r3, #0
 8007090:	b2db      	uxtb	r3, r3
 8007092:	461a      	mov	r2, r3
 8007094:	79fb      	ldrb	r3, [r7, #7]
 8007096:	429a      	cmp	r2, r3
 8007098:	f43f af4a 	beq.w	8006f30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3770      	adds	r7, #112	; 0x70
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
	...

080070a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b097      	sub	sp, #92	; 0x5c
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	4613      	mov	r3, r2
 80070b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	88fa      	ldrh	r2, [r7, #6]
 80070c0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	88fa      	ldrh	r2, [r7, #6]
 80070c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2200      	movs	r2, #0
 80070d0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070da:	d10e      	bne.n	80070fa <UART_Start_Receive_IT+0x52>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d105      	bne.n	80070f0 <UART_Start_Receive_IT+0x48>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80070ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80070ee:	e02d      	b.n	800714c <UART_Start_Receive_IT+0xa4>
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	22ff      	movs	r2, #255	; 0xff
 80070f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80070f8:	e028      	b.n	800714c <UART_Start_Receive_IT+0xa4>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d10d      	bne.n	800711e <UART_Start_Receive_IT+0x76>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d104      	bne.n	8007114 <UART_Start_Receive_IT+0x6c>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	22ff      	movs	r2, #255	; 0xff
 800710e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007112:	e01b      	b.n	800714c <UART_Start_Receive_IT+0xa4>
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	227f      	movs	r2, #127	; 0x7f
 8007118:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800711c:	e016      	b.n	800714c <UART_Start_Receive_IT+0xa4>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007126:	d10d      	bne.n	8007144 <UART_Start_Receive_IT+0x9c>
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d104      	bne.n	800713a <UART_Start_Receive_IT+0x92>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	227f      	movs	r2, #127	; 0x7f
 8007134:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007138:	e008      	b.n	800714c <UART_Start_Receive_IT+0xa4>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	223f      	movs	r2, #63	; 0x3f
 800713e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007142:	e003      	b.n	800714c <UART_Start_Receive_IT+0xa4>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2222      	movs	r2, #34	; 0x22
 8007158:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	3308      	adds	r3, #8
 8007160:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007164:	e853 3f00 	ldrex	r3, [r3]
 8007168:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800716a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716c:	f043 0301 	orr.w	r3, r3, #1
 8007170:	657b      	str	r3, [r7, #84]	; 0x54
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	3308      	adds	r3, #8
 8007178:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800717a:	64ba      	str	r2, [r7, #72]	; 0x48
 800717c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007180:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007182:	e841 2300 	strex	r3, r2, [r1]
 8007186:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1e5      	bne.n	800715a <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007196:	d107      	bne.n	80071a8 <UART_Start_Receive_IT+0x100>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d103      	bne.n	80071a8 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	4a24      	ldr	r2, [pc, #144]	; (8007234 <UART_Start_Receive_IT+0x18c>)
 80071a4:	665a      	str	r2, [r3, #100]	; 0x64
 80071a6:	e002      	b.n	80071ae <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	4a23      	ldr	r2, [pc, #140]	; (8007238 <UART_Start_Receive_IT+0x190>)
 80071ac:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d019      	beq.n	80071f2 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c6:	e853 3f00 	ldrex	r3, [r3]
 80071ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ce:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80071d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	461a      	mov	r2, r3
 80071da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071dc:	637b      	str	r3, [r7, #52]	; 0x34
 80071de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071e4:	e841 2300 	strex	r3, r2, [r1]
 80071e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80071ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d1e6      	bne.n	80071be <UART_Start_Receive_IT+0x116>
 80071f0:	e018      	b.n	8007224 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	e853 3f00 	ldrex	r3, [r3]
 80071fe:	613b      	str	r3, [r7, #16]
   return(result);
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	f043 0320 	orr.w	r3, r3, #32
 8007206:	653b      	str	r3, [r7, #80]	; 0x50
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	461a      	mov	r2, r3
 800720e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007210:	623b      	str	r3, [r7, #32]
 8007212:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007214:	69f9      	ldr	r1, [r7, #28]
 8007216:	6a3a      	ldr	r2, [r7, #32]
 8007218:	e841 2300 	strex	r3, r2, [r1]
 800721c:	61bb      	str	r3, [r7, #24]
   return(result);
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d1e6      	bne.n	80071f2 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	375c      	adds	r7, #92	; 0x5c
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	0800765b 	.word	0x0800765b
 8007238:	080074fb 	.word	0x080074fb

0800723c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800723c:	b480      	push	{r7}
 800723e:	b095      	sub	sp, #84	; 0x54
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800724c:	e853 3f00 	ldrex	r3, [r3]
 8007250:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007254:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007258:	64fb      	str	r3, [r7, #76]	; 0x4c
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	461a      	mov	r2, r3
 8007260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007262:	643b      	str	r3, [r7, #64]	; 0x40
 8007264:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007266:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007268:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800726a:	e841 2300 	strex	r3, r2, [r1]
 800726e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1e6      	bne.n	8007244 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	3308      	adds	r3, #8
 800727c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727e:	6a3b      	ldr	r3, [r7, #32]
 8007280:	e853 3f00 	ldrex	r3, [r3]
 8007284:	61fb      	str	r3, [r7, #28]
   return(result);
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	f023 0301 	bic.w	r3, r3, #1
 800728c:	64bb      	str	r3, [r7, #72]	; 0x48
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	3308      	adds	r3, #8
 8007294:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007296:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007298:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800729c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800729e:	e841 2300 	strex	r3, r2, [r1]
 80072a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1e5      	bne.n	8007276 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d118      	bne.n	80072e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	e853 3f00 	ldrex	r3, [r3]
 80072be:	60bb      	str	r3, [r7, #8]
   return(result);
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	f023 0310 	bic.w	r3, r3, #16
 80072c6:	647b      	str	r3, [r7, #68]	; 0x44
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	461a      	mov	r2, r3
 80072ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072d0:	61bb      	str	r3, [r7, #24]
 80072d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d4:	6979      	ldr	r1, [r7, #20]
 80072d6:	69ba      	ldr	r2, [r7, #24]
 80072d8:	e841 2300 	strex	r3, r2, [r1]
 80072dc:	613b      	str	r3, [r7, #16]
   return(result);
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d1e6      	bne.n	80072b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2220      	movs	r2, #32
 80072e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80072f6:	bf00      	nop
 80072f8:	3754      	adds	r7, #84	; 0x54
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr

08007302 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b084      	sub	sp, #16
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800730e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2200      	movs	r2, #0
 8007314:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	f7ff faa1 	bl	8006868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007326:	bf00      	nop
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800732e:	b480      	push	{r7}
 8007330:	b08f      	sub	sp, #60	; 0x3c
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800733a:	2b21      	cmp	r3, #33	; 0x21
 800733c:	d14d      	bne.n	80073da <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007344:	b29b      	uxth	r3, r3
 8007346:	2b00      	cmp	r3, #0
 8007348:	d132      	bne.n	80073b0 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007350:	6a3b      	ldr	r3, [r7, #32]
 8007352:	e853 3f00 	ldrex	r3, [r3]
 8007356:	61fb      	str	r3, [r7, #28]
   return(result);
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800735e:	637b      	str	r3, [r7, #52]	; 0x34
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	461a      	mov	r2, r3
 8007366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800736a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800736e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007370:	e841 2300 	strex	r3, r2, [r1]
 8007374:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1e6      	bne.n	800734a <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	e853 3f00 	ldrex	r3, [r3]
 8007388:	60bb      	str	r3, [r7, #8]
   return(result);
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007390:	633b      	str	r3, [r7, #48]	; 0x30
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	461a      	mov	r2, r3
 8007398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739a:	61bb      	str	r3, [r7, #24]
 800739c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739e:	6979      	ldr	r1, [r7, #20]
 80073a0:	69ba      	ldr	r2, [r7, #24]
 80073a2:	e841 2300 	strex	r3, r2, [r1]
 80073a6:	613b      	str	r3, [r7, #16]
   return(result);
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d1e6      	bne.n	800737c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80073ae:	e014      	b.n	80073da <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073b4:	781a      	ldrb	r2, [r3, #0]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	b292      	uxth	r2, r2
 80073bc:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073c2:	1c5a      	adds	r2, r3, #1
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	3b01      	subs	r3, #1
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80073da:	bf00      	nop
 80073dc:	373c      	adds	r7, #60	; 0x3c
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b091      	sub	sp, #68	; 0x44
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073f2:	2b21      	cmp	r3, #33	; 0x21
 80073f4:	d151      	bne.n	800749a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d132      	bne.n	8007468 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740a:	e853 3f00 	ldrex	r3, [r3]
 800740e:	623b      	str	r3, [r7, #32]
   return(result);
 8007410:	6a3b      	ldr	r3, [r7, #32]
 8007412:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007416:	63bb      	str	r3, [r7, #56]	; 0x38
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	461a      	mov	r2, r3
 800741e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007420:	633b      	str	r3, [r7, #48]	; 0x30
 8007422:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007424:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007428:	e841 2300 	strex	r3, r2, [r1]
 800742c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800742e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007430:	2b00      	cmp	r3, #0
 8007432:	d1e6      	bne.n	8007402 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	e853 3f00 	ldrex	r3, [r3]
 8007440:	60fb      	str	r3, [r7, #12]
   return(result);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007448:	637b      	str	r3, [r7, #52]	; 0x34
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	461a      	mov	r2, r3
 8007450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007452:	61fb      	str	r3, [r7, #28]
 8007454:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007456:	69b9      	ldr	r1, [r7, #24]
 8007458:	69fa      	ldr	r2, [r7, #28]
 800745a:	e841 2300 	strex	r3, r2, [r1]
 800745e:	617b      	str	r3, [r7, #20]
   return(result);
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1e6      	bne.n	8007434 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007466:	e018      	b.n	800749a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800746c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800746e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007470:	881a      	ldrh	r2, [r3, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800747a:	b292      	uxth	r2, r2
 800747c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007482:	1c9a      	adds	r2, r3, #2
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800748e:	b29b      	uxth	r3, r3
 8007490:	3b01      	subs	r3, #1
 8007492:	b29a      	uxth	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800749a:	bf00      	nop
 800749c:	3744      	adds	r7, #68	; 0x44
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b088      	sub	sp, #32
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	e853 3f00 	ldrex	r3, [r3]
 80074ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074c2:	61fb      	str	r3, [r7, #28]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	461a      	mov	r2, r3
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	61bb      	str	r3, [r7, #24]
 80074ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d0:	6979      	ldr	r1, [r7, #20]
 80074d2:	69ba      	ldr	r2, [r7, #24]
 80074d4:	e841 2300 	strex	r3, r2, [r1]
 80074d8:	613b      	str	r3, [r7, #16]
   return(result);
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1e6      	bne.n	80074ae <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2220      	movs	r2, #32
 80074e4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f7ff f9b1 	bl	8006854 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074f2:	bf00      	nop
 80074f4:	3720      	adds	r7, #32
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80074fa:	b580      	push	{r7, lr}
 80074fc:	b096      	sub	sp, #88	; 0x58
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007508:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007510:	2b22      	cmp	r3, #34	; 0x22
 8007512:	f040 8094 	bne.w	800763e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800751c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007520:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007524:	b2d9      	uxtb	r1, r3
 8007526:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800752a:	b2da      	uxtb	r2, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007530:	400a      	ands	r2, r1
 8007532:	b2d2      	uxtb	r2, r2
 8007534:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800753a:	1c5a      	adds	r2, r3, #1
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007546:	b29b      	uxth	r3, r3
 8007548:	3b01      	subs	r3, #1
 800754a:	b29a      	uxth	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007558:	b29b      	uxth	r3, r3
 800755a:	2b00      	cmp	r3, #0
 800755c:	d179      	bne.n	8007652 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007566:	e853 3f00 	ldrex	r3, [r3]
 800756a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800756c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800756e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007572:	653b      	str	r3, [r7, #80]	; 0x50
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	461a      	mov	r2, r3
 800757a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800757c:	647b      	str	r3, [r7, #68]	; 0x44
 800757e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007580:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007582:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007584:	e841 2300 	strex	r3, r2, [r1]
 8007588:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800758a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1e6      	bne.n	800755e <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	3308      	adds	r3, #8
 8007596:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759a:	e853 3f00 	ldrex	r3, [r3]
 800759e:	623b      	str	r3, [r7, #32]
   return(result);
 80075a0:	6a3b      	ldr	r3, [r7, #32]
 80075a2:	f023 0301 	bic.w	r3, r3, #1
 80075a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	3308      	adds	r3, #8
 80075ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80075b0:	633a      	str	r2, [r7, #48]	; 0x30
 80075b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075b8:	e841 2300 	strex	r3, r2, [r1]
 80075bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1e5      	bne.n	8007590 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2220      	movs	r2, #32
 80075c8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d12e      	bne.n	8007636 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	e853 3f00 	ldrex	r3, [r3]
 80075ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f023 0310 	bic.w	r3, r3, #16
 80075f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	461a      	mov	r2, r3
 80075fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075fc:	61fb      	str	r3, [r7, #28]
 80075fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007600:	69b9      	ldr	r1, [r7, #24]
 8007602:	69fa      	ldr	r2, [r7, #28]
 8007604:	e841 2300 	strex	r3, r2, [r1]
 8007608:	617b      	str	r3, [r7, #20]
   return(result);
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1e6      	bne.n	80075de <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	69db      	ldr	r3, [r3, #28]
 8007616:	f003 0310 	and.w	r3, r3, #16
 800761a:	2b10      	cmp	r3, #16
 800761c:	d103      	bne.n	8007626 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2210      	movs	r2, #16
 8007624:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800762c:	4619      	mov	r1, r3
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f7ff f924 	bl	800687c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007634:	e00d      	b.n	8007652 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f7f9 f890 	bl	800075c <HAL_UART_RxCpltCallback>
}
 800763c:	e009      	b.n	8007652 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	8b1b      	ldrh	r3, [r3, #24]
 8007644:	b29a      	uxth	r2, r3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f042 0208 	orr.w	r2, r2, #8
 800764e:	b292      	uxth	r2, r2
 8007650:	831a      	strh	r2, [r3, #24]
}
 8007652:	bf00      	nop
 8007654:	3758      	adds	r7, #88	; 0x58
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800765a:	b580      	push	{r7, lr}
 800765c:	b096      	sub	sp, #88	; 0x58
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007668:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007670:	2b22      	cmp	r3, #34	; 0x22
 8007672:	f040 8094 	bne.w	800779e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800767c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007684:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007686:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800768a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800768e:	4013      	ands	r3, r2
 8007690:	b29a      	uxth	r2, r3
 8007692:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007694:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800769a:	1c9a      	adds	r2, r3, #2
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	3b01      	subs	r3, #1
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d179      	bne.n	80077b2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076c6:	e853 3f00 	ldrex	r3, [r3]
 80076ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80076cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	461a      	mov	r2, r3
 80076da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076dc:	643b      	str	r3, [r7, #64]	; 0x40
 80076de:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80076e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076e4:	e841 2300 	strex	r3, r2, [r1]
 80076e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1e6      	bne.n	80076be <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	3308      	adds	r3, #8
 80076f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f8:	6a3b      	ldr	r3, [r7, #32]
 80076fa:	e853 3f00 	ldrex	r3, [r3]
 80076fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	f023 0301 	bic.w	r3, r3, #1
 8007706:	64bb      	str	r3, [r7, #72]	; 0x48
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	3308      	adds	r3, #8
 800770e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007710:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007712:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007714:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007716:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007718:	e841 2300 	strex	r3, r2, [r1]
 800771c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800771e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1e5      	bne.n	80076f0 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2220      	movs	r2, #32
 8007728:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007734:	2b01      	cmp	r3, #1
 8007736:	d12e      	bne.n	8007796 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	e853 3f00 	ldrex	r3, [r3]
 800774a:	60bb      	str	r3, [r7, #8]
   return(result);
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	f023 0310 	bic.w	r3, r3, #16
 8007752:	647b      	str	r3, [r7, #68]	; 0x44
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	461a      	mov	r2, r3
 800775a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800775c:	61bb      	str	r3, [r7, #24]
 800775e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007760:	6979      	ldr	r1, [r7, #20]
 8007762:	69ba      	ldr	r2, [r7, #24]
 8007764:	e841 2300 	strex	r3, r2, [r1]
 8007768:	613b      	str	r3, [r7, #16]
   return(result);
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d1e6      	bne.n	800773e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	69db      	ldr	r3, [r3, #28]
 8007776:	f003 0310 	and.w	r3, r3, #16
 800777a:	2b10      	cmp	r3, #16
 800777c:	d103      	bne.n	8007786 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2210      	movs	r2, #16
 8007784:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800778c:	4619      	mov	r1, r3
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f7ff f874 	bl	800687c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007794:	e00d      	b.n	80077b2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f7f8 ffe0 	bl	800075c <HAL_UART_RxCpltCallback>
}
 800779c:	e009      	b.n	80077b2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	8b1b      	ldrh	r3, [r3, #24]
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f042 0208 	orr.w	r2, r2, #8
 80077ae:	b292      	uxth	r2, r2
 80077b0:	831a      	strh	r2, [r3, #24]
}
 80077b2:	bf00      	nop
 80077b4:	3758      	adds	r7, #88	; 0x58
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}

080077ba <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80077ba:	b480      	push	{r7}
 80077bc:	b083      	sub	sp, #12
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80077c2:	bf00      	nop
 80077c4:	370c      	adds	r7, #12
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr
	...

080077d0 <__errno>:
 80077d0:	4b01      	ldr	r3, [pc, #4]	; (80077d8 <__errno+0x8>)
 80077d2:	6818      	ldr	r0, [r3, #0]
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	20000028 	.word	0x20000028

080077dc <__libc_init_array>:
 80077dc:	b570      	push	{r4, r5, r6, lr}
 80077de:	4d0d      	ldr	r5, [pc, #52]	; (8007814 <__libc_init_array+0x38>)
 80077e0:	4c0d      	ldr	r4, [pc, #52]	; (8007818 <__libc_init_array+0x3c>)
 80077e2:	1b64      	subs	r4, r4, r5
 80077e4:	10a4      	asrs	r4, r4, #2
 80077e6:	2600      	movs	r6, #0
 80077e8:	42a6      	cmp	r6, r4
 80077ea:	d109      	bne.n	8007800 <__libc_init_array+0x24>
 80077ec:	4d0b      	ldr	r5, [pc, #44]	; (800781c <__libc_init_array+0x40>)
 80077ee:	4c0c      	ldr	r4, [pc, #48]	; (8007820 <__libc_init_array+0x44>)
 80077f0:	f001 f9ea 	bl	8008bc8 <_init>
 80077f4:	1b64      	subs	r4, r4, r5
 80077f6:	10a4      	asrs	r4, r4, #2
 80077f8:	2600      	movs	r6, #0
 80077fa:	42a6      	cmp	r6, r4
 80077fc:	d105      	bne.n	800780a <__libc_init_array+0x2e>
 80077fe:	bd70      	pop	{r4, r5, r6, pc}
 8007800:	f855 3b04 	ldr.w	r3, [r5], #4
 8007804:	4798      	blx	r3
 8007806:	3601      	adds	r6, #1
 8007808:	e7ee      	b.n	80077e8 <__libc_init_array+0xc>
 800780a:	f855 3b04 	ldr.w	r3, [r5], #4
 800780e:	4798      	blx	r3
 8007810:	3601      	adds	r6, #1
 8007812:	e7f2      	b.n	80077fa <__libc_init_array+0x1e>
 8007814:	08009090 	.word	0x08009090
 8007818:	08009090 	.word	0x08009090
 800781c:	08009090 	.word	0x08009090
 8007820:	08009094 	.word	0x08009094

08007824 <memset>:
 8007824:	4402      	add	r2, r0
 8007826:	4603      	mov	r3, r0
 8007828:	4293      	cmp	r3, r2
 800782a:	d100      	bne.n	800782e <memset+0xa>
 800782c:	4770      	bx	lr
 800782e:	f803 1b01 	strb.w	r1, [r3], #1
 8007832:	e7f9      	b.n	8007828 <memset+0x4>

08007834 <siprintf>:
 8007834:	b40e      	push	{r1, r2, r3}
 8007836:	b500      	push	{lr}
 8007838:	b09c      	sub	sp, #112	; 0x70
 800783a:	ab1d      	add	r3, sp, #116	; 0x74
 800783c:	9002      	str	r0, [sp, #8]
 800783e:	9006      	str	r0, [sp, #24]
 8007840:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007844:	4809      	ldr	r0, [pc, #36]	; (800786c <siprintf+0x38>)
 8007846:	9107      	str	r1, [sp, #28]
 8007848:	9104      	str	r1, [sp, #16]
 800784a:	4909      	ldr	r1, [pc, #36]	; (8007870 <siprintf+0x3c>)
 800784c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007850:	9105      	str	r1, [sp, #20]
 8007852:	6800      	ldr	r0, [r0, #0]
 8007854:	9301      	str	r3, [sp, #4]
 8007856:	a902      	add	r1, sp, #8
 8007858:	f000 f868 	bl	800792c <_svfiprintf_r>
 800785c:	9b02      	ldr	r3, [sp, #8]
 800785e:	2200      	movs	r2, #0
 8007860:	701a      	strb	r2, [r3, #0]
 8007862:	b01c      	add	sp, #112	; 0x70
 8007864:	f85d eb04 	ldr.w	lr, [sp], #4
 8007868:	b003      	add	sp, #12
 800786a:	4770      	bx	lr
 800786c:	20000028 	.word	0x20000028
 8007870:	ffff0208 	.word	0xffff0208

08007874 <__ssputs_r>:
 8007874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007878:	688e      	ldr	r6, [r1, #8]
 800787a:	429e      	cmp	r6, r3
 800787c:	4682      	mov	sl, r0
 800787e:	460c      	mov	r4, r1
 8007880:	4690      	mov	r8, r2
 8007882:	461f      	mov	r7, r3
 8007884:	d838      	bhi.n	80078f8 <__ssputs_r+0x84>
 8007886:	898a      	ldrh	r2, [r1, #12]
 8007888:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800788c:	d032      	beq.n	80078f4 <__ssputs_r+0x80>
 800788e:	6825      	ldr	r5, [r4, #0]
 8007890:	6909      	ldr	r1, [r1, #16]
 8007892:	eba5 0901 	sub.w	r9, r5, r1
 8007896:	6965      	ldr	r5, [r4, #20]
 8007898:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800789c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80078a0:	3301      	adds	r3, #1
 80078a2:	444b      	add	r3, r9
 80078a4:	106d      	asrs	r5, r5, #1
 80078a6:	429d      	cmp	r5, r3
 80078a8:	bf38      	it	cc
 80078aa:	461d      	movcc	r5, r3
 80078ac:	0553      	lsls	r3, r2, #21
 80078ae:	d531      	bpl.n	8007914 <__ssputs_r+0xa0>
 80078b0:	4629      	mov	r1, r5
 80078b2:	f000 fb63 	bl	8007f7c <_malloc_r>
 80078b6:	4606      	mov	r6, r0
 80078b8:	b950      	cbnz	r0, 80078d0 <__ssputs_r+0x5c>
 80078ba:	230c      	movs	r3, #12
 80078bc:	f8ca 3000 	str.w	r3, [sl]
 80078c0:	89a3      	ldrh	r3, [r4, #12]
 80078c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078c6:	81a3      	strh	r3, [r4, #12]
 80078c8:	f04f 30ff 	mov.w	r0, #4294967295
 80078cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078d0:	6921      	ldr	r1, [r4, #16]
 80078d2:	464a      	mov	r2, r9
 80078d4:	f000 fabe 	bl	8007e54 <memcpy>
 80078d8:	89a3      	ldrh	r3, [r4, #12]
 80078da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80078de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078e2:	81a3      	strh	r3, [r4, #12]
 80078e4:	6126      	str	r6, [r4, #16]
 80078e6:	6165      	str	r5, [r4, #20]
 80078e8:	444e      	add	r6, r9
 80078ea:	eba5 0509 	sub.w	r5, r5, r9
 80078ee:	6026      	str	r6, [r4, #0]
 80078f0:	60a5      	str	r5, [r4, #8]
 80078f2:	463e      	mov	r6, r7
 80078f4:	42be      	cmp	r6, r7
 80078f6:	d900      	bls.n	80078fa <__ssputs_r+0x86>
 80078f8:	463e      	mov	r6, r7
 80078fa:	6820      	ldr	r0, [r4, #0]
 80078fc:	4632      	mov	r2, r6
 80078fe:	4641      	mov	r1, r8
 8007900:	f000 fab6 	bl	8007e70 <memmove>
 8007904:	68a3      	ldr	r3, [r4, #8]
 8007906:	1b9b      	subs	r3, r3, r6
 8007908:	60a3      	str	r3, [r4, #8]
 800790a:	6823      	ldr	r3, [r4, #0]
 800790c:	4433      	add	r3, r6
 800790e:	6023      	str	r3, [r4, #0]
 8007910:	2000      	movs	r0, #0
 8007912:	e7db      	b.n	80078cc <__ssputs_r+0x58>
 8007914:	462a      	mov	r2, r5
 8007916:	f000 fba5 	bl	8008064 <_realloc_r>
 800791a:	4606      	mov	r6, r0
 800791c:	2800      	cmp	r0, #0
 800791e:	d1e1      	bne.n	80078e4 <__ssputs_r+0x70>
 8007920:	6921      	ldr	r1, [r4, #16]
 8007922:	4650      	mov	r0, sl
 8007924:	f000 fabe 	bl	8007ea4 <_free_r>
 8007928:	e7c7      	b.n	80078ba <__ssputs_r+0x46>
	...

0800792c <_svfiprintf_r>:
 800792c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007930:	4698      	mov	r8, r3
 8007932:	898b      	ldrh	r3, [r1, #12]
 8007934:	061b      	lsls	r3, r3, #24
 8007936:	b09d      	sub	sp, #116	; 0x74
 8007938:	4607      	mov	r7, r0
 800793a:	460d      	mov	r5, r1
 800793c:	4614      	mov	r4, r2
 800793e:	d50e      	bpl.n	800795e <_svfiprintf_r+0x32>
 8007940:	690b      	ldr	r3, [r1, #16]
 8007942:	b963      	cbnz	r3, 800795e <_svfiprintf_r+0x32>
 8007944:	2140      	movs	r1, #64	; 0x40
 8007946:	f000 fb19 	bl	8007f7c <_malloc_r>
 800794a:	6028      	str	r0, [r5, #0]
 800794c:	6128      	str	r0, [r5, #16]
 800794e:	b920      	cbnz	r0, 800795a <_svfiprintf_r+0x2e>
 8007950:	230c      	movs	r3, #12
 8007952:	603b      	str	r3, [r7, #0]
 8007954:	f04f 30ff 	mov.w	r0, #4294967295
 8007958:	e0d1      	b.n	8007afe <_svfiprintf_r+0x1d2>
 800795a:	2340      	movs	r3, #64	; 0x40
 800795c:	616b      	str	r3, [r5, #20]
 800795e:	2300      	movs	r3, #0
 8007960:	9309      	str	r3, [sp, #36]	; 0x24
 8007962:	2320      	movs	r3, #32
 8007964:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007968:	f8cd 800c 	str.w	r8, [sp, #12]
 800796c:	2330      	movs	r3, #48	; 0x30
 800796e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007b18 <_svfiprintf_r+0x1ec>
 8007972:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007976:	f04f 0901 	mov.w	r9, #1
 800797a:	4623      	mov	r3, r4
 800797c:	469a      	mov	sl, r3
 800797e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007982:	b10a      	cbz	r2, 8007988 <_svfiprintf_r+0x5c>
 8007984:	2a25      	cmp	r2, #37	; 0x25
 8007986:	d1f9      	bne.n	800797c <_svfiprintf_r+0x50>
 8007988:	ebba 0b04 	subs.w	fp, sl, r4
 800798c:	d00b      	beq.n	80079a6 <_svfiprintf_r+0x7a>
 800798e:	465b      	mov	r3, fp
 8007990:	4622      	mov	r2, r4
 8007992:	4629      	mov	r1, r5
 8007994:	4638      	mov	r0, r7
 8007996:	f7ff ff6d 	bl	8007874 <__ssputs_r>
 800799a:	3001      	adds	r0, #1
 800799c:	f000 80aa 	beq.w	8007af4 <_svfiprintf_r+0x1c8>
 80079a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079a2:	445a      	add	r2, fp
 80079a4:	9209      	str	r2, [sp, #36]	; 0x24
 80079a6:	f89a 3000 	ldrb.w	r3, [sl]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	f000 80a2 	beq.w	8007af4 <_svfiprintf_r+0x1c8>
 80079b0:	2300      	movs	r3, #0
 80079b2:	f04f 32ff 	mov.w	r2, #4294967295
 80079b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079ba:	f10a 0a01 	add.w	sl, sl, #1
 80079be:	9304      	str	r3, [sp, #16]
 80079c0:	9307      	str	r3, [sp, #28]
 80079c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079c6:	931a      	str	r3, [sp, #104]	; 0x68
 80079c8:	4654      	mov	r4, sl
 80079ca:	2205      	movs	r2, #5
 80079cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079d0:	4851      	ldr	r0, [pc, #324]	; (8007b18 <_svfiprintf_r+0x1ec>)
 80079d2:	f7f8 fc05 	bl	80001e0 <memchr>
 80079d6:	9a04      	ldr	r2, [sp, #16]
 80079d8:	b9d8      	cbnz	r0, 8007a12 <_svfiprintf_r+0xe6>
 80079da:	06d0      	lsls	r0, r2, #27
 80079dc:	bf44      	itt	mi
 80079de:	2320      	movmi	r3, #32
 80079e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079e4:	0711      	lsls	r1, r2, #28
 80079e6:	bf44      	itt	mi
 80079e8:	232b      	movmi	r3, #43	; 0x2b
 80079ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079ee:	f89a 3000 	ldrb.w	r3, [sl]
 80079f2:	2b2a      	cmp	r3, #42	; 0x2a
 80079f4:	d015      	beq.n	8007a22 <_svfiprintf_r+0xf6>
 80079f6:	9a07      	ldr	r2, [sp, #28]
 80079f8:	4654      	mov	r4, sl
 80079fa:	2000      	movs	r0, #0
 80079fc:	f04f 0c0a 	mov.w	ip, #10
 8007a00:	4621      	mov	r1, r4
 8007a02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a06:	3b30      	subs	r3, #48	; 0x30
 8007a08:	2b09      	cmp	r3, #9
 8007a0a:	d94e      	bls.n	8007aaa <_svfiprintf_r+0x17e>
 8007a0c:	b1b0      	cbz	r0, 8007a3c <_svfiprintf_r+0x110>
 8007a0e:	9207      	str	r2, [sp, #28]
 8007a10:	e014      	b.n	8007a3c <_svfiprintf_r+0x110>
 8007a12:	eba0 0308 	sub.w	r3, r0, r8
 8007a16:	fa09 f303 	lsl.w	r3, r9, r3
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	9304      	str	r3, [sp, #16]
 8007a1e:	46a2      	mov	sl, r4
 8007a20:	e7d2      	b.n	80079c8 <_svfiprintf_r+0x9c>
 8007a22:	9b03      	ldr	r3, [sp, #12]
 8007a24:	1d19      	adds	r1, r3, #4
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	9103      	str	r1, [sp, #12]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	bfbb      	ittet	lt
 8007a2e:	425b      	neglt	r3, r3
 8007a30:	f042 0202 	orrlt.w	r2, r2, #2
 8007a34:	9307      	strge	r3, [sp, #28]
 8007a36:	9307      	strlt	r3, [sp, #28]
 8007a38:	bfb8      	it	lt
 8007a3a:	9204      	strlt	r2, [sp, #16]
 8007a3c:	7823      	ldrb	r3, [r4, #0]
 8007a3e:	2b2e      	cmp	r3, #46	; 0x2e
 8007a40:	d10c      	bne.n	8007a5c <_svfiprintf_r+0x130>
 8007a42:	7863      	ldrb	r3, [r4, #1]
 8007a44:	2b2a      	cmp	r3, #42	; 0x2a
 8007a46:	d135      	bne.n	8007ab4 <_svfiprintf_r+0x188>
 8007a48:	9b03      	ldr	r3, [sp, #12]
 8007a4a:	1d1a      	adds	r2, r3, #4
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	9203      	str	r2, [sp, #12]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	bfb8      	it	lt
 8007a54:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a58:	3402      	adds	r4, #2
 8007a5a:	9305      	str	r3, [sp, #20]
 8007a5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007b28 <_svfiprintf_r+0x1fc>
 8007a60:	7821      	ldrb	r1, [r4, #0]
 8007a62:	2203      	movs	r2, #3
 8007a64:	4650      	mov	r0, sl
 8007a66:	f7f8 fbbb 	bl	80001e0 <memchr>
 8007a6a:	b140      	cbz	r0, 8007a7e <_svfiprintf_r+0x152>
 8007a6c:	2340      	movs	r3, #64	; 0x40
 8007a6e:	eba0 000a 	sub.w	r0, r0, sl
 8007a72:	fa03 f000 	lsl.w	r0, r3, r0
 8007a76:	9b04      	ldr	r3, [sp, #16]
 8007a78:	4303      	orrs	r3, r0
 8007a7a:	3401      	adds	r4, #1
 8007a7c:	9304      	str	r3, [sp, #16]
 8007a7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a82:	4826      	ldr	r0, [pc, #152]	; (8007b1c <_svfiprintf_r+0x1f0>)
 8007a84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a88:	2206      	movs	r2, #6
 8007a8a:	f7f8 fba9 	bl	80001e0 <memchr>
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	d038      	beq.n	8007b04 <_svfiprintf_r+0x1d8>
 8007a92:	4b23      	ldr	r3, [pc, #140]	; (8007b20 <_svfiprintf_r+0x1f4>)
 8007a94:	bb1b      	cbnz	r3, 8007ade <_svfiprintf_r+0x1b2>
 8007a96:	9b03      	ldr	r3, [sp, #12]
 8007a98:	3307      	adds	r3, #7
 8007a9a:	f023 0307 	bic.w	r3, r3, #7
 8007a9e:	3308      	adds	r3, #8
 8007aa0:	9303      	str	r3, [sp, #12]
 8007aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aa4:	4433      	add	r3, r6
 8007aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8007aa8:	e767      	b.n	800797a <_svfiprintf_r+0x4e>
 8007aaa:	fb0c 3202 	mla	r2, ip, r2, r3
 8007aae:	460c      	mov	r4, r1
 8007ab0:	2001      	movs	r0, #1
 8007ab2:	e7a5      	b.n	8007a00 <_svfiprintf_r+0xd4>
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	3401      	adds	r4, #1
 8007ab8:	9305      	str	r3, [sp, #20]
 8007aba:	4619      	mov	r1, r3
 8007abc:	f04f 0c0a 	mov.w	ip, #10
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ac6:	3a30      	subs	r2, #48	; 0x30
 8007ac8:	2a09      	cmp	r2, #9
 8007aca:	d903      	bls.n	8007ad4 <_svfiprintf_r+0x1a8>
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d0c5      	beq.n	8007a5c <_svfiprintf_r+0x130>
 8007ad0:	9105      	str	r1, [sp, #20]
 8007ad2:	e7c3      	b.n	8007a5c <_svfiprintf_r+0x130>
 8007ad4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ad8:	4604      	mov	r4, r0
 8007ada:	2301      	movs	r3, #1
 8007adc:	e7f0      	b.n	8007ac0 <_svfiprintf_r+0x194>
 8007ade:	ab03      	add	r3, sp, #12
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	462a      	mov	r2, r5
 8007ae4:	4b0f      	ldr	r3, [pc, #60]	; (8007b24 <_svfiprintf_r+0x1f8>)
 8007ae6:	a904      	add	r1, sp, #16
 8007ae8:	4638      	mov	r0, r7
 8007aea:	f3af 8000 	nop.w
 8007aee:	1c42      	adds	r2, r0, #1
 8007af0:	4606      	mov	r6, r0
 8007af2:	d1d6      	bne.n	8007aa2 <_svfiprintf_r+0x176>
 8007af4:	89ab      	ldrh	r3, [r5, #12]
 8007af6:	065b      	lsls	r3, r3, #25
 8007af8:	f53f af2c 	bmi.w	8007954 <_svfiprintf_r+0x28>
 8007afc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007afe:	b01d      	add	sp, #116	; 0x74
 8007b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b04:	ab03      	add	r3, sp, #12
 8007b06:	9300      	str	r3, [sp, #0]
 8007b08:	462a      	mov	r2, r5
 8007b0a:	4b06      	ldr	r3, [pc, #24]	; (8007b24 <_svfiprintf_r+0x1f8>)
 8007b0c:	a904      	add	r1, sp, #16
 8007b0e:	4638      	mov	r0, r7
 8007b10:	f000 f87a 	bl	8007c08 <_printf_i>
 8007b14:	e7eb      	b.n	8007aee <_svfiprintf_r+0x1c2>
 8007b16:	bf00      	nop
 8007b18:	08008c84 	.word	0x08008c84
 8007b1c:	08008c8e 	.word	0x08008c8e
 8007b20:	00000000 	.word	0x00000000
 8007b24:	08007875 	.word	0x08007875
 8007b28:	08008c8a 	.word	0x08008c8a

08007b2c <_printf_common>:
 8007b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b30:	4616      	mov	r6, r2
 8007b32:	4699      	mov	r9, r3
 8007b34:	688a      	ldr	r2, [r1, #8]
 8007b36:	690b      	ldr	r3, [r1, #16]
 8007b38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	bfb8      	it	lt
 8007b40:	4613      	movlt	r3, r2
 8007b42:	6033      	str	r3, [r6, #0]
 8007b44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b48:	4607      	mov	r7, r0
 8007b4a:	460c      	mov	r4, r1
 8007b4c:	b10a      	cbz	r2, 8007b52 <_printf_common+0x26>
 8007b4e:	3301      	adds	r3, #1
 8007b50:	6033      	str	r3, [r6, #0]
 8007b52:	6823      	ldr	r3, [r4, #0]
 8007b54:	0699      	lsls	r1, r3, #26
 8007b56:	bf42      	ittt	mi
 8007b58:	6833      	ldrmi	r3, [r6, #0]
 8007b5a:	3302      	addmi	r3, #2
 8007b5c:	6033      	strmi	r3, [r6, #0]
 8007b5e:	6825      	ldr	r5, [r4, #0]
 8007b60:	f015 0506 	ands.w	r5, r5, #6
 8007b64:	d106      	bne.n	8007b74 <_printf_common+0x48>
 8007b66:	f104 0a19 	add.w	sl, r4, #25
 8007b6a:	68e3      	ldr	r3, [r4, #12]
 8007b6c:	6832      	ldr	r2, [r6, #0]
 8007b6e:	1a9b      	subs	r3, r3, r2
 8007b70:	42ab      	cmp	r3, r5
 8007b72:	dc26      	bgt.n	8007bc2 <_printf_common+0x96>
 8007b74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b78:	1e13      	subs	r3, r2, #0
 8007b7a:	6822      	ldr	r2, [r4, #0]
 8007b7c:	bf18      	it	ne
 8007b7e:	2301      	movne	r3, #1
 8007b80:	0692      	lsls	r2, r2, #26
 8007b82:	d42b      	bmi.n	8007bdc <_printf_common+0xb0>
 8007b84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b88:	4649      	mov	r1, r9
 8007b8a:	4638      	mov	r0, r7
 8007b8c:	47c0      	blx	r8
 8007b8e:	3001      	adds	r0, #1
 8007b90:	d01e      	beq.n	8007bd0 <_printf_common+0xa4>
 8007b92:	6823      	ldr	r3, [r4, #0]
 8007b94:	68e5      	ldr	r5, [r4, #12]
 8007b96:	6832      	ldr	r2, [r6, #0]
 8007b98:	f003 0306 	and.w	r3, r3, #6
 8007b9c:	2b04      	cmp	r3, #4
 8007b9e:	bf08      	it	eq
 8007ba0:	1aad      	subeq	r5, r5, r2
 8007ba2:	68a3      	ldr	r3, [r4, #8]
 8007ba4:	6922      	ldr	r2, [r4, #16]
 8007ba6:	bf0c      	ite	eq
 8007ba8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bac:	2500      	movne	r5, #0
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	bfc4      	itt	gt
 8007bb2:	1a9b      	subgt	r3, r3, r2
 8007bb4:	18ed      	addgt	r5, r5, r3
 8007bb6:	2600      	movs	r6, #0
 8007bb8:	341a      	adds	r4, #26
 8007bba:	42b5      	cmp	r5, r6
 8007bbc:	d11a      	bne.n	8007bf4 <_printf_common+0xc8>
 8007bbe:	2000      	movs	r0, #0
 8007bc0:	e008      	b.n	8007bd4 <_printf_common+0xa8>
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	4652      	mov	r2, sl
 8007bc6:	4649      	mov	r1, r9
 8007bc8:	4638      	mov	r0, r7
 8007bca:	47c0      	blx	r8
 8007bcc:	3001      	adds	r0, #1
 8007bce:	d103      	bne.n	8007bd8 <_printf_common+0xac>
 8007bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bd8:	3501      	adds	r5, #1
 8007bda:	e7c6      	b.n	8007b6a <_printf_common+0x3e>
 8007bdc:	18e1      	adds	r1, r4, r3
 8007bde:	1c5a      	adds	r2, r3, #1
 8007be0:	2030      	movs	r0, #48	; 0x30
 8007be2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007be6:	4422      	add	r2, r4
 8007be8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007bec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007bf0:	3302      	adds	r3, #2
 8007bf2:	e7c7      	b.n	8007b84 <_printf_common+0x58>
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	4622      	mov	r2, r4
 8007bf8:	4649      	mov	r1, r9
 8007bfa:	4638      	mov	r0, r7
 8007bfc:	47c0      	blx	r8
 8007bfe:	3001      	adds	r0, #1
 8007c00:	d0e6      	beq.n	8007bd0 <_printf_common+0xa4>
 8007c02:	3601      	adds	r6, #1
 8007c04:	e7d9      	b.n	8007bba <_printf_common+0x8e>
	...

08007c08 <_printf_i>:
 8007c08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c0c:	7e0f      	ldrb	r7, [r1, #24]
 8007c0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007c10:	2f78      	cmp	r7, #120	; 0x78
 8007c12:	4691      	mov	r9, r2
 8007c14:	4680      	mov	r8, r0
 8007c16:	460c      	mov	r4, r1
 8007c18:	469a      	mov	sl, r3
 8007c1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007c1e:	d807      	bhi.n	8007c30 <_printf_i+0x28>
 8007c20:	2f62      	cmp	r7, #98	; 0x62
 8007c22:	d80a      	bhi.n	8007c3a <_printf_i+0x32>
 8007c24:	2f00      	cmp	r7, #0
 8007c26:	f000 80d8 	beq.w	8007dda <_printf_i+0x1d2>
 8007c2a:	2f58      	cmp	r7, #88	; 0x58
 8007c2c:	f000 80a3 	beq.w	8007d76 <_printf_i+0x16e>
 8007c30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c38:	e03a      	b.n	8007cb0 <_printf_i+0xa8>
 8007c3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c3e:	2b15      	cmp	r3, #21
 8007c40:	d8f6      	bhi.n	8007c30 <_printf_i+0x28>
 8007c42:	a101      	add	r1, pc, #4	; (adr r1, 8007c48 <_printf_i+0x40>)
 8007c44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c48:	08007ca1 	.word	0x08007ca1
 8007c4c:	08007cb5 	.word	0x08007cb5
 8007c50:	08007c31 	.word	0x08007c31
 8007c54:	08007c31 	.word	0x08007c31
 8007c58:	08007c31 	.word	0x08007c31
 8007c5c:	08007c31 	.word	0x08007c31
 8007c60:	08007cb5 	.word	0x08007cb5
 8007c64:	08007c31 	.word	0x08007c31
 8007c68:	08007c31 	.word	0x08007c31
 8007c6c:	08007c31 	.word	0x08007c31
 8007c70:	08007c31 	.word	0x08007c31
 8007c74:	08007dc1 	.word	0x08007dc1
 8007c78:	08007ce5 	.word	0x08007ce5
 8007c7c:	08007da3 	.word	0x08007da3
 8007c80:	08007c31 	.word	0x08007c31
 8007c84:	08007c31 	.word	0x08007c31
 8007c88:	08007de3 	.word	0x08007de3
 8007c8c:	08007c31 	.word	0x08007c31
 8007c90:	08007ce5 	.word	0x08007ce5
 8007c94:	08007c31 	.word	0x08007c31
 8007c98:	08007c31 	.word	0x08007c31
 8007c9c:	08007dab 	.word	0x08007dab
 8007ca0:	682b      	ldr	r3, [r5, #0]
 8007ca2:	1d1a      	adds	r2, r3, #4
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	602a      	str	r2, [r5, #0]
 8007ca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e0a3      	b.n	8007dfc <_printf_i+0x1f4>
 8007cb4:	6820      	ldr	r0, [r4, #0]
 8007cb6:	6829      	ldr	r1, [r5, #0]
 8007cb8:	0606      	lsls	r6, r0, #24
 8007cba:	f101 0304 	add.w	r3, r1, #4
 8007cbe:	d50a      	bpl.n	8007cd6 <_printf_i+0xce>
 8007cc0:	680e      	ldr	r6, [r1, #0]
 8007cc2:	602b      	str	r3, [r5, #0]
 8007cc4:	2e00      	cmp	r6, #0
 8007cc6:	da03      	bge.n	8007cd0 <_printf_i+0xc8>
 8007cc8:	232d      	movs	r3, #45	; 0x2d
 8007cca:	4276      	negs	r6, r6
 8007ccc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cd0:	485e      	ldr	r0, [pc, #376]	; (8007e4c <_printf_i+0x244>)
 8007cd2:	230a      	movs	r3, #10
 8007cd4:	e019      	b.n	8007d0a <_printf_i+0x102>
 8007cd6:	680e      	ldr	r6, [r1, #0]
 8007cd8:	602b      	str	r3, [r5, #0]
 8007cda:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007cde:	bf18      	it	ne
 8007ce0:	b236      	sxthne	r6, r6
 8007ce2:	e7ef      	b.n	8007cc4 <_printf_i+0xbc>
 8007ce4:	682b      	ldr	r3, [r5, #0]
 8007ce6:	6820      	ldr	r0, [r4, #0]
 8007ce8:	1d19      	adds	r1, r3, #4
 8007cea:	6029      	str	r1, [r5, #0]
 8007cec:	0601      	lsls	r1, r0, #24
 8007cee:	d501      	bpl.n	8007cf4 <_printf_i+0xec>
 8007cf0:	681e      	ldr	r6, [r3, #0]
 8007cf2:	e002      	b.n	8007cfa <_printf_i+0xf2>
 8007cf4:	0646      	lsls	r6, r0, #25
 8007cf6:	d5fb      	bpl.n	8007cf0 <_printf_i+0xe8>
 8007cf8:	881e      	ldrh	r6, [r3, #0]
 8007cfa:	4854      	ldr	r0, [pc, #336]	; (8007e4c <_printf_i+0x244>)
 8007cfc:	2f6f      	cmp	r7, #111	; 0x6f
 8007cfe:	bf0c      	ite	eq
 8007d00:	2308      	moveq	r3, #8
 8007d02:	230a      	movne	r3, #10
 8007d04:	2100      	movs	r1, #0
 8007d06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d0a:	6865      	ldr	r5, [r4, #4]
 8007d0c:	60a5      	str	r5, [r4, #8]
 8007d0e:	2d00      	cmp	r5, #0
 8007d10:	bfa2      	ittt	ge
 8007d12:	6821      	ldrge	r1, [r4, #0]
 8007d14:	f021 0104 	bicge.w	r1, r1, #4
 8007d18:	6021      	strge	r1, [r4, #0]
 8007d1a:	b90e      	cbnz	r6, 8007d20 <_printf_i+0x118>
 8007d1c:	2d00      	cmp	r5, #0
 8007d1e:	d04d      	beq.n	8007dbc <_printf_i+0x1b4>
 8007d20:	4615      	mov	r5, r2
 8007d22:	fbb6 f1f3 	udiv	r1, r6, r3
 8007d26:	fb03 6711 	mls	r7, r3, r1, r6
 8007d2a:	5dc7      	ldrb	r7, [r0, r7]
 8007d2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007d30:	4637      	mov	r7, r6
 8007d32:	42bb      	cmp	r3, r7
 8007d34:	460e      	mov	r6, r1
 8007d36:	d9f4      	bls.n	8007d22 <_printf_i+0x11a>
 8007d38:	2b08      	cmp	r3, #8
 8007d3a:	d10b      	bne.n	8007d54 <_printf_i+0x14c>
 8007d3c:	6823      	ldr	r3, [r4, #0]
 8007d3e:	07de      	lsls	r6, r3, #31
 8007d40:	d508      	bpl.n	8007d54 <_printf_i+0x14c>
 8007d42:	6923      	ldr	r3, [r4, #16]
 8007d44:	6861      	ldr	r1, [r4, #4]
 8007d46:	4299      	cmp	r1, r3
 8007d48:	bfde      	ittt	le
 8007d4a:	2330      	movle	r3, #48	; 0x30
 8007d4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d50:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d54:	1b52      	subs	r2, r2, r5
 8007d56:	6122      	str	r2, [r4, #16]
 8007d58:	f8cd a000 	str.w	sl, [sp]
 8007d5c:	464b      	mov	r3, r9
 8007d5e:	aa03      	add	r2, sp, #12
 8007d60:	4621      	mov	r1, r4
 8007d62:	4640      	mov	r0, r8
 8007d64:	f7ff fee2 	bl	8007b2c <_printf_common>
 8007d68:	3001      	adds	r0, #1
 8007d6a:	d14c      	bne.n	8007e06 <_printf_i+0x1fe>
 8007d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d70:	b004      	add	sp, #16
 8007d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d76:	4835      	ldr	r0, [pc, #212]	; (8007e4c <_printf_i+0x244>)
 8007d78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007d7c:	6829      	ldr	r1, [r5, #0]
 8007d7e:	6823      	ldr	r3, [r4, #0]
 8007d80:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d84:	6029      	str	r1, [r5, #0]
 8007d86:	061d      	lsls	r5, r3, #24
 8007d88:	d514      	bpl.n	8007db4 <_printf_i+0x1ac>
 8007d8a:	07df      	lsls	r7, r3, #31
 8007d8c:	bf44      	itt	mi
 8007d8e:	f043 0320 	orrmi.w	r3, r3, #32
 8007d92:	6023      	strmi	r3, [r4, #0]
 8007d94:	b91e      	cbnz	r6, 8007d9e <_printf_i+0x196>
 8007d96:	6823      	ldr	r3, [r4, #0]
 8007d98:	f023 0320 	bic.w	r3, r3, #32
 8007d9c:	6023      	str	r3, [r4, #0]
 8007d9e:	2310      	movs	r3, #16
 8007da0:	e7b0      	b.n	8007d04 <_printf_i+0xfc>
 8007da2:	6823      	ldr	r3, [r4, #0]
 8007da4:	f043 0320 	orr.w	r3, r3, #32
 8007da8:	6023      	str	r3, [r4, #0]
 8007daa:	2378      	movs	r3, #120	; 0x78
 8007dac:	4828      	ldr	r0, [pc, #160]	; (8007e50 <_printf_i+0x248>)
 8007dae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007db2:	e7e3      	b.n	8007d7c <_printf_i+0x174>
 8007db4:	0659      	lsls	r1, r3, #25
 8007db6:	bf48      	it	mi
 8007db8:	b2b6      	uxthmi	r6, r6
 8007dba:	e7e6      	b.n	8007d8a <_printf_i+0x182>
 8007dbc:	4615      	mov	r5, r2
 8007dbe:	e7bb      	b.n	8007d38 <_printf_i+0x130>
 8007dc0:	682b      	ldr	r3, [r5, #0]
 8007dc2:	6826      	ldr	r6, [r4, #0]
 8007dc4:	6961      	ldr	r1, [r4, #20]
 8007dc6:	1d18      	adds	r0, r3, #4
 8007dc8:	6028      	str	r0, [r5, #0]
 8007dca:	0635      	lsls	r5, r6, #24
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	d501      	bpl.n	8007dd4 <_printf_i+0x1cc>
 8007dd0:	6019      	str	r1, [r3, #0]
 8007dd2:	e002      	b.n	8007dda <_printf_i+0x1d2>
 8007dd4:	0670      	lsls	r0, r6, #25
 8007dd6:	d5fb      	bpl.n	8007dd0 <_printf_i+0x1c8>
 8007dd8:	8019      	strh	r1, [r3, #0]
 8007dda:	2300      	movs	r3, #0
 8007ddc:	6123      	str	r3, [r4, #16]
 8007dde:	4615      	mov	r5, r2
 8007de0:	e7ba      	b.n	8007d58 <_printf_i+0x150>
 8007de2:	682b      	ldr	r3, [r5, #0]
 8007de4:	1d1a      	adds	r2, r3, #4
 8007de6:	602a      	str	r2, [r5, #0]
 8007de8:	681d      	ldr	r5, [r3, #0]
 8007dea:	6862      	ldr	r2, [r4, #4]
 8007dec:	2100      	movs	r1, #0
 8007dee:	4628      	mov	r0, r5
 8007df0:	f7f8 f9f6 	bl	80001e0 <memchr>
 8007df4:	b108      	cbz	r0, 8007dfa <_printf_i+0x1f2>
 8007df6:	1b40      	subs	r0, r0, r5
 8007df8:	6060      	str	r0, [r4, #4]
 8007dfa:	6863      	ldr	r3, [r4, #4]
 8007dfc:	6123      	str	r3, [r4, #16]
 8007dfe:	2300      	movs	r3, #0
 8007e00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e04:	e7a8      	b.n	8007d58 <_printf_i+0x150>
 8007e06:	6923      	ldr	r3, [r4, #16]
 8007e08:	462a      	mov	r2, r5
 8007e0a:	4649      	mov	r1, r9
 8007e0c:	4640      	mov	r0, r8
 8007e0e:	47d0      	blx	sl
 8007e10:	3001      	adds	r0, #1
 8007e12:	d0ab      	beq.n	8007d6c <_printf_i+0x164>
 8007e14:	6823      	ldr	r3, [r4, #0]
 8007e16:	079b      	lsls	r3, r3, #30
 8007e18:	d413      	bmi.n	8007e42 <_printf_i+0x23a>
 8007e1a:	68e0      	ldr	r0, [r4, #12]
 8007e1c:	9b03      	ldr	r3, [sp, #12]
 8007e1e:	4298      	cmp	r0, r3
 8007e20:	bfb8      	it	lt
 8007e22:	4618      	movlt	r0, r3
 8007e24:	e7a4      	b.n	8007d70 <_printf_i+0x168>
 8007e26:	2301      	movs	r3, #1
 8007e28:	4632      	mov	r2, r6
 8007e2a:	4649      	mov	r1, r9
 8007e2c:	4640      	mov	r0, r8
 8007e2e:	47d0      	blx	sl
 8007e30:	3001      	adds	r0, #1
 8007e32:	d09b      	beq.n	8007d6c <_printf_i+0x164>
 8007e34:	3501      	adds	r5, #1
 8007e36:	68e3      	ldr	r3, [r4, #12]
 8007e38:	9903      	ldr	r1, [sp, #12]
 8007e3a:	1a5b      	subs	r3, r3, r1
 8007e3c:	42ab      	cmp	r3, r5
 8007e3e:	dcf2      	bgt.n	8007e26 <_printf_i+0x21e>
 8007e40:	e7eb      	b.n	8007e1a <_printf_i+0x212>
 8007e42:	2500      	movs	r5, #0
 8007e44:	f104 0619 	add.w	r6, r4, #25
 8007e48:	e7f5      	b.n	8007e36 <_printf_i+0x22e>
 8007e4a:	bf00      	nop
 8007e4c:	08008c95 	.word	0x08008c95
 8007e50:	08008ca6 	.word	0x08008ca6

08007e54 <memcpy>:
 8007e54:	440a      	add	r2, r1
 8007e56:	4291      	cmp	r1, r2
 8007e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e5c:	d100      	bne.n	8007e60 <memcpy+0xc>
 8007e5e:	4770      	bx	lr
 8007e60:	b510      	push	{r4, lr}
 8007e62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e6a:	4291      	cmp	r1, r2
 8007e6c:	d1f9      	bne.n	8007e62 <memcpy+0xe>
 8007e6e:	bd10      	pop	{r4, pc}

08007e70 <memmove>:
 8007e70:	4288      	cmp	r0, r1
 8007e72:	b510      	push	{r4, lr}
 8007e74:	eb01 0402 	add.w	r4, r1, r2
 8007e78:	d902      	bls.n	8007e80 <memmove+0x10>
 8007e7a:	4284      	cmp	r4, r0
 8007e7c:	4623      	mov	r3, r4
 8007e7e:	d807      	bhi.n	8007e90 <memmove+0x20>
 8007e80:	1e43      	subs	r3, r0, #1
 8007e82:	42a1      	cmp	r1, r4
 8007e84:	d008      	beq.n	8007e98 <memmove+0x28>
 8007e86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e8e:	e7f8      	b.n	8007e82 <memmove+0x12>
 8007e90:	4402      	add	r2, r0
 8007e92:	4601      	mov	r1, r0
 8007e94:	428a      	cmp	r2, r1
 8007e96:	d100      	bne.n	8007e9a <memmove+0x2a>
 8007e98:	bd10      	pop	{r4, pc}
 8007e9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ea2:	e7f7      	b.n	8007e94 <memmove+0x24>

08007ea4 <_free_r>:
 8007ea4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ea6:	2900      	cmp	r1, #0
 8007ea8:	d044      	beq.n	8007f34 <_free_r+0x90>
 8007eaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007eae:	9001      	str	r0, [sp, #4]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	f1a1 0404 	sub.w	r4, r1, #4
 8007eb6:	bfb8      	it	lt
 8007eb8:	18e4      	addlt	r4, r4, r3
 8007eba:	f000 f913 	bl	80080e4 <__malloc_lock>
 8007ebe:	4a1e      	ldr	r2, [pc, #120]	; (8007f38 <_free_r+0x94>)
 8007ec0:	9801      	ldr	r0, [sp, #4]
 8007ec2:	6813      	ldr	r3, [r2, #0]
 8007ec4:	b933      	cbnz	r3, 8007ed4 <_free_r+0x30>
 8007ec6:	6063      	str	r3, [r4, #4]
 8007ec8:	6014      	str	r4, [r2, #0]
 8007eca:	b003      	add	sp, #12
 8007ecc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ed0:	f000 b90e 	b.w	80080f0 <__malloc_unlock>
 8007ed4:	42a3      	cmp	r3, r4
 8007ed6:	d908      	bls.n	8007eea <_free_r+0x46>
 8007ed8:	6825      	ldr	r5, [r4, #0]
 8007eda:	1961      	adds	r1, r4, r5
 8007edc:	428b      	cmp	r3, r1
 8007ede:	bf01      	itttt	eq
 8007ee0:	6819      	ldreq	r1, [r3, #0]
 8007ee2:	685b      	ldreq	r3, [r3, #4]
 8007ee4:	1949      	addeq	r1, r1, r5
 8007ee6:	6021      	streq	r1, [r4, #0]
 8007ee8:	e7ed      	b.n	8007ec6 <_free_r+0x22>
 8007eea:	461a      	mov	r2, r3
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	b10b      	cbz	r3, 8007ef4 <_free_r+0x50>
 8007ef0:	42a3      	cmp	r3, r4
 8007ef2:	d9fa      	bls.n	8007eea <_free_r+0x46>
 8007ef4:	6811      	ldr	r1, [r2, #0]
 8007ef6:	1855      	adds	r5, r2, r1
 8007ef8:	42a5      	cmp	r5, r4
 8007efa:	d10b      	bne.n	8007f14 <_free_r+0x70>
 8007efc:	6824      	ldr	r4, [r4, #0]
 8007efe:	4421      	add	r1, r4
 8007f00:	1854      	adds	r4, r2, r1
 8007f02:	42a3      	cmp	r3, r4
 8007f04:	6011      	str	r1, [r2, #0]
 8007f06:	d1e0      	bne.n	8007eca <_free_r+0x26>
 8007f08:	681c      	ldr	r4, [r3, #0]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	6053      	str	r3, [r2, #4]
 8007f0e:	4421      	add	r1, r4
 8007f10:	6011      	str	r1, [r2, #0]
 8007f12:	e7da      	b.n	8007eca <_free_r+0x26>
 8007f14:	d902      	bls.n	8007f1c <_free_r+0x78>
 8007f16:	230c      	movs	r3, #12
 8007f18:	6003      	str	r3, [r0, #0]
 8007f1a:	e7d6      	b.n	8007eca <_free_r+0x26>
 8007f1c:	6825      	ldr	r5, [r4, #0]
 8007f1e:	1961      	adds	r1, r4, r5
 8007f20:	428b      	cmp	r3, r1
 8007f22:	bf04      	itt	eq
 8007f24:	6819      	ldreq	r1, [r3, #0]
 8007f26:	685b      	ldreq	r3, [r3, #4]
 8007f28:	6063      	str	r3, [r4, #4]
 8007f2a:	bf04      	itt	eq
 8007f2c:	1949      	addeq	r1, r1, r5
 8007f2e:	6021      	streq	r1, [r4, #0]
 8007f30:	6054      	str	r4, [r2, #4]
 8007f32:	e7ca      	b.n	8007eca <_free_r+0x26>
 8007f34:	b003      	add	sp, #12
 8007f36:	bd30      	pop	{r4, r5, pc}
 8007f38:	200002c4 	.word	0x200002c4

08007f3c <sbrk_aligned>:
 8007f3c:	b570      	push	{r4, r5, r6, lr}
 8007f3e:	4e0e      	ldr	r6, [pc, #56]	; (8007f78 <sbrk_aligned+0x3c>)
 8007f40:	460c      	mov	r4, r1
 8007f42:	6831      	ldr	r1, [r6, #0]
 8007f44:	4605      	mov	r5, r0
 8007f46:	b911      	cbnz	r1, 8007f4e <sbrk_aligned+0x12>
 8007f48:	f000 f8bc 	bl	80080c4 <_sbrk_r>
 8007f4c:	6030      	str	r0, [r6, #0]
 8007f4e:	4621      	mov	r1, r4
 8007f50:	4628      	mov	r0, r5
 8007f52:	f000 f8b7 	bl	80080c4 <_sbrk_r>
 8007f56:	1c43      	adds	r3, r0, #1
 8007f58:	d00a      	beq.n	8007f70 <sbrk_aligned+0x34>
 8007f5a:	1cc4      	adds	r4, r0, #3
 8007f5c:	f024 0403 	bic.w	r4, r4, #3
 8007f60:	42a0      	cmp	r0, r4
 8007f62:	d007      	beq.n	8007f74 <sbrk_aligned+0x38>
 8007f64:	1a21      	subs	r1, r4, r0
 8007f66:	4628      	mov	r0, r5
 8007f68:	f000 f8ac 	bl	80080c4 <_sbrk_r>
 8007f6c:	3001      	adds	r0, #1
 8007f6e:	d101      	bne.n	8007f74 <sbrk_aligned+0x38>
 8007f70:	f04f 34ff 	mov.w	r4, #4294967295
 8007f74:	4620      	mov	r0, r4
 8007f76:	bd70      	pop	{r4, r5, r6, pc}
 8007f78:	200002c8 	.word	0x200002c8

08007f7c <_malloc_r>:
 8007f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f80:	1ccd      	adds	r5, r1, #3
 8007f82:	f025 0503 	bic.w	r5, r5, #3
 8007f86:	3508      	adds	r5, #8
 8007f88:	2d0c      	cmp	r5, #12
 8007f8a:	bf38      	it	cc
 8007f8c:	250c      	movcc	r5, #12
 8007f8e:	2d00      	cmp	r5, #0
 8007f90:	4607      	mov	r7, r0
 8007f92:	db01      	blt.n	8007f98 <_malloc_r+0x1c>
 8007f94:	42a9      	cmp	r1, r5
 8007f96:	d905      	bls.n	8007fa4 <_malloc_r+0x28>
 8007f98:	230c      	movs	r3, #12
 8007f9a:	603b      	str	r3, [r7, #0]
 8007f9c:	2600      	movs	r6, #0
 8007f9e:	4630      	mov	r0, r6
 8007fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fa4:	4e2e      	ldr	r6, [pc, #184]	; (8008060 <_malloc_r+0xe4>)
 8007fa6:	f000 f89d 	bl	80080e4 <__malloc_lock>
 8007faa:	6833      	ldr	r3, [r6, #0]
 8007fac:	461c      	mov	r4, r3
 8007fae:	bb34      	cbnz	r4, 8007ffe <_malloc_r+0x82>
 8007fb0:	4629      	mov	r1, r5
 8007fb2:	4638      	mov	r0, r7
 8007fb4:	f7ff ffc2 	bl	8007f3c <sbrk_aligned>
 8007fb8:	1c43      	adds	r3, r0, #1
 8007fba:	4604      	mov	r4, r0
 8007fbc:	d14d      	bne.n	800805a <_malloc_r+0xde>
 8007fbe:	6834      	ldr	r4, [r6, #0]
 8007fc0:	4626      	mov	r6, r4
 8007fc2:	2e00      	cmp	r6, #0
 8007fc4:	d140      	bne.n	8008048 <_malloc_r+0xcc>
 8007fc6:	6823      	ldr	r3, [r4, #0]
 8007fc8:	4631      	mov	r1, r6
 8007fca:	4638      	mov	r0, r7
 8007fcc:	eb04 0803 	add.w	r8, r4, r3
 8007fd0:	f000 f878 	bl	80080c4 <_sbrk_r>
 8007fd4:	4580      	cmp	r8, r0
 8007fd6:	d13a      	bne.n	800804e <_malloc_r+0xd2>
 8007fd8:	6821      	ldr	r1, [r4, #0]
 8007fda:	3503      	adds	r5, #3
 8007fdc:	1a6d      	subs	r5, r5, r1
 8007fde:	f025 0503 	bic.w	r5, r5, #3
 8007fe2:	3508      	adds	r5, #8
 8007fe4:	2d0c      	cmp	r5, #12
 8007fe6:	bf38      	it	cc
 8007fe8:	250c      	movcc	r5, #12
 8007fea:	4629      	mov	r1, r5
 8007fec:	4638      	mov	r0, r7
 8007fee:	f7ff ffa5 	bl	8007f3c <sbrk_aligned>
 8007ff2:	3001      	adds	r0, #1
 8007ff4:	d02b      	beq.n	800804e <_malloc_r+0xd2>
 8007ff6:	6823      	ldr	r3, [r4, #0]
 8007ff8:	442b      	add	r3, r5
 8007ffa:	6023      	str	r3, [r4, #0]
 8007ffc:	e00e      	b.n	800801c <_malloc_r+0xa0>
 8007ffe:	6822      	ldr	r2, [r4, #0]
 8008000:	1b52      	subs	r2, r2, r5
 8008002:	d41e      	bmi.n	8008042 <_malloc_r+0xc6>
 8008004:	2a0b      	cmp	r2, #11
 8008006:	d916      	bls.n	8008036 <_malloc_r+0xba>
 8008008:	1961      	adds	r1, r4, r5
 800800a:	42a3      	cmp	r3, r4
 800800c:	6025      	str	r5, [r4, #0]
 800800e:	bf18      	it	ne
 8008010:	6059      	strne	r1, [r3, #4]
 8008012:	6863      	ldr	r3, [r4, #4]
 8008014:	bf08      	it	eq
 8008016:	6031      	streq	r1, [r6, #0]
 8008018:	5162      	str	r2, [r4, r5]
 800801a:	604b      	str	r3, [r1, #4]
 800801c:	4638      	mov	r0, r7
 800801e:	f104 060b 	add.w	r6, r4, #11
 8008022:	f000 f865 	bl	80080f0 <__malloc_unlock>
 8008026:	f026 0607 	bic.w	r6, r6, #7
 800802a:	1d23      	adds	r3, r4, #4
 800802c:	1af2      	subs	r2, r6, r3
 800802e:	d0b6      	beq.n	8007f9e <_malloc_r+0x22>
 8008030:	1b9b      	subs	r3, r3, r6
 8008032:	50a3      	str	r3, [r4, r2]
 8008034:	e7b3      	b.n	8007f9e <_malloc_r+0x22>
 8008036:	6862      	ldr	r2, [r4, #4]
 8008038:	42a3      	cmp	r3, r4
 800803a:	bf0c      	ite	eq
 800803c:	6032      	streq	r2, [r6, #0]
 800803e:	605a      	strne	r2, [r3, #4]
 8008040:	e7ec      	b.n	800801c <_malloc_r+0xa0>
 8008042:	4623      	mov	r3, r4
 8008044:	6864      	ldr	r4, [r4, #4]
 8008046:	e7b2      	b.n	8007fae <_malloc_r+0x32>
 8008048:	4634      	mov	r4, r6
 800804a:	6876      	ldr	r6, [r6, #4]
 800804c:	e7b9      	b.n	8007fc2 <_malloc_r+0x46>
 800804e:	230c      	movs	r3, #12
 8008050:	603b      	str	r3, [r7, #0]
 8008052:	4638      	mov	r0, r7
 8008054:	f000 f84c 	bl	80080f0 <__malloc_unlock>
 8008058:	e7a1      	b.n	8007f9e <_malloc_r+0x22>
 800805a:	6025      	str	r5, [r4, #0]
 800805c:	e7de      	b.n	800801c <_malloc_r+0xa0>
 800805e:	bf00      	nop
 8008060:	200002c4 	.word	0x200002c4

08008064 <_realloc_r>:
 8008064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008068:	4680      	mov	r8, r0
 800806a:	4614      	mov	r4, r2
 800806c:	460e      	mov	r6, r1
 800806e:	b921      	cbnz	r1, 800807a <_realloc_r+0x16>
 8008070:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008074:	4611      	mov	r1, r2
 8008076:	f7ff bf81 	b.w	8007f7c <_malloc_r>
 800807a:	b92a      	cbnz	r2, 8008088 <_realloc_r+0x24>
 800807c:	f7ff ff12 	bl	8007ea4 <_free_r>
 8008080:	4625      	mov	r5, r4
 8008082:	4628      	mov	r0, r5
 8008084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008088:	f000 f838 	bl	80080fc <_malloc_usable_size_r>
 800808c:	4284      	cmp	r4, r0
 800808e:	4607      	mov	r7, r0
 8008090:	d802      	bhi.n	8008098 <_realloc_r+0x34>
 8008092:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008096:	d812      	bhi.n	80080be <_realloc_r+0x5a>
 8008098:	4621      	mov	r1, r4
 800809a:	4640      	mov	r0, r8
 800809c:	f7ff ff6e 	bl	8007f7c <_malloc_r>
 80080a0:	4605      	mov	r5, r0
 80080a2:	2800      	cmp	r0, #0
 80080a4:	d0ed      	beq.n	8008082 <_realloc_r+0x1e>
 80080a6:	42bc      	cmp	r4, r7
 80080a8:	4622      	mov	r2, r4
 80080aa:	4631      	mov	r1, r6
 80080ac:	bf28      	it	cs
 80080ae:	463a      	movcs	r2, r7
 80080b0:	f7ff fed0 	bl	8007e54 <memcpy>
 80080b4:	4631      	mov	r1, r6
 80080b6:	4640      	mov	r0, r8
 80080b8:	f7ff fef4 	bl	8007ea4 <_free_r>
 80080bc:	e7e1      	b.n	8008082 <_realloc_r+0x1e>
 80080be:	4635      	mov	r5, r6
 80080c0:	e7df      	b.n	8008082 <_realloc_r+0x1e>
	...

080080c4 <_sbrk_r>:
 80080c4:	b538      	push	{r3, r4, r5, lr}
 80080c6:	4d06      	ldr	r5, [pc, #24]	; (80080e0 <_sbrk_r+0x1c>)
 80080c8:	2300      	movs	r3, #0
 80080ca:	4604      	mov	r4, r0
 80080cc:	4608      	mov	r0, r1
 80080ce:	602b      	str	r3, [r5, #0]
 80080d0:	f7f9 fa9c 	bl	800160c <_sbrk>
 80080d4:	1c43      	adds	r3, r0, #1
 80080d6:	d102      	bne.n	80080de <_sbrk_r+0x1a>
 80080d8:	682b      	ldr	r3, [r5, #0]
 80080da:	b103      	cbz	r3, 80080de <_sbrk_r+0x1a>
 80080dc:	6023      	str	r3, [r4, #0]
 80080de:	bd38      	pop	{r3, r4, r5, pc}
 80080e0:	200002cc 	.word	0x200002cc

080080e4 <__malloc_lock>:
 80080e4:	4801      	ldr	r0, [pc, #4]	; (80080ec <__malloc_lock+0x8>)
 80080e6:	f000 b811 	b.w	800810c <__retarget_lock_acquire_recursive>
 80080ea:	bf00      	nop
 80080ec:	200002d0 	.word	0x200002d0

080080f0 <__malloc_unlock>:
 80080f0:	4801      	ldr	r0, [pc, #4]	; (80080f8 <__malloc_unlock+0x8>)
 80080f2:	f000 b80c 	b.w	800810e <__retarget_lock_release_recursive>
 80080f6:	bf00      	nop
 80080f8:	200002d0 	.word	0x200002d0

080080fc <_malloc_usable_size_r>:
 80080fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008100:	1f18      	subs	r0, r3, #4
 8008102:	2b00      	cmp	r3, #0
 8008104:	bfbc      	itt	lt
 8008106:	580b      	ldrlt	r3, [r1, r0]
 8008108:	18c0      	addlt	r0, r0, r3
 800810a:	4770      	bx	lr

0800810c <__retarget_lock_acquire_recursive>:
 800810c:	4770      	bx	lr

0800810e <__retarget_lock_release_recursive>:
 800810e:	4770      	bx	lr

08008110 <sinf>:
 8008110:	ee10 3a10 	vmov	r3, s0
 8008114:	b507      	push	{r0, r1, r2, lr}
 8008116:	4a1f      	ldr	r2, [pc, #124]	; (8008194 <sinf+0x84>)
 8008118:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800811c:	4293      	cmp	r3, r2
 800811e:	dc07      	bgt.n	8008130 <sinf+0x20>
 8008120:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8008198 <sinf+0x88>
 8008124:	2000      	movs	r0, #0
 8008126:	b003      	add	sp, #12
 8008128:	f85d eb04 	ldr.w	lr, [sp], #4
 800812c:	f000 bc48 	b.w	80089c0 <__kernel_sinf>
 8008130:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008134:	db04      	blt.n	8008140 <sinf+0x30>
 8008136:	ee30 0a40 	vsub.f32	s0, s0, s0
 800813a:	b003      	add	sp, #12
 800813c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008140:	4668      	mov	r0, sp
 8008142:	f000 f82b 	bl	800819c <__ieee754_rem_pio2f>
 8008146:	f000 0003 	and.w	r0, r0, #3
 800814a:	2801      	cmp	r0, #1
 800814c:	d00a      	beq.n	8008164 <sinf+0x54>
 800814e:	2802      	cmp	r0, #2
 8008150:	d00f      	beq.n	8008172 <sinf+0x62>
 8008152:	b9c0      	cbnz	r0, 8008186 <sinf+0x76>
 8008154:	eddd 0a01 	vldr	s1, [sp, #4]
 8008158:	ed9d 0a00 	vldr	s0, [sp]
 800815c:	2001      	movs	r0, #1
 800815e:	f000 fc2f 	bl	80089c0 <__kernel_sinf>
 8008162:	e7ea      	b.n	800813a <sinf+0x2a>
 8008164:	eddd 0a01 	vldr	s1, [sp, #4]
 8008168:	ed9d 0a00 	vldr	s0, [sp]
 800816c:	f000 f952 	bl	8008414 <__kernel_cosf>
 8008170:	e7e3      	b.n	800813a <sinf+0x2a>
 8008172:	eddd 0a01 	vldr	s1, [sp, #4]
 8008176:	ed9d 0a00 	vldr	s0, [sp]
 800817a:	2001      	movs	r0, #1
 800817c:	f000 fc20 	bl	80089c0 <__kernel_sinf>
 8008180:	eeb1 0a40 	vneg.f32	s0, s0
 8008184:	e7d9      	b.n	800813a <sinf+0x2a>
 8008186:	eddd 0a01 	vldr	s1, [sp, #4]
 800818a:	ed9d 0a00 	vldr	s0, [sp]
 800818e:	f000 f941 	bl	8008414 <__kernel_cosf>
 8008192:	e7f5      	b.n	8008180 <sinf+0x70>
 8008194:	3f490fd8 	.word	0x3f490fd8
 8008198:	00000000 	.word	0x00000000

0800819c <__ieee754_rem_pio2f>:
 800819c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800819e:	ee10 6a10 	vmov	r6, s0
 80081a2:	4b8e      	ldr	r3, [pc, #568]	; (80083dc <__ieee754_rem_pio2f+0x240>)
 80081a4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80081a8:	429d      	cmp	r5, r3
 80081aa:	b087      	sub	sp, #28
 80081ac:	eef0 7a40 	vmov.f32	s15, s0
 80081b0:	4604      	mov	r4, r0
 80081b2:	dc05      	bgt.n	80081c0 <__ieee754_rem_pio2f+0x24>
 80081b4:	2300      	movs	r3, #0
 80081b6:	ed80 0a00 	vstr	s0, [r0]
 80081ba:	6043      	str	r3, [r0, #4]
 80081bc:	2000      	movs	r0, #0
 80081be:	e01a      	b.n	80081f6 <__ieee754_rem_pio2f+0x5a>
 80081c0:	4b87      	ldr	r3, [pc, #540]	; (80083e0 <__ieee754_rem_pio2f+0x244>)
 80081c2:	429d      	cmp	r5, r3
 80081c4:	dc46      	bgt.n	8008254 <__ieee754_rem_pio2f+0xb8>
 80081c6:	2e00      	cmp	r6, #0
 80081c8:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80083e4 <__ieee754_rem_pio2f+0x248>
 80081cc:	4b86      	ldr	r3, [pc, #536]	; (80083e8 <__ieee754_rem_pio2f+0x24c>)
 80081ce:	f025 050f 	bic.w	r5, r5, #15
 80081d2:	dd1f      	ble.n	8008214 <__ieee754_rem_pio2f+0x78>
 80081d4:	429d      	cmp	r5, r3
 80081d6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80081da:	d00e      	beq.n	80081fa <__ieee754_rem_pio2f+0x5e>
 80081dc:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80083ec <__ieee754_rem_pio2f+0x250>
 80081e0:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80081e4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80081e8:	ed80 0a00 	vstr	s0, [r0]
 80081ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80081f0:	2001      	movs	r0, #1
 80081f2:	edc4 7a01 	vstr	s15, [r4, #4]
 80081f6:	b007      	add	sp, #28
 80081f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081fa:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80083f0 <__ieee754_rem_pio2f+0x254>
 80081fe:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80083f4 <__ieee754_rem_pio2f+0x258>
 8008202:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008206:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800820a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800820e:	edc0 6a00 	vstr	s13, [r0]
 8008212:	e7eb      	b.n	80081ec <__ieee754_rem_pio2f+0x50>
 8008214:	429d      	cmp	r5, r3
 8008216:	ee77 7a80 	vadd.f32	s15, s15, s0
 800821a:	d00e      	beq.n	800823a <__ieee754_rem_pio2f+0x9e>
 800821c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80083ec <__ieee754_rem_pio2f+0x250>
 8008220:	ee37 0a87 	vadd.f32	s0, s15, s14
 8008224:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008228:	ed80 0a00 	vstr	s0, [r0]
 800822c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008230:	f04f 30ff 	mov.w	r0, #4294967295
 8008234:	edc4 7a01 	vstr	s15, [r4, #4]
 8008238:	e7dd      	b.n	80081f6 <__ieee754_rem_pio2f+0x5a>
 800823a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80083f0 <__ieee754_rem_pio2f+0x254>
 800823e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80083f4 <__ieee754_rem_pio2f+0x258>
 8008242:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008246:	ee77 6a87 	vadd.f32	s13, s15, s14
 800824a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800824e:	edc0 6a00 	vstr	s13, [r0]
 8008252:	e7eb      	b.n	800822c <__ieee754_rem_pio2f+0x90>
 8008254:	4b68      	ldr	r3, [pc, #416]	; (80083f8 <__ieee754_rem_pio2f+0x25c>)
 8008256:	429d      	cmp	r5, r3
 8008258:	dc72      	bgt.n	8008340 <__ieee754_rem_pio2f+0x1a4>
 800825a:	f000 fbf9 	bl	8008a50 <fabsf>
 800825e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80083fc <__ieee754_rem_pio2f+0x260>
 8008262:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008266:	eee0 7a07 	vfma.f32	s15, s0, s14
 800826a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800826e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008272:	ee17 0a90 	vmov	r0, s15
 8008276:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80083e4 <__ieee754_rem_pio2f+0x248>
 800827a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800827e:	281f      	cmp	r0, #31
 8008280:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80083ec <__ieee754_rem_pio2f+0x250>
 8008284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008288:	eeb1 6a47 	vneg.f32	s12, s14
 800828c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008290:	ee16 2a90 	vmov	r2, s13
 8008294:	dc1c      	bgt.n	80082d0 <__ieee754_rem_pio2f+0x134>
 8008296:	495a      	ldr	r1, [pc, #360]	; (8008400 <__ieee754_rem_pio2f+0x264>)
 8008298:	1e47      	subs	r7, r0, #1
 800829a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800829e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80082a2:	428b      	cmp	r3, r1
 80082a4:	d014      	beq.n	80082d0 <__ieee754_rem_pio2f+0x134>
 80082a6:	6022      	str	r2, [r4, #0]
 80082a8:	ed94 7a00 	vldr	s14, [r4]
 80082ac:	ee30 0a47 	vsub.f32	s0, s0, s14
 80082b0:	2e00      	cmp	r6, #0
 80082b2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80082b6:	ed84 0a01 	vstr	s0, [r4, #4]
 80082ba:	da9c      	bge.n	80081f6 <__ieee754_rem_pio2f+0x5a>
 80082bc:	eeb1 7a47 	vneg.f32	s14, s14
 80082c0:	eeb1 0a40 	vneg.f32	s0, s0
 80082c4:	ed84 7a00 	vstr	s14, [r4]
 80082c8:	ed84 0a01 	vstr	s0, [r4, #4]
 80082cc:	4240      	negs	r0, r0
 80082ce:	e792      	b.n	80081f6 <__ieee754_rem_pio2f+0x5a>
 80082d0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80082d4:	15eb      	asrs	r3, r5, #23
 80082d6:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80082da:	2d08      	cmp	r5, #8
 80082dc:	dde3      	ble.n	80082a6 <__ieee754_rem_pio2f+0x10a>
 80082de:	eddf 7a44 	vldr	s15, [pc, #272]	; 80083f0 <__ieee754_rem_pio2f+0x254>
 80082e2:	eddf 5a44 	vldr	s11, [pc, #272]	; 80083f4 <__ieee754_rem_pio2f+0x258>
 80082e6:	eef0 6a40 	vmov.f32	s13, s0
 80082ea:	eee6 6a27 	vfma.f32	s13, s12, s15
 80082ee:	ee30 0a66 	vsub.f32	s0, s0, s13
 80082f2:	eea6 0a27 	vfma.f32	s0, s12, s15
 80082f6:	eef0 7a40 	vmov.f32	s15, s0
 80082fa:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80082fe:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8008302:	ee15 2a90 	vmov	r2, s11
 8008306:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800830a:	1a5b      	subs	r3, r3, r1
 800830c:	2b19      	cmp	r3, #25
 800830e:	dc04      	bgt.n	800831a <__ieee754_rem_pio2f+0x17e>
 8008310:	edc4 5a00 	vstr	s11, [r4]
 8008314:	eeb0 0a66 	vmov.f32	s0, s13
 8008318:	e7c6      	b.n	80082a8 <__ieee754_rem_pio2f+0x10c>
 800831a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8008404 <__ieee754_rem_pio2f+0x268>
 800831e:	eeb0 0a66 	vmov.f32	s0, s13
 8008322:	eea6 0a25 	vfma.f32	s0, s12, s11
 8008326:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800832a:	eddf 6a37 	vldr	s13, [pc, #220]	; 8008408 <__ieee754_rem_pio2f+0x26c>
 800832e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8008332:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8008336:	ee30 7a67 	vsub.f32	s14, s0, s15
 800833a:	ed84 7a00 	vstr	s14, [r4]
 800833e:	e7b3      	b.n	80082a8 <__ieee754_rem_pio2f+0x10c>
 8008340:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8008344:	db06      	blt.n	8008354 <__ieee754_rem_pio2f+0x1b8>
 8008346:	ee70 7a40 	vsub.f32	s15, s0, s0
 800834a:	edc0 7a01 	vstr	s15, [r0, #4]
 800834e:	edc0 7a00 	vstr	s15, [r0]
 8008352:	e733      	b.n	80081bc <__ieee754_rem_pio2f+0x20>
 8008354:	15ea      	asrs	r2, r5, #23
 8008356:	3a86      	subs	r2, #134	; 0x86
 8008358:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800835c:	ee07 3a90 	vmov	s15, r3
 8008360:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008364:	eddf 6a29 	vldr	s13, [pc, #164]	; 800840c <__ieee754_rem_pio2f+0x270>
 8008368:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800836c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008370:	ed8d 7a03 	vstr	s14, [sp, #12]
 8008374:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008378:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800837c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008380:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008384:	ed8d 7a04 	vstr	s14, [sp, #16]
 8008388:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800838c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008394:	edcd 7a05 	vstr	s15, [sp, #20]
 8008398:	d11e      	bne.n	80083d8 <__ieee754_rem_pio2f+0x23c>
 800839a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800839e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083a2:	bf14      	ite	ne
 80083a4:	2302      	movne	r3, #2
 80083a6:	2301      	moveq	r3, #1
 80083a8:	4919      	ldr	r1, [pc, #100]	; (8008410 <__ieee754_rem_pio2f+0x274>)
 80083aa:	9101      	str	r1, [sp, #4]
 80083ac:	2102      	movs	r1, #2
 80083ae:	9100      	str	r1, [sp, #0]
 80083b0:	a803      	add	r0, sp, #12
 80083b2:	4621      	mov	r1, r4
 80083b4:	f000 f88e 	bl	80084d4 <__kernel_rem_pio2f>
 80083b8:	2e00      	cmp	r6, #0
 80083ba:	f6bf af1c 	bge.w	80081f6 <__ieee754_rem_pio2f+0x5a>
 80083be:	edd4 7a00 	vldr	s15, [r4]
 80083c2:	eef1 7a67 	vneg.f32	s15, s15
 80083c6:	edc4 7a00 	vstr	s15, [r4]
 80083ca:	edd4 7a01 	vldr	s15, [r4, #4]
 80083ce:	eef1 7a67 	vneg.f32	s15, s15
 80083d2:	edc4 7a01 	vstr	s15, [r4, #4]
 80083d6:	e779      	b.n	80082cc <__ieee754_rem_pio2f+0x130>
 80083d8:	2303      	movs	r3, #3
 80083da:	e7e5      	b.n	80083a8 <__ieee754_rem_pio2f+0x20c>
 80083dc:	3f490fd8 	.word	0x3f490fd8
 80083e0:	4016cbe3 	.word	0x4016cbe3
 80083e4:	3fc90f80 	.word	0x3fc90f80
 80083e8:	3fc90fd0 	.word	0x3fc90fd0
 80083ec:	37354443 	.word	0x37354443
 80083f0:	37354400 	.word	0x37354400
 80083f4:	2e85a308 	.word	0x2e85a308
 80083f8:	43490f80 	.word	0x43490f80
 80083fc:	3f22f984 	.word	0x3f22f984
 8008400:	08008cb8 	.word	0x08008cb8
 8008404:	2e85a300 	.word	0x2e85a300
 8008408:	248d3132 	.word	0x248d3132
 800840c:	43800000 	.word	0x43800000
 8008410:	08008d38 	.word	0x08008d38

08008414 <__kernel_cosf>:
 8008414:	ee10 3a10 	vmov	r3, s0
 8008418:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800841c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008420:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008424:	da05      	bge.n	8008432 <__kernel_cosf+0x1e>
 8008426:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800842a:	ee17 2a90 	vmov	r2, s15
 800842e:	2a00      	cmp	r2, #0
 8008430:	d03d      	beq.n	80084ae <__kernel_cosf+0x9a>
 8008432:	ee60 5a00 	vmul.f32	s11, s0, s0
 8008436:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80084b4 <__kernel_cosf+0xa0>
 800843a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80084b8 <__kernel_cosf+0xa4>
 800843e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80084bc <__kernel_cosf+0xa8>
 8008442:	4a1f      	ldr	r2, [pc, #124]	; (80084c0 <__kernel_cosf+0xac>)
 8008444:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8008448:	4293      	cmp	r3, r2
 800844a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80084c4 <__kernel_cosf+0xb0>
 800844e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008452:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80084c8 <__kernel_cosf+0xb4>
 8008456:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800845a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80084cc <__kernel_cosf+0xb8>
 800845e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008462:	eeb0 7a66 	vmov.f32	s14, s13
 8008466:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800846a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800846e:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8008472:	ee67 6a25 	vmul.f32	s13, s14, s11
 8008476:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800847a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800847e:	dc04      	bgt.n	800848a <__kernel_cosf+0x76>
 8008480:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008484:	ee36 0a47 	vsub.f32	s0, s12, s14
 8008488:	4770      	bx	lr
 800848a:	4a11      	ldr	r2, [pc, #68]	; (80084d0 <__kernel_cosf+0xbc>)
 800848c:	4293      	cmp	r3, r2
 800848e:	bfda      	itte	le
 8008490:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8008494:	ee06 3a90 	vmovle	s13, r3
 8008498:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800849c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80084a0:	ee36 0a66 	vsub.f32	s0, s12, s13
 80084a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80084a8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80084ac:	4770      	bx	lr
 80084ae:	eeb0 0a46 	vmov.f32	s0, s12
 80084b2:	4770      	bx	lr
 80084b4:	ad47d74e 	.word	0xad47d74e
 80084b8:	310f74f6 	.word	0x310f74f6
 80084bc:	3d2aaaab 	.word	0x3d2aaaab
 80084c0:	3e999999 	.word	0x3e999999
 80084c4:	b493f27c 	.word	0xb493f27c
 80084c8:	37d00d01 	.word	0x37d00d01
 80084cc:	bab60b61 	.word	0xbab60b61
 80084d0:	3f480000 	.word	0x3f480000

080084d4 <__kernel_rem_pio2f>:
 80084d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d8:	ed2d 8b04 	vpush	{d8-d9}
 80084dc:	b0d9      	sub	sp, #356	; 0x164
 80084de:	4688      	mov	r8, r1
 80084e0:	9002      	str	r0, [sp, #8]
 80084e2:	49bb      	ldr	r1, [pc, #748]	; (80087d0 <__kernel_rem_pio2f+0x2fc>)
 80084e4:	9866      	ldr	r0, [sp, #408]	; 0x198
 80084e6:	9301      	str	r3, [sp, #4]
 80084e8:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 80084ec:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 80084f0:	1e59      	subs	r1, r3, #1
 80084f2:	1d13      	adds	r3, r2, #4
 80084f4:	db27      	blt.n	8008546 <__kernel_rem_pio2f+0x72>
 80084f6:	f1b2 0b03 	subs.w	fp, r2, #3
 80084fa:	bf48      	it	mi
 80084fc:	f102 0b04 	addmi.w	fp, r2, #4
 8008500:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8008504:	1c45      	adds	r5, r0, #1
 8008506:	00ec      	lsls	r4, r5, #3
 8008508:	1a47      	subs	r7, r0, r1
 800850a:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80087e0 <__kernel_rem_pio2f+0x30c>
 800850e:	9403      	str	r4, [sp, #12]
 8008510:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8008514:	eb0a 0c01 	add.w	ip, sl, r1
 8008518:	ae1c      	add	r6, sp, #112	; 0x70
 800851a:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800851e:	2400      	movs	r4, #0
 8008520:	4564      	cmp	r4, ip
 8008522:	dd12      	ble.n	800854a <__kernel_rem_pio2f+0x76>
 8008524:	9b01      	ldr	r3, [sp, #4]
 8008526:	ac1c      	add	r4, sp, #112	; 0x70
 8008528:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800852c:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8008530:	f04f 0c00 	mov.w	ip, #0
 8008534:	45d4      	cmp	ip, sl
 8008536:	dc27      	bgt.n	8008588 <__kernel_rem_pio2f+0xb4>
 8008538:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800853c:	eddf 7aa8 	vldr	s15, [pc, #672]	; 80087e0 <__kernel_rem_pio2f+0x30c>
 8008540:	4627      	mov	r7, r4
 8008542:	2600      	movs	r6, #0
 8008544:	e016      	b.n	8008574 <__kernel_rem_pio2f+0xa0>
 8008546:	2000      	movs	r0, #0
 8008548:	e7dc      	b.n	8008504 <__kernel_rem_pio2f+0x30>
 800854a:	42e7      	cmn	r7, r4
 800854c:	bf5d      	ittte	pl
 800854e:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8008552:	ee07 3a90 	vmovpl	s15, r3
 8008556:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800855a:	eef0 7a47 	vmovmi.f32	s15, s14
 800855e:	ece6 7a01 	vstmia	r6!, {s15}
 8008562:	3401      	adds	r4, #1
 8008564:	e7dc      	b.n	8008520 <__kernel_rem_pio2f+0x4c>
 8008566:	ecf9 6a01 	vldmia	r9!, {s13}
 800856a:	ed97 7a00 	vldr	s14, [r7]
 800856e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008572:	3601      	adds	r6, #1
 8008574:	428e      	cmp	r6, r1
 8008576:	f1a7 0704 	sub.w	r7, r7, #4
 800857a:	ddf4      	ble.n	8008566 <__kernel_rem_pio2f+0x92>
 800857c:	eceb 7a01 	vstmia	fp!, {s15}
 8008580:	f10c 0c01 	add.w	ip, ip, #1
 8008584:	3404      	adds	r4, #4
 8008586:	e7d5      	b.n	8008534 <__kernel_rem_pio2f+0x60>
 8008588:	ab08      	add	r3, sp, #32
 800858a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800858e:	eddf 8a93 	vldr	s17, [pc, #588]	; 80087dc <__kernel_rem_pio2f+0x308>
 8008592:	ed9f 9a91 	vldr	s18, [pc, #580]	; 80087d8 <__kernel_rem_pio2f+0x304>
 8008596:	9304      	str	r3, [sp, #16]
 8008598:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800859c:	4656      	mov	r6, sl
 800859e:	00b3      	lsls	r3, r6, #2
 80085a0:	9305      	str	r3, [sp, #20]
 80085a2:	ab58      	add	r3, sp, #352	; 0x160
 80085a4:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80085a8:	ac08      	add	r4, sp, #32
 80085aa:	ab44      	add	r3, sp, #272	; 0x110
 80085ac:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80085b0:	46a4      	mov	ip, r4
 80085b2:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80085b6:	4637      	mov	r7, r6
 80085b8:	2f00      	cmp	r7, #0
 80085ba:	f1a0 0004 	sub.w	r0, r0, #4
 80085be:	dc4f      	bgt.n	8008660 <__kernel_rem_pio2f+0x18c>
 80085c0:	4628      	mov	r0, r5
 80085c2:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80085c6:	f000 fa8d 	bl	8008ae4 <scalbnf>
 80085ca:	eeb0 8a40 	vmov.f32	s16, s0
 80085ce:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80085d2:	ee28 0a00 	vmul.f32	s0, s16, s0
 80085d6:	f000 fa43 	bl	8008a60 <floorf>
 80085da:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80085de:	eea0 8a67 	vfms.f32	s16, s0, s15
 80085e2:	2d00      	cmp	r5, #0
 80085e4:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80085e8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80085ec:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80085f0:	ee17 9a90 	vmov	r9, s15
 80085f4:	ee38 8a40 	vsub.f32	s16, s16, s0
 80085f8:	dd44      	ble.n	8008684 <__kernel_rem_pio2f+0x1b0>
 80085fa:	f106 3cff 	add.w	ip, r6, #4294967295
 80085fe:	ab08      	add	r3, sp, #32
 8008600:	f1c5 0e08 	rsb	lr, r5, #8
 8008604:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8008608:	fa47 f00e 	asr.w	r0, r7, lr
 800860c:	4481      	add	r9, r0
 800860e:	fa00 f00e 	lsl.w	r0, r0, lr
 8008612:	1a3f      	subs	r7, r7, r0
 8008614:	f1c5 0007 	rsb	r0, r5, #7
 8008618:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800861c:	4107      	asrs	r7, r0
 800861e:	2f00      	cmp	r7, #0
 8008620:	dd3f      	ble.n	80086a2 <__kernel_rem_pio2f+0x1ce>
 8008622:	f04f 0e00 	mov.w	lr, #0
 8008626:	f109 0901 	add.w	r9, r9, #1
 800862a:	4673      	mov	r3, lr
 800862c:	4576      	cmp	r6, lr
 800862e:	dc6b      	bgt.n	8008708 <__kernel_rem_pio2f+0x234>
 8008630:	2d00      	cmp	r5, #0
 8008632:	dd04      	ble.n	800863e <__kernel_rem_pio2f+0x16a>
 8008634:	2d01      	cmp	r5, #1
 8008636:	d078      	beq.n	800872a <__kernel_rem_pio2f+0x256>
 8008638:	2d02      	cmp	r5, #2
 800863a:	f000 8081 	beq.w	8008740 <__kernel_rem_pio2f+0x26c>
 800863e:	2f02      	cmp	r7, #2
 8008640:	d12f      	bne.n	80086a2 <__kernel_rem_pio2f+0x1ce>
 8008642:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008646:	ee30 8a48 	vsub.f32	s16, s0, s16
 800864a:	b353      	cbz	r3, 80086a2 <__kernel_rem_pio2f+0x1ce>
 800864c:	4628      	mov	r0, r5
 800864e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8008652:	f000 fa47 	bl	8008ae4 <scalbnf>
 8008656:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800865a:	ee38 8a40 	vsub.f32	s16, s16, s0
 800865e:	e020      	b.n	80086a2 <__kernel_rem_pio2f+0x1ce>
 8008660:	ee60 7a28 	vmul.f32	s15, s0, s17
 8008664:	3f01      	subs	r7, #1
 8008666:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800866a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800866e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8008672:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008676:	ecac 0a01 	vstmia	ip!, {s0}
 800867a:	ed90 0a00 	vldr	s0, [r0]
 800867e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008682:	e799      	b.n	80085b8 <__kernel_rem_pio2f+0xe4>
 8008684:	d105      	bne.n	8008692 <__kernel_rem_pio2f+0x1be>
 8008686:	1e70      	subs	r0, r6, #1
 8008688:	ab08      	add	r3, sp, #32
 800868a:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800868e:	11ff      	asrs	r7, r7, #7
 8008690:	e7c5      	b.n	800861e <__kernel_rem_pio2f+0x14a>
 8008692:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008696:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800869a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800869e:	da31      	bge.n	8008704 <__kernel_rem_pio2f+0x230>
 80086a0:	2700      	movs	r7, #0
 80086a2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80086a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086aa:	f040 809b 	bne.w	80087e4 <__kernel_rem_pio2f+0x310>
 80086ae:	1e74      	subs	r4, r6, #1
 80086b0:	46a4      	mov	ip, r4
 80086b2:	2000      	movs	r0, #0
 80086b4:	45d4      	cmp	ip, sl
 80086b6:	da4a      	bge.n	800874e <__kernel_rem_pio2f+0x27a>
 80086b8:	2800      	cmp	r0, #0
 80086ba:	d07a      	beq.n	80087b2 <__kernel_rem_pio2f+0x2de>
 80086bc:	ab08      	add	r3, sp, #32
 80086be:	3d08      	subs	r5, #8
 80086c0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	f000 8081 	beq.w	80087cc <__kernel_rem_pio2f+0x2f8>
 80086ca:	4628      	mov	r0, r5
 80086cc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80086d0:	00a5      	lsls	r5, r4, #2
 80086d2:	f000 fa07 	bl	8008ae4 <scalbnf>
 80086d6:	aa44      	add	r2, sp, #272	; 0x110
 80086d8:	1d2b      	adds	r3, r5, #4
 80086da:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80087dc <__kernel_rem_pio2f+0x308>
 80086de:	18d1      	adds	r1, r2, r3
 80086e0:	4622      	mov	r2, r4
 80086e2:	2a00      	cmp	r2, #0
 80086e4:	f280 80ae 	bge.w	8008844 <__kernel_rem_pio2f+0x370>
 80086e8:	4622      	mov	r2, r4
 80086ea:	2a00      	cmp	r2, #0
 80086ec:	f2c0 80cc 	blt.w	8008888 <__kernel_rem_pio2f+0x3b4>
 80086f0:	a944      	add	r1, sp, #272	; 0x110
 80086f2:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 80086f6:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 80087d4 <__kernel_rem_pio2f+0x300>
 80086fa:	eddf 7a39 	vldr	s15, [pc, #228]	; 80087e0 <__kernel_rem_pio2f+0x30c>
 80086fe:	2000      	movs	r0, #0
 8008700:	1aa1      	subs	r1, r4, r2
 8008702:	e0b6      	b.n	8008872 <__kernel_rem_pio2f+0x39e>
 8008704:	2702      	movs	r7, #2
 8008706:	e78c      	b.n	8008622 <__kernel_rem_pio2f+0x14e>
 8008708:	6820      	ldr	r0, [r4, #0]
 800870a:	b94b      	cbnz	r3, 8008720 <__kernel_rem_pio2f+0x24c>
 800870c:	b118      	cbz	r0, 8008716 <__kernel_rem_pio2f+0x242>
 800870e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8008712:	6020      	str	r0, [r4, #0]
 8008714:	2001      	movs	r0, #1
 8008716:	f10e 0e01 	add.w	lr, lr, #1
 800871a:	3404      	adds	r4, #4
 800871c:	4603      	mov	r3, r0
 800871e:	e785      	b.n	800862c <__kernel_rem_pio2f+0x158>
 8008720:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8008724:	6020      	str	r0, [r4, #0]
 8008726:	4618      	mov	r0, r3
 8008728:	e7f5      	b.n	8008716 <__kernel_rem_pio2f+0x242>
 800872a:	1e74      	subs	r4, r6, #1
 800872c:	a808      	add	r0, sp, #32
 800872e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8008732:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008736:	f10d 0c20 	add.w	ip, sp, #32
 800873a:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800873e:	e77e      	b.n	800863e <__kernel_rem_pio2f+0x16a>
 8008740:	1e74      	subs	r4, r6, #1
 8008742:	a808      	add	r0, sp, #32
 8008744:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8008748:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800874c:	e7f3      	b.n	8008736 <__kernel_rem_pio2f+0x262>
 800874e:	ab08      	add	r3, sp, #32
 8008750:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8008754:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008758:	4318      	orrs	r0, r3
 800875a:	e7ab      	b.n	80086b4 <__kernel_rem_pio2f+0x1e0>
 800875c:	f10c 0c01 	add.w	ip, ip, #1
 8008760:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8008764:	2c00      	cmp	r4, #0
 8008766:	d0f9      	beq.n	800875c <__kernel_rem_pio2f+0x288>
 8008768:	9b05      	ldr	r3, [sp, #20]
 800876a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800876e:	eb0d 0003 	add.w	r0, sp, r3
 8008772:	9b01      	ldr	r3, [sp, #4]
 8008774:	18f4      	adds	r4, r6, r3
 8008776:	ab1c      	add	r3, sp, #112	; 0x70
 8008778:	1c77      	adds	r7, r6, #1
 800877a:	384c      	subs	r0, #76	; 0x4c
 800877c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008780:	4466      	add	r6, ip
 8008782:	42be      	cmp	r6, r7
 8008784:	f6ff af0b 	blt.w	800859e <__kernel_rem_pio2f+0xca>
 8008788:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800878c:	f8dd e008 	ldr.w	lr, [sp, #8]
 8008790:	ee07 3a90 	vmov	s15, r3
 8008794:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008798:	f04f 0c00 	mov.w	ip, #0
 800879c:	ece4 7a01 	vstmia	r4!, {s15}
 80087a0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80087e0 <__kernel_rem_pio2f+0x30c>
 80087a4:	46a1      	mov	r9, r4
 80087a6:	458c      	cmp	ip, r1
 80087a8:	dd07      	ble.n	80087ba <__kernel_rem_pio2f+0x2e6>
 80087aa:	ece0 7a01 	vstmia	r0!, {s15}
 80087ae:	3701      	adds	r7, #1
 80087b0:	e7e7      	b.n	8008782 <__kernel_rem_pio2f+0x2ae>
 80087b2:	9804      	ldr	r0, [sp, #16]
 80087b4:	f04f 0c01 	mov.w	ip, #1
 80087b8:	e7d2      	b.n	8008760 <__kernel_rem_pio2f+0x28c>
 80087ba:	ecfe 6a01 	vldmia	lr!, {s13}
 80087be:	ed39 7a01 	vldmdb	r9!, {s14}
 80087c2:	f10c 0c01 	add.w	ip, ip, #1
 80087c6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80087ca:	e7ec      	b.n	80087a6 <__kernel_rem_pio2f+0x2d2>
 80087cc:	3c01      	subs	r4, #1
 80087ce:	e775      	b.n	80086bc <__kernel_rem_pio2f+0x1e8>
 80087d0:	0800907c 	.word	0x0800907c
 80087d4:	08009050 	.word	0x08009050
 80087d8:	43800000 	.word	0x43800000
 80087dc:	3b800000 	.word	0x3b800000
 80087e0:	00000000 	.word	0x00000000
 80087e4:	9b03      	ldr	r3, [sp, #12]
 80087e6:	eeb0 0a48 	vmov.f32	s0, s16
 80087ea:	1a98      	subs	r0, r3, r2
 80087ec:	f000 f97a 	bl	8008ae4 <scalbnf>
 80087f0:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80087d8 <__kernel_rem_pio2f+0x304>
 80087f4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80087f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087fc:	db19      	blt.n	8008832 <__kernel_rem_pio2f+0x35e>
 80087fe:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80087dc <__kernel_rem_pio2f+0x308>
 8008802:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008806:	aa08      	add	r2, sp, #32
 8008808:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800880c:	1c74      	adds	r4, r6, #1
 800880e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008812:	3508      	adds	r5, #8
 8008814:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8008818:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800881c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008820:	ee10 3a10 	vmov	r3, s0
 8008824:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8008828:	ee17 3a90 	vmov	r3, s15
 800882c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8008830:	e74b      	b.n	80086ca <__kernel_rem_pio2f+0x1f6>
 8008832:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008836:	aa08      	add	r2, sp, #32
 8008838:	ee10 3a10 	vmov	r3, s0
 800883c:	4634      	mov	r4, r6
 800883e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8008842:	e742      	b.n	80086ca <__kernel_rem_pio2f+0x1f6>
 8008844:	a808      	add	r0, sp, #32
 8008846:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800884a:	9001      	str	r0, [sp, #4]
 800884c:	ee07 0a90 	vmov	s15, r0
 8008850:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008854:	3a01      	subs	r2, #1
 8008856:	ee67 7a80 	vmul.f32	s15, s15, s0
 800885a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800885e:	ed61 7a01 	vstmdb	r1!, {s15}
 8008862:	e73e      	b.n	80086e2 <__kernel_rem_pio2f+0x20e>
 8008864:	ecfc 6a01 	vldmia	ip!, {s13}
 8008868:	ecb6 7a01 	vldmia	r6!, {s14}
 800886c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008870:	3001      	adds	r0, #1
 8008872:	4550      	cmp	r0, sl
 8008874:	dc01      	bgt.n	800887a <__kernel_rem_pio2f+0x3a6>
 8008876:	4288      	cmp	r0, r1
 8008878:	ddf4      	ble.n	8008864 <__kernel_rem_pio2f+0x390>
 800887a:	a858      	add	r0, sp, #352	; 0x160
 800887c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008880:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8008884:	3a01      	subs	r2, #1
 8008886:	e730      	b.n	80086ea <__kernel_rem_pio2f+0x216>
 8008888:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800888a:	2a02      	cmp	r2, #2
 800888c:	dc09      	bgt.n	80088a2 <__kernel_rem_pio2f+0x3ce>
 800888e:	2a00      	cmp	r2, #0
 8008890:	dc2a      	bgt.n	80088e8 <__kernel_rem_pio2f+0x414>
 8008892:	d043      	beq.n	800891c <__kernel_rem_pio2f+0x448>
 8008894:	f009 0007 	and.w	r0, r9, #7
 8008898:	b059      	add	sp, #356	; 0x164
 800889a:	ecbd 8b04 	vpop	{d8-d9}
 800889e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088a2:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80088a4:	2b03      	cmp	r3, #3
 80088a6:	d1f5      	bne.n	8008894 <__kernel_rem_pio2f+0x3c0>
 80088a8:	ab30      	add	r3, sp, #192	; 0xc0
 80088aa:	442b      	add	r3, r5
 80088ac:	461a      	mov	r2, r3
 80088ae:	4619      	mov	r1, r3
 80088b0:	4620      	mov	r0, r4
 80088b2:	2800      	cmp	r0, #0
 80088b4:	f1a1 0104 	sub.w	r1, r1, #4
 80088b8:	dc51      	bgt.n	800895e <__kernel_rem_pio2f+0x48a>
 80088ba:	4621      	mov	r1, r4
 80088bc:	2901      	cmp	r1, #1
 80088be:	f1a2 0204 	sub.w	r2, r2, #4
 80088c2:	dc5c      	bgt.n	800897e <__kernel_rem_pio2f+0x4aa>
 80088c4:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 80087e0 <__kernel_rem_pio2f+0x30c>
 80088c8:	3304      	adds	r3, #4
 80088ca:	2c01      	cmp	r4, #1
 80088cc:	dc67      	bgt.n	800899e <__kernel_rem_pio2f+0x4ca>
 80088ce:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80088d2:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 80088d6:	2f00      	cmp	r7, #0
 80088d8:	d167      	bne.n	80089aa <__kernel_rem_pio2f+0x4d6>
 80088da:	edc8 6a00 	vstr	s13, [r8]
 80088de:	ed88 7a01 	vstr	s14, [r8, #4]
 80088e2:	edc8 7a02 	vstr	s15, [r8, #8]
 80088e6:	e7d5      	b.n	8008894 <__kernel_rem_pio2f+0x3c0>
 80088e8:	aa30      	add	r2, sp, #192	; 0xc0
 80088ea:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 80087e0 <__kernel_rem_pio2f+0x30c>
 80088ee:	4413      	add	r3, r2
 80088f0:	4622      	mov	r2, r4
 80088f2:	2a00      	cmp	r2, #0
 80088f4:	da24      	bge.n	8008940 <__kernel_rem_pio2f+0x46c>
 80088f6:	b34f      	cbz	r7, 800894c <__kernel_rem_pio2f+0x478>
 80088f8:	eef1 7a47 	vneg.f32	s15, s14
 80088fc:	edc8 7a00 	vstr	s15, [r8]
 8008900:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8008904:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008908:	aa31      	add	r2, sp, #196	; 0xc4
 800890a:	2301      	movs	r3, #1
 800890c:	429c      	cmp	r4, r3
 800890e:	da20      	bge.n	8008952 <__kernel_rem_pio2f+0x47e>
 8008910:	b10f      	cbz	r7, 8008916 <__kernel_rem_pio2f+0x442>
 8008912:	eef1 7a67 	vneg.f32	s15, s15
 8008916:	edc8 7a01 	vstr	s15, [r8, #4]
 800891a:	e7bb      	b.n	8008894 <__kernel_rem_pio2f+0x3c0>
 800891c:	aa30      	add	r2, sp, #192	; 0xc0
 800891e:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 80087e0 <__kernel_rem_pio2f+0x30c>
 8008922:	4413      	add	r3, r2
 8008924:	2c00      	cmp	r4, #0
 8008926:	da05      	bge.n	8008934 <__kernel_rem_pio2f+0x460>
 8008928:	b10f      	cbz	r7, 800892e <__kernel_rem_pio2f+0x45a>
 800892a:	eef1 7a67 	vneg.f32	s15, s15
 800892e:	edc8 7a00 	vstr	s15, [r8]
 8008932:	e7af      	b.n	8008894 <__kernel_rem_pio2f+0x3c0>
 8008934:	ed33 7a01 	vldmdb	r3!, {s14}
 8008938:	3c01      	subs	r4, #1
 800893a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800893e:	e7f1      	b.n	8008924 <__kernel_rem_pio2f+0x450>
 8008940:	ed73 7a01 	vldmdb	r3!, {s15}
 8008944:	3a01      	subs	r2, #1
 8008946:	ee37 7a27 	vadd.f32	s14, s14, s15
 800894a:	e7d2      	b.n	80088f2 <__kernel_rem_pio2f+0x41e>
 800894c:	eef0 7a47 	vmov.f32	s15, s14
 8008950:	e7d4      	b.n	80088fc <__kernel_rem_pio2f+0x428>
 8008952:	ecb2 7a01 	vldmia	r2!, {s14}
 8008956:	3301      	adds	r3, #1
 8008958:	ee77 7a87 	vadd.f32	s15, s15, s14
 800895c:	e7d6      	b.n	800890c <__kernel_rem_pio2f+0x438>
 800895e:	edd1 7a00 	vldr	s15, [r1]
 8008962:	edd1 6a01 	vldr	s13, [r1, #4]
 8008966:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800896a:	3801      	subs	r0, #1
 800896c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008970:	ed81 7a00 	vstr	s14, [r1]
 8008974:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008978:	edc1 7a01 	vstr	s15, [r1, #4]
 800897c:	e799      	b.n	80088b2 <__kernel_rem_pio2f+0x3de>
 800897e:	edd2 7a00 	vldr	s15, [r2]
 8008982:	edd2 6a01 	vldr	s13, [r2, #4]
 8008986:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800898a:	3901      	subs	r1, #1
 800898c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008990:	ed82 7a00 	vstr	s14, [r2]
 8008994:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008998:	edc2 7a01 	vstr	s15, [r2, #4]
 800899c:	e78e      	b.n	80088bc <__kernel_rem_pio2f+0x3e8>
 800899e:	ed33 7a01 	vldmdb	r3!, {s14}
 80089a2:	3c01      	subs	r4, #1
 80089a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80089a8:	e78f      	b.n	80088ca <__kernel_rem_pio2f+0x3f6>
 80089aa:	eef1 6a66 	vneg.f32	s13, s13
 80089ae:	eeb1 7a47 	vneg.f32	s14, s14
 80089b2:	edc8 6a00 	vstr	s13, [r8]
 80089b6:	ed88 7a01 	vstr	s14, [r8, #4]
 80089ba:	eef1 7a67 	vneg.f32	s15, s15
 80089be:	e790      	b.n	80088e2 <__kernel_rem_pio2f+0x40e>

080089c0 <__kernel_sinf>:
 80089c0:	ee10 3a10 	vmov	r3, s0
 80089c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80089c8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80089cc:	da04      	bge.n	80089d8 <__kernel_sinf+0x18>
 80089ce:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80089d2:	ee17 3a90 	vmov	r3, s15
 80089d6:	b35b      	cbz	r3, 8008a30 <__kernel_sinf+0x70>
 80089d8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80089dc:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008a34 <__kernel_sinf+0x74>
 80089e0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8008a38 <__kernel_sinf+0x78>
 80089e4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80089e8:	eddf 7a14 	vldr	s15, [pc, #80]	; 8008a3c <__kernel_sinf+0x7c>
 80089ec:	eee6 7a07 	vfma.f32	s15, s12, s14
 80089f0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8008a40 <__kernel_sinf+0x80>
 80089f4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80089f8:	eddf 7a12 	vldr	s15, [pc, #72]	; 8008a44 <__kernel_sinf+0x84>
 80089fc:	ee60 6a07 	vmul.f32	s13, s0, s14
 8008a00:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008a04:	b930      	cbnz	r0, 8008a14 <__kernel_sinf+0x54>
 8008a06:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8008a48 <__kernel_sinf+0x88>
 8008a0a:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008a0e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8008a12:	4770      	bx	lr
 8008a14:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008a18:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008a1c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8008a20:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8008a24:	eddf 7a09 	vldr	s15, [pc, #36]	; 8008a4c <__kernel_sinf+0x8c>
 8008a28:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8008a2c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8008a30:	4770      	bx	lr
 8008a32:	bf00      	nop
 8008a34:	2f2ec9d3 	.word	0x2f2ec9d3
 8008a38:	b2d72f34 	.word	0xb2d72f34
 8008a3c:	3638ef1b 	.word	0x3638ef1b
 8008a40:	b9500d01 	.word	0xb9500d01
 8008a44:	3c088889 	.word	0x3c088889
 8008a48:	be2aaaab 	.word	0xbe2aaaab
 8008a4c:	3e2aaaab 	.word	0x3e2aaaab

08008a50 <fabsf>:
 8008a50:	ee10 3a10 	vmov	r3, s0
 8008a54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a58:	ee00 3a10 	vmov	s0, r3
 8008a5c:	4770      	bx	lr
	...

08008a60 <floorf>:
 8008a60:	ee10 3a10 	vmov	r3, s0
 8008a64:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008a68:	3a7f      	subs	r2, #127	; 0x7f
 8008a6a:	2a16      	cmp	r2, #22
 8008a6c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008a70:	dc2a      	bgt.n	8008ac8 <floorf+0x68>
 8008a72:	2a00      	cmp	r2, #0
 8008a74:	da11      	bge.n	8008a9a <floorf+0x3a>
 8008a76:	eddf 7a18 	vldr	s15, [pc, #96]	; 8008ad8 <floorf+0x78>
 8008a7a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008a7e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a86:	dd05      	ble.n	8008a94 <floorf+0x34>
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	da23      	bge.n	8008ad4 <floorf+0x74>
 8008a8c:	4a13      	ldr	r2, [pc, #76]	; (8008adc <floorf+0x7c>)
 8008a8e:	2900      	cmp	r1, #0
 8008a90:	bf18      	it	ne
 8008a92:	4613      	movne	r3, r2
 8008a94:	ee00 3a10 	vmov	s0, r3
 8008a98:	4770      	bx	lr
 8008a9a:	4911      	ldr	r1, [pc, #68]	; (8008ae0 <floorf+0x80>)
 8008a9c:	4111      	asrs	r1, r2
 8008a9e:	420b      	tst	r3, r1
 8008aa0:	d0fa      	beq.n	8008a98 <floorf+0x38>
 8008aa2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8008ad8 <floorf+0x78>
 8008aa6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008aaa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ab2:	ddef      	ble.n	8008a94 <floorf+0x34>
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	bfbe      	ittt	lt
 8008ab8:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8008abc:	fa40 f202 	asrlt.w	r2, r0, r2
 8008ac0:	189b      	addlt	r3, r3, r2
 8008ac2:	ea23 0301 	bic.w	r3, r3, r1
 8008ac6:	e7e5      	b.n	8008a94 <floorf+0x34>
 8008ac8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008acc:	d3e4      	bcc.n	8008a98 <floorf+0x38>
 8008ace:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008ad2:	4770      	bx	lr
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	e7dd      	b.n	8008a94 <floorf+0x34>
 8008ad8:	7149f2ca 	.word	0x7149f2ca
 8008adc:	bf800000 	.word	0xbf800000
 8008ae0:	007fffff 	.word	0x007fffff

08008ae4 <scalbnf>:
 8008ae4:	ee10 3a10 	vmov	r3, s0
 8008ae8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8008aec:	d025      	beq.n	8008b3a <scalbnf+0x56>
 8008aee:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008af2:	d302      	bcc.n	8008afa <scalbnf+0x16>
 8008af4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008af8:	4770      	bx	lr
 8008afa:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8008afe:	d122      	bne.n	8008b46 <scalbnf+0x62>
 8008b00:	4b2a      	ldr	r3, [pc, #168]	; (8008bac <scalbnf+0xc8>)
 8008b02:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8008bb0 <scalbnf+0xcc>
 8008b06:	4298      	cmp	r0, r3
 8008b08:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008b0c:	db16      	blt.n	8008b3c <scalbnf+0x58>
 8008b0e:	ee10 3a10 	vmov	r3, s0
 8008b12:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008b16:	3a19      	subs	r2, #25
 8008b18:	4402      	add	r2, r0
 8008b1a:	2afe      	cmp	r2, #254	; 0xfe
 8008b1c:	dd15      	ble.n	8008b4a <scalbnf+0x66>
 8008b1e:	ee10 3a10 	vmov	r3, s0
 8008b22:	eddf 7a24 	vldr	s15, [pc, #144]	; 8008bb4 <scalbnf+0xd0>
 8008b26:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008bb8 <scalbnf+0xd4>
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	eeb0 7a67 	vmov.f32	s14, s15
 8008b30:	bfb8      	it	lt
 8008b32:	eef0 7a66 	vmovlt.f32	s15, s13
 8008b36:	ee27 0a27 	vmul.f32	s0, s14, s15
 8008b3a:	4770      	bx	lr
 8008b3c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008bbc <scalbnf+0xd8>
 8008b40:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008b44:	4770      	bx	lr
 8008b46:	0dd2      	lsrs	r2, r2, #23
 8008b48:	e7e6      	b.n	8008b18 <scalbnf+0x34>
 8008b4a:	2a00      	cmp	r2, #0
 8008b4c:	dd06      	ble.n	8008b5c <scalbnf+0x78>
 8008b4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008b52:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008b56:	ee00 3a10 	vmov	s0, r3
 8008b5a:	4770      	bx	lr
 8008b5c:	f112 0f16 	cmn.w	r2, #22
 8008b60:	da1a      	bge.n	8008b98 <scalbnf+0xb4>
 8008b62:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008b66:	4298      	cmp	r0, r3
 8008b68:	ee10 3a10 	vmov	r3, s0
 8008b6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b70:	dd0a      	ble.n	8008b88 <scalbnf+0xa4>
 8008b72:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8008bb4 <scalbnf+0xd0>
 8008b76:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008bb8 <scalbnf+0xd4>
 8008b7a:	eef0 7a40 	vmov.f32	s15, s0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	bf18      	it	ne
 8008b82:	eeb0 0a47 	vmovne.f32	s0, s14
 8008b86:	e7db      	b.n	8008b40 <scalbnf+0x5c>
 8008b88:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8008bbc <scalbnf+0xd8>
 8008b8c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8008bc0 <scalbnf+0xdc>
 8008b90:	eef0 7a40 	vmov.f32	s15, s0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	e7f3      	b.n	8008b80 <scalbnf+0x9c>
 8008b98:	3219      	adds	r2, #25
 8008b9a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008b9e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008ba2:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008bc4 <scalbnf+0xe0>
 8008ba6:	ee07 3a10 	vmov	s14, r3
 8008baa:	e7c4      	b.n	8008b36 <scalbnf+0x52>
 8008bac:	ffff3cb0 	.word	0xffff3cb0
 8008bb0:	4c000000 	.word	0x4c000000
 8008bb4:	7149f2ca 	.word	0x7149f2ca
 8008bb8:	f149f2ca 	.word	0xf149f2ca
 8008bbc:	0da24260 	.word	0x0da24260
 8008bc0:	8da24260 	.word	0x8da24260
 8008bc4:	33000000 	.word	0x33000000

08008bc8 <_init>:
 8008bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bca:	bf00      	nop
 8008bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bce:	bc08      	pop	{r3}
 8008bd0:	469e      	mov	lr, r3
 8008bd2:	4770      	bx	lr

08008bd4 <_fini>:
 8008bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd6:	bf00      	nop
 8008bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bda:	bc08      	pop	{r3}
 8008bdc:	469e      	mov	lr, r3
 8008bde:	4770      	bx	lr
